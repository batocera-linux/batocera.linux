Index: linux-6.8/drivers/gpu/drm/drm_connector.c
===================================================================
--- linux-6.8.orig/drivers/gpu/drm/drm_connector.c
+++ linux-6.8/drivers/gpu/drm/drm_connector.c
@@ -275,6 +275,7 @@ static int __drm_connector_init(struct d
 
 	INIT_LIST_HEAD(&connector->global_connector_list_entry);
 	INIT_LIST_HEAD(&connector->probed_modes);
+	INIT_LIST_HEAD(&connector->user_modes);
 	INIT_LIST_HEAD(&connector->modes);
 	mutex_init(&connector->mutex);
 	mutex_init(&connector->edid_override_mutex);
@@ -559,6 +560,11 @@ void drm_connector_cleanup(struct drm_co
 	list_for_each_entry_safe(mode, t, &connector->probed_modes, head)
 		drm_mode_remove(connector, mode);
 
+	DRM_DEBUG_KMS("[CONNECTOR:%d:%s] Cleaning up.\n",
+				      connector->base.id, connector->name);
+	list_for_each_entry_safe(mode, t, &connector->user_modes, head)
+		drm_mode_remove(connector, mode);
+
 	list_for_each_entry_safe(mode, t, &connector->modes, head)
 		drm_mode_remove(connector, mode);
 
Index: linux-6.8/drivers/gpu/drm/drm_ioctl.c
===================================================================
--- linux-6.8.orig/drivers/gpu/drm/drm_ioctl.c
+++ linux-6.8/drivers/gpu/drm/drm_ioctl.c
@@ -619,8 +619,8 @@ static const struct drm_ioctl_desc drm_i
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_SETGAMMA, drm_mode_gamma_set_ioctl, DRM_MASTER),
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_GETENCODER, drm_mode_getencoder, 0),
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_GETCONNECTOR, drm_mode_getconnector, 0),
-	DRM_IOCTL_DEF(DRM_IOCTL_MODE_ATTACHMODE, drm_noop, DRM_MASTER),
-	DRM_IOCTL_DEF(DRM_IOCTL_MODE_DETACHMODE, drm_noop, DRM_MASTER),
+	DRM_IOCTL_DEF(DRM_IOCTL_MODE_ATTACHMODE, drm_mode_attachmode_ioctl, DRM_MASTER),
+	DRM_IOCTL_DEF(DRM_IOCTL_MODE_DETACHMODE, drm_mode_detachmode_ioctl, DRM_MASTER),
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_GETPROPERTY, drm_mode_getproperty_ioctl, 0),
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_SETPROPERTY, drm_connector_property_set_ioctl, DRM_MASTER),
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_GETPROPBLOB, drm_mode_getblob_ioctl, 0),
Index: linux-6.8/drivers/gpu/drm/drm_mode_object.c
===================================================================
--- linux-6.8.orig/drivers/gpu/drm/drm_mode_object.c
+++ linux-6.8/drivers/gpu/drm/drm_mode_object.c
@@ -143,6 +143,7 @@ struct drm_mode_object *__drm_mode_objec
 	obj = idr_find(&dev->mode_config.object_idr, id);
 	if (obj && type != DRM_MODE_OBJECT_ANY && obj->type != type)
 		obj = NULL;
+
 	if (obj && obj->id != id)
 		obj = NULL;
 
Index: linux-6.8/drivers/gpu/drm/drm_modes.c
===================================================================
--- linux-6.8.orig/drivers/gpu/drm/drm_modes.c
+++ linux-6.8/drivers/gpu/drm/drm_modes.c
@@ -41,6 +41,7 @@
 #include <video/of_videomode.h>
 #include <video/videomode.h>
 
+#include <drm/drm_drv.h>
 #include <drm/drm_crtc.h>
 #include <drm/drm_device.h>
 #include <drm/drm_edid.h>
@@ -595,6 +596,168 @@ err_free_mode:
 EXPORT_SYMBOL(drm_analog_tv_mode);
 
 /**
+ * drm_mode_attachmode - add a mode to the user mode list
+ * @dev: DRM device
+ * @connector: connector to add the mode to
+ * @mode: mode to add
+ *
+ * Add @mode to @connector's user mode list.
+ */
+void drm_mode_attachmode(struct drm_device *dev,
+				struct drm_connector *connector,
+				struct drm_display_mode *mode)
+{
+	WARN_ON(!mutex_is_locked(&connector->dev->mode_config.mutex));
+
+	list_add_tail(&mode->head, &connector->user_modes);
+	//drm_connector_list_update(connector);
+}
+EXPORT_SYMBOL(drm_mode_attachmode);
+
+int drm_mode_detachmode(struct drm_device *dev,
+			       struct drm_connector *connector,
+			       struct drm_display_mode *mode)
+{
+	int found = 0;
+	int ret = 0;
+	struct drm_display_mode *match_mode, *t;
+
+	list_for_each_entry_safe(match_mode, t, &connector->user_modes, head) {
+		if (drm_mode_equal(match_mode, mode)) {
+			list_del(&match_mode->head);
+			drm_mode_destroy(dev, match_mode);
+			found = 1;
+			break;
+		}
+	}
+
+	if (!found)
+		ret = -EINVAL;
+
+	return ret;
+}
+EXPORT_SYMBOL(drm_mode_detachmode);
+
+/**
+ * drm_mode_attachmode - Attach a user mode to a connector
+ * @dev: drm device for the ioctl
+ * @data: data pointer for the ioctl
+ * @file_priv: drm file for the ioctl call
+ *
+ * This attaches a user specified mode to an connector.
+ * Called by the user via ioctl.
+ *
+ * RETURNS:
+ * Zero on success, errno on failure.
+ */
+int drm_mode_attachmode_ioctl(struct drm_device *dev, void *data,
+			      struct drm_file *file_priv)
+{
+	struct drm_mode_mode_cmd *mode_cmd = data;
+	struct drm_connector *connector;
+	struct drm_display_mode *mode;
+	struct drm_mode_object *obj;
+	struct drm_mode_modeinfo *umode = &mode_cmd->mode;
+	enum drm_mode_status mode_status;
+	int ret;
+
+	DRM_DEBUG_KMS("Will drm_core_check_feature for connector %u\n", mode_cmd->connector_id);
+	if (!drm_core_check_feature(dev, DRIVER_MODESET))
+		return -EINVAL;
+
+	drm_modeset_lock_all(dev);
+
+	DRM_DEBUG_KMS("Modeline \"%s\": %d %d %d %d %d %d %d %d %d %d 0x%x 0x%x\n", umode->name, DIV_ROUND_CLOSEST(umode->clock * 1000, umode->htotal * umode->vtotal), umode->clock, \
+	umode->hdisplay, umode->hsync_start, umode->hsync_end, umode->htotal, \
+	umode->vdisplay, umode->vsync_start, umode->vsync_end, umode->vtotal, \
+	umode->type, umode->flags);
+
+	DRM_DEBUG_KMS("Will drm_mode_object_find for connector %u\n", mode_cmd->connector_id);
+	obj = drm_mode_object_find(dev, file_priv, mode_cmd->connector_id, DRM_MODE_OBJECT_CONNECTOR);
+	if (!obj) {
+		DRM_DEBUG_KMS("drm_mode_object_find failed\n");
+		ret = -EINVAL;
+		goto out;
+	}
+	connector = obj_to_connector(obj);
+
+	mode = drm_mode_create(dev);
+	if (!mode) {
+		DRM_DEBUG_KMS("drm_mode_create failed\n");
+		ret = -ENOMEM;
+		goto out;
+	}
+
+	DRM_DEBUG_KMS("Will drm_mode_convert_umode for connector %u\n", mode_cmd->connector_id);
+	ret = drm_mode_convert_umode(dev, mode, umode);
+	if (ret) {
+		DRM_DEBUG_KMS("Invalid mode\n");
+		drm_mode_destroy(dev, mode);
+		goto out;
+	}
+	mode_status = drm_mode_validate_driver(dev, mode);
+	if (mode_status != MODE_OK) {
+		DRM_DEBUG_KMS("Mode failed drm_mode_validate_driver\n");
+		drm_mode_destroy(dev, mode);
+		goto out;
+	}
+	drm_mode_attachmode(dev, connector, mode);
+out:
+	drm_modeset_unlock_all(dev);
+	return ret;
+}
+EXPORT_SYMBOL(drm_mode_attachmode_ioctl);
+
+/**
+ * drm_mode_detachmode - Detach a user specified mode from a connector
+ * @dev: drm device for the ioctl
+ * @data: data pointer for the ioctl
+ * @file_priv: drm file for the ioctl call
+ *
+ * Called by the user via ioctl.
+ *
+ * RETURNS:
+ * Zero on success, errno on failure.
+ */
+int drm_mode_detachmode_ioctl(struct drm_device *dev,
+			      void *data, struct drm_file *file_priv)
+{
+	struct drm_mode_object *obj;
+	struct drm_mode_mode_cmd *mode_cmd = data;
+	struct drm_connector *connector;
+	struct drm_display_mode mode;
+	struct drm_mode_modeinfo *umode = &mode_cmd->mode;
+	int ret;
+
+	DRM_DEBUG_KMS("Got connector id %d\n", mode_cmd->connector_id);
+	DRM_DEBUG_KMS("Checking core features\n");
+	if (!drm_core_check_feature(dev, DRIVER_MODESET))
+		return -EINVAL;
+
+	drm_modeset_lock_all(dev);
+
+	DRM_DEBUG_KMS("Finding drm mode object\n");
+	obj = drm_mode_object_find(dev, file_priv, mode_cmd->connector_id, DRM_MODE_OBJECT_CONNECTOR);
+	if (!obj) {
+		ret = -EINVAL;
+		goto out;
+	}
+	connector = obj_to_connector(obj);
+
+	ret = drm_mode_convert_umode(dev, &mode, umode);
+	if (ret) {
+		DRM_DEBUG_KMS("Invalid mode\n");
+		goto out;
+	}
+
+	ret = drm_mode_detachmode(dev, connector, &mode);
+out:
+	drm_modeset_unlock_all(dev);
+	return ret;
+}
+EXPORT_SYMBOL(drm_mode_detachmode_ioctl);
+
+/**
  * drm_cvt_mode -create a modeline based on the CVT algorithm
  * @dev: drm device
  * @hdisplay: hdisplay size
@@ -1885,7 +2048,7 @@ EXPORT_SYMBOL(drm_mode_sort);
  */
 void drm_connector_list_update(struct drm_connector *connector)
 {
-	struct drm_display_mode *pmode, *pt;
+	struct drm_display_mode *pmode, *umode, *pt;
 
 	WARN_ON(!mutex_is_locked(&connector->dev->mode_config.mutex));
 
@@ -1931,6 +2094,40 @@ void drm_connector_list_update(struct dr
 			list_move_tail(&pmode->head, &connector->modes);
 		}
 	}
+
+	list_for_each_entry_safe(umode, pt, &connector->user_modes, head) {
+		struct drm_display_mode *mode;
+		bool found_it = false;
+
+		/* go through current modes checking for the new probed mode */
+		list_for_each_entry(mode, &connector->modes, head) {
+			DRM_DEBUG("Checking umode %s VS mode %s\n", umode->name, mode->name);
+			if (!drm_mode_equal(umode, mode))
+				continue;
+
+			found_it = true;
+			break;
+		}
+
+		if (!found_it) {
+			struct drm_display_mode *mode_to_add;
+			DRM_DEBUG("Adding mode \"%s\" to connector user_mode list\n", umode->name);
+			/*
+			 * Here we duplicate the mode and add it to the modes list
+			 * instead of moving the mode from connector->user_modes
+			 * to connector->mode, thus losing it for good from the
+			 * user_modes list, which is not hwat we want
+			 */
+			mode_to_add = drm_mode_duplicate(connector->dev, umode);
+			list_add_tail(&mode_to_add->head, &connector->modes);
+		}
+	}
+	list_for_each_entry(pmode, &connector->user_modes, head) {
+		DRM_DEBUG("Connector %s user_mode: %s", connector->name, pmode->name);
+	}
+	list_for_each_entry(pmode, &connector->modes, head) {
+		DRM_DEBUG("Connector %s mode: %s", connector->name, pmode->name);
+	}
 }
 EXPORT_SYMBOL(drm_connector_list_update);
 
Index: linux-6.8/drivers/gpu/drm/drm_probe_helper.c
===================================================================
--- linux-6.8.orig/drivers/gpu/drm/drm_probe_helper.c
+++ linux-6.8/drivers/gpu/drm/drm_probe_helper.c
@@ -374,6 +374,23 @@ retry:
 	return ret;
 }
 
+void drm_mode_validate_user_mode(struct drm_device *dev,
+				 struct drm_connector *connector,
+				 struct drm_display_mode *mode)
+{
+	struct drm_display_mode *match_mode;
+
+	DRM_DEBUG_KMS("Starting debug %s for mode %s\n", connector->name, mode->name);
+	list_for_each_entry(match_mode, &connector->user_modes, head) {
+		DRM_DEBUG_KMS("Testing mode %s vs %s\n", mode->name, match_mode->name);
+		if (drm_mode_equal(match_mode, mode)) {
+			DRM_DEBUG_KMS("Modes match!\n");
+			mode->status = MODE_OK;
+			break;
+		}
+	}
+}
+
 /**
  * drm_helper_probe_detect - probe connector status
  * @connector: connector to probe
@@ -567,6 +584,8 @@ int drm_helper_probe_single_connector_mo
 
 	drm_modeset_acquire_init(&ctx, 0);
 
+	DRM_DEBUG_KMS("[CONNECTOR:%d:%s] called by %ps\n", connector->base.id,
+			connector->name, __builtin_return_address(0));
 	DRM_DEBUG_KMS("[CONNECTOR:%d:%s]\n", connector->base.id,
 			connector->name);
 
@@ -584,6 +603,10 @@ retry:
 
 	old_status = connector->status;
 
+	list_for_each_entry(mode, &connector->modes, head) {
+		drm_mode_validate_user_mode(dev, connector, mode);
+	}
+
 	if (connector->force) {
 		if (connector->force == DRM_FORCE_ON ||
 		    connector->force == DRM_FORCE_ON_DIGITAL)
@@ -696,7 +719,13 @@ exit:
 
 	drm_mode_sort(&connector->modes);
 
-	DRM_DEBUG_KMS("[CONNECTOR:%d:%s] probed modes :\n", connector->base.id,
+	DRM_DEBUG_KMS("[CONNECTOR:%d:%s] final user_modes :\n", connector->base.id,
+			connector->name);
+	list_for_each_entry(mode, &connector->user_modes, head) {
+		drm_mode_set_crtcinfo(mode, CRTC_INTERLACE_HALVE_V);
+		drm_mode_debug_printmodeline(mode);
+	}
+	DRM_DEBUG_KMS("[CONNECTOR:%d:%s] final modes :\n", connector->base.id,
 			connector->name);
 	list_for_each_entry(mode, &connector->modes, head) {
 		drm_mode_set_crtcinfo(mode, CRTC_INTERLACE_HALVE_V);
Index: linux-6.8/include/drm/drm_connector.h
===================================================================
--- linux-6.8.orig/include/drm/drm_connector.h
+++ linux-6.8/include/drm/drm_connector.h
@@ -1628,6 +1628,14 @@ struct drm_connector {
 	struct list_head probed_modes;
 
 	/**
+	 * @user_modes:
+	 * These are modes added by probing with DDC or the BIOS, before
+	 * filtering is applied. Used by the probe helpers. Protected by
+	 * &drm_mode_config.mutex.
+	 */
+	struct list_head user_modes;
+
+	/**
 	 * @display_info: Display information is filled from EDID information
 	 * when a display is detected. For non hot-pluggable displays such as
 	 * flat panels in embedded systems, the driver should initialize the
Index: linux-6.8/include/drm/drm_modes.h
===================================================================
--- linux-6.8.orig/include/drm/drm_modes.h
+++ linux-6.8/include/drm/drm_modes.h
@@ -460,6 +460,10 @@ int drm_mode_convert_umode(struct drm_de
 			   struct drm_display_mode *out,
 			   const struct drm_mode_modeinfo *in);
 void drm_mode_probed_add(struct drm_connector *connector, struct drm_display_mode *mode);
+int drm_mode_attachmode_ioctl(struct drm_device *dev,
+			      void *data, struct drm_file *file_priv);
+int drm_mode_detachmode_ioctl(struct drm_device *dev,
+			      void *data, struct drm_file *file_priv);
 void drm_mode_debug_printmodeline(const struct drm_display_mode *mode);
 bool drm_mode_is_420_only(const struct drm_display_info *display,
 			  const struct drm_display_mode *mode);
