diff -Naur -x '*.rej' -x '*.orig' -x build -x awk_x86_64_defconfig linux-5.12_stock/drivers/gpu/drm/drm_modes.c linux-5.12_15kHz/drivers/gpu/drm/drm_modes.c
--- linux-5.12_stock/drivers/gpu/drm/drm_modes.c	2021-04-25 22:49:08.000000000 +0200
+++ linux-5.12_15kHz/drivers/gpu/drm/drm_modes.c	2021-04-25 23:02:12.099863176 +0200
@@ -44,6 +44,7 @@
 #include <drm/drm_print.h>
 
 #include "drm_crtc_internal.h"
+#include "drm_modes_low_dotclock.h"
 
 /**
  * drm_mode_debug_printmodeline - print a mode to dmesg
@@ -1481,7 +1482,7 @@
 					   struct drm_cmdline_mode *mode)
 {
 	const char *str_start = str;
-	bool rb = false, cvt = false;
+	bool rb = false, cvt = false, low_dotclock = false;
 	int xres = 0, yres = 0;
 	int remaining, i;
 	char *end_ptr;
@@ -1511,6 +1512,12 @@
 		case 'R':
 			rb = true;
 			break;
+		case 'S':
+		case 'c':
+		case 'z':
+			low_dotclock = true;
+			DRM_DEBUG_KMS("Found one of the S/c/z low dotclock mode flag");
+			break;
 		default:
 			/*
 			 * Try to pass that to our extras parsing
@@ -1535,6 +1542,7 @@
 	mode->yres = yres;
 	mode->cvt = cvt;
 	mode->rb = rb;
+	mode->low_dotclock = low_dotclock;
 
 	return 0;
 }
@@ -1864,7 +1872,11 @@
 {
 	struct drm_display_mode *mode;
 
-	if (cmd->cvt)
+	if (cmd->low_dotclock)
+	mode = drm_mode_low_dotclock_res(dev,
+				    cmd->xres, cmd->yres,
+				    cmd->interlace);
+	else if (cmd->cvt)
 		mode = drm_cvt_mode(dev,
 				    cmd->xres, cmd->yres,
 				    cmd->refresh_specified ? cmd->refresh : 60,
diff -Naur -x '*.rej' -x '*.orig' -x build -x awk_x86_64_defconfig linux-5.12_stock/drivers/gpu/drm/drm_modes_low_dotclock.c linux-5.12_15kHz/drivers/gpu/drm/drm_modes_low_dotclock.c
--- linux-5.12_stock/drivers/gpu/drm/drm_modes_low_dotclock.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-5.12_15kHz/drivers/gpu/drm/drm_modes_low_dotclock.c	2021-04-25 23:02:12.311860118 +0200
@@ -0,0 +1,136 @@
+/*
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+ * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+ * OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+#include <drm/drm_modes.h>
+#include <drm/drm_print.h>
+
+
+/**
+ * Low dotclock static modelines
+ * 2 duplicate modes that vary with H freq : 320x240 and 1024x768
+ */
+static struct drm_display_mode drm_low_dotclock_modes[] = {
+	/* 320x240@60.00 15.660 Khz */
+	{ DRM_MODE("320x240", DRM_MODE_TYPE_DRIVER, 6640, 320, 336,
+			368, 424, 0, 240, 242, 245, 261, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC) },
+	/* 384x288 15 Khz */
+	{ DRM_MODE("384x288", DRM_MODE_TYPE_DRIVER, 78876, 384, 400,
+			440, 504, 0, 288, 292, 295, 313, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC) },
+	/* 640x240@60.00 15 Khz */
+	{ DRM_MODE("640x240", DRM_MODE_TYPE_DRIVER, 13220, 640, 672,
+			736, 832, 0, 240, 243, 246, 265, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC) },
+	/* 640x480@60.00 15.750 Khz */
+	{ DRM_MODE("640x480i", DRM_MODE_TYPE_DRIVER, 13104, 640, 664,
+			728, 832, 0, 480, 484, 490, 525, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC | 
+                       DRM_MODE_FLAG_INTERLACE) },
+	/* 648x480@60.00 13.129 Khz */
+	{ DRM_MODE("648x480i", DRM_MODE_TYPE_DRIVER, 13129, 648, 672,
+			736, 840, 0, 480, 482, 488, 521, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC | 
+                       DRM_MODE_FLAG_INTERLACE) },
+	/* 720x480@59.95 15.7369 Khz */
+	{ DRM_MODE("720x480i", DRM_MODE_TYPE_DRIVER, 14856, 720, 752,
+			824, 944, 0, 480, 484, 490, 525, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC | 
+			DRM_MODE_FLAG_INTERLACE) },
+	/* 768x576 15.6250 Khz */
+	{ DRM_MODE("768x576i", DRM_MODE_TYPE_DRIVER, 15625, 768, 800,
+			872, 1000, 0, 576, 582, 588, 625, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC | 
+			DRM_MODE_FLAG_INTERLACE) },
+	/* 800x576@50.00 15.725 Khz */
+	{ DRM_MODE("800x576i", DRM_MODE_TYPE_DRIVER, 16354, 800, 832,
+			912, 1040, 0, 576, 584, 590, 629, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC | 
+			DRM_MODE_FLAG_INTERLACE) },
+	/* 1280x480@60.00 15.690 Khz - 25MHz dotclock for i915+nouveau*/
+	{ DRM_MODE("1280x480i", DRM_MODE_TYPE_DRIVER, 25983, 1280, 1328,
+			1448, 1656, 0, 480, 483, 489, 523, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC | 
+			DRM_MODE_FLAG_INTERLACE) },
+	/* 512x384@58.59 24.960 Khz */
+	{ DRM_MODE("512x384", DRM_MODE_TYPE_DRIVER, 16972, 512, 560,
+			608, 680, 0, 384, 395, 399, 426, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC) },
+	/* 800x600@60.00 24.990 Khz */
+	{ DRM_MODE("800x600i", DRM_MODE_TYPE_DRIVER, 26989, 800, 880,
+			960, 1080, 0, 600, 697, 705, 833, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC | 
+			DRM_MODE_FLAG_INTERLACE) },
+	/* 1024x768@50.00 24.975 Khz */
+	{ DRM_MODE("1024x768i", DRM_MODE_TYPE_DRIVER, 34165, 1024, 1120,
+			1216, 1368, 0, 768, 864, 872, 999, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC | 
+			DRM_MODE_FLAG_INTERLACE) },
+	/* 1280x240@60.00 24.900 Khz */
+	{ DRM_MODE("1280x240", DRM_MODE_TYPE_DRIVER, 39790, 1280, 1312,
+			1471, 1598, 0, 240, 314, 319, 415, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC) },
+	/* 640x480@60.00 31 Khz */
+	{ DRM_MODE("1280x240", DRM_MODE_TYPE_DRIVER, 25200, 640, 656,
+	 752, 800, 0, 480, 489, 492, 525, 0,
+	 DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC) }
+};
+
+/**
+ * drm_display_mode - get a fixed modeline
+ * @dev: drm device
+ * @hdisplay: hdisplay size
+ * @vdisplay: vdisplay size
+ * @interlaced: whether to compute an interlaced mode
+ *
+ * This function returns a modeline among predefined low dotclock modes. These are fixed
+ * modelines, until automatic mode generation gets added into kernel.
+ * No need to specify 15 or 25kHz, not the vertical refresh rate as it's only 60Hz for now.
+ * This is a very basic function. Duplicate modes (320x240 and 1024x768) are not
+ * handled, the first result will be returned.
+ * 
+ * Returns:
+ * A low dotclock drm modeline
+ */
+struct drm_display_mode *drm_mode_low_dotclock_res(struct drm_device *dev,
+				int hsize, int vsize, bool interlace)
+{
+	int i;
+
+	DRM_DEBUG_KMS("Entering drm_mode_low_dotclock_res for resolution %dx%d (interlace: %s)", hsize, vsize, interlace ? "true" : "false");
+	for (i = 0; i < ARRAY_SIZE(drm_low_dotclock_modes); i++) {
+		const struct drm_display_mode *ptr = &drm_low_dotclock_modes[i];
+		if (hsize != ptr->hdisplay)
+			continue;
+		if (vsize != ptr->vdisplay)
+			continue;
+		//if ((refresh != 0) && (refresh != drm_mode_vrefresh(ptr)))
+		//	continue;
+		if (((! interlace) && (ptr->flags & DRM_MODE_FLAG_INTERLACE)) \
+		    || ((interlace) && ! (ptr->flags & DRM_MODE_FLAG_INTERLACE)))
+			continue;
+		DRM_INFO("Found a low dotclock mode for %dx%d (interlace: %d)", hsize, vsize, interlace);
+		drm_mode_debug_printmodeline(ptr);
+		return drm_mode_duplicate(dev, ptr);
+	}
+	return NULL;
+}
+EXPORT_SYMBOL(drm_mode_low_dotclock_res);
diff -Naur -x '*.rej' -x '*.orig' -x build -x awk_x86_64_defconfig linux-5.12_stock/drivers/gpu/drm/drm_modes_low_dotclock.h linux-5.12_15kHz/drivers/gpu/drm/drm_modes_low_dotclock.h
--- linux-5.12_stock/drivers/gpu/drm/drm_modes_low_dotclock.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-5.12_15kHz/drivers/gpu/drm/drm_modes_low_dotclock.h	2021-04-25 23:02:12.313860089 +0200
@@ -0,0 +1,23 @@
+/*
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+ * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+ * OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+struct drm_display_mode *drm_mode_low_dotclock_res(struct drm_device *dev,
+				int hsize, int vsize, bool interlace);
diff -Naur -x '*.rej' -x '*.orig' -x build -x awk_x86_64_defconfig linux-5.12_stock/drivers/gpu/drm/drm_probe_helper.c linux-5.12_15kHz/drivers/gpu/drm/drm_probe_helper.c
--- linux-5.12_stock/drivers/gpu/drm/drm_probe_helper.c	2021-04-25 22:49:08.000000000 +0200
+++ linux-5.12_15kHz/drivers/gpu/drm/drm_probe_helper.c	2021-04-25 23:04:47.330624386 +0200
@@ -418,6 +418,7 @@
 {
 	struct drm_device *dev = connector->dev;
 	struct drm_display_mode *mode;
+	struct drm_cmdline_mode *cmdline_mode;
 	const struct drm_connector_helper_funcs *connector_funcs =
 		connector->helper_private;
 	int count = 0, ret;
@@ -512,11 +513,13 @@
 	 * Fallback for when DDC probe failed in drm_get_edid() and thus skipped
 	 * override/firmware EDID.
 	 */
+	cmdline_mode = &connector->cmdline_mode;
 	if (count == 0 && connector->status == connector_status_connected)
 		count = drm_add_override_edid_modes(connector);
 
 	if (count == 0 && (connector->status == connector_status_connected ||
-			   connector->status == connector_status_unknown))
+			   connector->status == connector_status_unknown) &&
+			   ! cmdline_mode->low_dotclock)
 		count = drm_add_modes_noedid(connector, 1024, 768);
 	count += drm_helper_probe_add_cmdline_mode(connector);
 	if (count == 0)
@@ -532,21 +535,27 @@
 		mode_flags |= DRM_MODE_FLAG_3D_MASK;
 
 	list_for_each_entry(mode, &connector->modes, head) {
+		DRM_DEBUG_KMS("[CONNECTOR:%d:%s] starting with mode state : %d\n", connector->base.id, connector->name, mode->status);
 		if (mode->status != MODE_OK)
 			continue;
 
+		DRM_DEBUG_KMS("[CONNECTOR:%d:%s] before drm_mode_validate_driver mode is : %d\n", connector->base.id, connector->name, mode->status);
 		mode->status = drm_mode_validate_driver(dev, mode);
 		if (mode->status != MODE_OK)
 			continue;
 
+		DRM_DEBUG_KMS("[CONNECTOR:%d:%s] before drm_mode_validate_size mode is : %d\n", connector->base.id, connector->name, mode->status);
 		mode->status = drm_mode_validate_size(mode, maxX, maxY);
 		if (mode->status != MODE_OK)
 			continue;
 
+		DRM_DEBUG_KMS("[CONNECTOR:%d:%s] before drm_mode_validate_flag mode is : %d\n", connector->base.id, connector->name, mode->status);
 		mode->status = drm_mode_validate_flag(mode, mode_flags);
 		if (mode->status != MODE_OK)
 			continue;
 
+
+		DRM_DEBUG_KMS("[CONNECTOR:%d:%s] before drm_mode_validate_pipeline mode is : %d\n", connector->base.id, connector->name, mode->status);
 		ret = drm_mode_validate_pipeline(mode, connector, &ctx,
 						 &mode->status);
 		if (ret) {
@@ -562,9 +571,11 @@
 			}
 		}
 
+		DRM_DEBUG_KMS("[CONNECTOR:%d:%s] before drm_mode_validate_ycbcr420 mode is : %d\n", connector->base.id, connector->name, mode->status);
 		if (mode->status != MODE_OK)
 			continue;
 		mode->status = drm_mode_validate_ycbcr420(mode, connector);
+		DRM_DEBUG_KMS("[CONNECTOR:%d:%s] in the end mode is : %d\n", connector->base.id, connector->name, mode->status);
 	}
 
 prune:
diff -Naur -x '*.rej' -x '*.orig' -x build -x awk_x86_64_defconfig linux-5.12_stock/drivers/gpu/drm/Makefile linux-5.12_15kHz/drivers/gpu/drm/Makefile
--- linux-5.12_stock/drivers/gpu/drm/Makefile	2021-04-25 22:49:08.000000000 +0200
+++ linux-5.12_15kHz/drivers/gpu/drm/Makefile	2021-04-25 23:02:12.324859930 +0200
@@ -18,7 +18,7 @@
 		drm_dumb_buffers.o drm_mode_config.o drm_vblank.o \
 		drm_syncobj.o drm_lease.o drm_writeback.o drm_client.o \
 		drm_client_modeset.o drm_atomic_uapi.o drm_hdcp.o \
-		drm_managed.o drm_vblank_work.o
+		drm_managed.o drm_vblank_work.o drm_modes_low_dotclock.o
 
 drm-$(CONFIG_DRM_LEGACY) += drm_bufs.o drm_context.o drm_dma.o drm_legacy_misc.o drm_lock.o \
 		drm_memory.o drm_scatter.o drm_vm.o
diff -Naur -x '*.rej' -x '*.orig' -x build -x awk_x86_64_defconfig linux-5.12_stock/include/drm/drm_connector.h linux-5.12_15kHz/include/drm/drm_connector.h
--- linux-5.12_stock/include/drm/drm_connector.h	2021-04-25 22:49:08.000000000 +0200
+++ linux-5.12_15kHz/include/drm/drm_connector.h	2021-04-25 23:02:12.329859858 +0200
@@ -1206,6 +1206,13 @@
 	 * @tv_margins: TV margins to apply to the mode.
 	 */
 	struct drm_connector_tv_margins tv_margins;
+
+	/**
+	 * @low_dotclock:
+	 *
+	 * Flag is enabled if a valid low dotclock resolution is defined.
+	 */
+	bool low_dotclock;
 };
 
 /**
