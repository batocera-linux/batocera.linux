#!/bin/bash

BOOTCONF="/boot/batocera-boot.conf"

# only at start
test "$1" != "start" && exit 0
# only when resizing is wanted
grep -qE '^[ ]*autoresize[ ]*=[ ]*true[ ]*$' "${BOOTCONF}" || exit 0

# UI Output with dialog, default colorset
function dialogoutput()
{
    local percent="$1"
    local text="Do not switch off your device!"

    dialog --backtitle "batocera.linux" --title " Resizing Partition " \
           --mixedgauge "$text" 18 50 "$percent" "${arr[@]}" &>/dev/tty1
}

# Executing parameters and watch background pid
# Changes text messages parsed to dialog --mixedgauge
function textoutput()
{
    local cmd="$3"
    local percent="$2"
    local pid ret
    $cmd &>/dev/null &
    ret=$?
    pid=$!
    arr[$1]=7 #msg: In Progress
    dialogoutput "$percent"
    wait $pid
    arr[$1]=$ret #msg: Depends from return value
}

# Preparing text arrays
arr=(
     "Removing trigger....." "Pending"
     "Syncing disk data...." "Pending"
     "Checking disk table.." "Pending"
     "Resizing partition..." "Pending"
     "Checking /userdata..." "Pending"
     "Resizing /userdata..." "Pending"
     "Finishing up........." 8
    )

# --- BEGIN RESIZE ---
# /userdata partition
PART=$(batocera-part "share_internal")
# boot disk
DISK=$(batocera-part prefix "${PART}")

# fix any minor issues, such as gpt header not at end of disk
# remove the trigger
mount -o remount,rw /boot && sed -i -e s+'^[ ]*autoresize'+'#autoresize'+ "${BOOTCONF}" && mount -o remount,ro /boot

# textoutput "Message" "percentage" "command call" 
for i in 1 3 5 7 9 11 13; do
    case $i in
       1) textoutput $i 01 "sleep 0.1";;
       3) textoutput $i 10 "sync";;
       5) textoutput $i 30 "sgdisk -e ${DISK}";;
       7) textoutput $i 45 "parted -s -m ${DISK} resizepart 2 100%";;
       9) textoutput $i 85 "e2fsck -f -p ${PART}";;
      11) textoutput $i 95 "resize2fs ${PART}";;
      13) textoutput $i 99 "sleep 1";;
    esac
done

#Cleanup, restore screen, set progress of last item to 100%
dialogoutput 100
clear > /dev/tty1
exit 0
