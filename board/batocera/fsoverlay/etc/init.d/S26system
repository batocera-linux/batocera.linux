#!/bin/bash

systemsetting="python /usr/lib/python2.7/site-packages/configgen/settings/batoceraSettings.py"
config_script=batocera-config
log="/userdata/system/logs/batocera.log"

rb_volume_configure() {
    settingsVolume="`$systemsetting -command load -key audio.volume`"
    if [ "$settingsVolume" != "" ];then
        eval $config_script "volume" "$settingsVolume" >> $log
    fi
}

rb_audio_configure() {
    settingsAudio="`$systemsetting -command load -key audio.device`"
    if [[ "$settingsAudio" == "" ]];then
        settingsAudio="auto"
    fi
    eval $config_script "audio" "$settingsAudio" >> $log
}

rb_gpio_configure() {
    settings_gpio_mk="`$systemsetting -command load -key controllers.gpio.enabled`"
    if [ "$settings_gpio_mk" == "1" ];then
	settings_gpio_map="`$systemsetting -command load -key controllers.gpio.args`"
	[ "$settings_gpio_map" == "" ] && settings_gpio_map="map=1,2"
        eval $config_script "module" "load" mk_arcade_joystick_rpi "$settings_gpio_map" >> $log
    else
	# mk disabled let's check for db9
	settings_db9="`$systemsetting -command load -key controllers.db9.enabled`"
	if [ "$settings_db9" == "1" ];then
            settings_db9_map="`$systemsetting -command load -key controllers.db9.args`"
            eval $config_script "module" "load" db9_gpio_rpi "$settings_db9_map" >> $log
	else
	    # db9 and mk disabled let's check for gamecon
            settings_gamecon="`$systemsetting -command load -key controllers.gamecon.enabled`"
            if [ "$settings_gamecon" == "1" ];then
                settings_gamecon_map="`$systemsetting -command load -key controllers.gamecon.args`"
                eval $config_script "module" "load" gamecon_gpio_rpi "$settings_gamecon_map" >> $log
	    fi
	fi
    fi
}

rb_keyboad_lang() {
    settings_lang="`$systemsetting -command load -key system.language`"
    settings_kb="`$systemsetting -command load -key system.kblayout`"
    if [[ "$settings_kb" != "" ]];then
	loadkeys "$settings_kb" >> $log
    else
        keyboardmap=`echo "$settings_lang" | cut -c1-2`
	if [[ "$keyboardmap" != "" ]]; then
            loadkeys "$keyboardmap" >> $log
	fi
    fi
}

rb_xbox() {
    settings_xbox="`$systemsetting -command load -key controllers.xboxdrv.enabled`"
    settings_xbox_nb="`$systemsetting -command load -key controllers.xboxdrv.nbcontrols`"
    if [[ "$settings_xbox" == "1" ]];then
        rmmod xpad
        if [[ "$settings_xbox_nb" == "1" ]];then
            /usr/bin/xboxdrv --detach --daemon --id 0 --led 2 --deadzone 4000 --silent --trigger-as-button --dbus disabled --detach-kernel-driver >> $log &
        elif [[ "$settings_xbox_nb" == "2" ]];then
            /usr/bin/xboxdrv --detach --daemon --id 0 --led 2 --deadzone 4000 --silent --trigger-as-button --next-controller --id 1 --led 3 --deadzone 4000 --silent --trigger-as-button --dbus disabled --detach-kernel-driver >> $log &
        elif [[ "$settings_xbox_nb" == "3" ]];then
            /usr/bin/xboxdrv --detach --daemon --id 0 --led 2 --deadzone 4000 --silent --trigger-as-button --next-controller --id 1 --led 3 --deadzone 4000 --silent --trigger-as-button --next-controller --id 2 --led 4 --deadzone 4000 --silent --trigger-as-button --dbus disabled --detach-kernel-driver >> $log &
        elif [[ "$settings_xbox_nb" == "4" ]];then
            /usr/bin/xboxdrv --detach --daemon --id 0 --led 2 --deadzone 4000 --silent --trigger-as-button --next-controller --id 1 --led 3 --deadzone 4000 --silent --trigger-as-button --next-controller --id 2 --led 4 --deadzone 4000 --silent --trigger-as-button --next-controller --id 3 --led 5 --deadzone 4000 --silent --trigger-as-button --dbus disabled --detach-kernel-driver >> $log &
        fi
    fi
}

rb_timezone() {
    settings_timezone="`$systemsetting -command load -key system.timezone`"
    if [[ "$settings_timezone" != "" ]];then
        eval $config_script "tz" "$settings_timezone" >> $log
    fi
}

rb_hostname() {
    settings_hostname="`$systemsetting -command load -key system.hostname`"
    if [[ "$settings_hostname" != "" ]];then
        hostname "${settings_hostname}"
	echo "127.0.0.1	localhost"             > /etc/hosts
	echo "127.0.1.1	${settings_hostname}" >> /etc/hosts
    fi
}

rb_xarcade2jstick() {
    settings_xarcade="`$systemsetting -command load -key controllers.xarcade.enabled`"
    if [[ "$settings_xarcade" == "1" ]];then
        # First try : suppose a real X-Arcade is plugged
        /usr/bin/xarcade2jstick -d
        if [ $? -ne "0" ]
        then
            # the user must have a keyboard encoder then
            for dev in /usr/share/batocera/datainit/system/configs/xarcade2jstick/*
            do
                dev=$(basename "$dev")
                [ -h "/dev/input/by-id/$dev" ] && /usr/bin/xarcade2jstick -d -e "/dev/input/by-id/$dev" && break
            done
        fi
    fi
}

# from https://batocera-linux.xorhub.com/forum/d/794-how-to-hdmi-sound-on-x86-builds
rb_alsa_load() {
    alsactl restore -f /userdata/system/asound.state
}

rb_alsa_save() {
    alsactl store -f /userdata/system/asound.state
}

ba_es_core_dump() {
	sysctl -w kernel.core_pattern=/userdata/core.%e
}

case "$1" in
  start)
	# Dos carriage return characters
	sed -i 's/\r//g' /userdata/system/batocera.conf

	# configure
	rb_gpio_configure&    # 0.9 start by the gpio while it's the longer
	rb_keyboad_lang&      # 0.7
	rb_xbox&              # 0.6
	( rb_volume_configure ; rb_audio_configure ; rb_alsa_load) &  # 1.0
	rb_timezone&          # 0.4
	rb_hostname&          # 0.4
	rb_xarcade2jstick&    # 0.1
	ba_es_core_dump&
	wait
	;;
  stop)
        rb_alsa_save
	;;
  restart|reload)
	;;
  *)
esac

exit $?
