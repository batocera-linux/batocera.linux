#!/bin/sh

if test "$1" = "stop"
then
    # umount all network configs
    # don't just remount the one of the config in case the config changed
    umount -a -t nfs
    umount -a -t cifs
    exit 0
fi

if test "$1" != "start"
then
  exit 0
fi

###
# SHARECONFFILE
# can contain :
# INTERNAL     => /dev/mmcblk0p2
# RAM          => tmpfs
# ANYEXTERNAL  => any device found not starting by /dev/mmcblk0p (use it when you've several usb keys, but plug only one at a time)
# DEV [FSUUID] => a device having the FSUID uuid
###

SHARECONFFILE="/boot/batocera-boot.conf"
INTERNALDEVICE=$(batocera-part "share_internal")
INTERNALDEVICETYPE=$(blkid "${INTERNALDEVICE}" | sed -e s+'^.* TYPE="\([^"]*\)\".*'+'\1'+)

SHAREDEVICE=$(cat "${SHARECONFFILE}" | grep -E '^[ ]*sharedevice=' | head -n1 | cut -d'=' -f2)
[[ "$?" -ne "0" || "$SHAREDEVICE" == "" ]] && SHAREDEVICE=INTERNAL

getMaxTryConfig() {
    SHARECONFFILE=${1}

    X=$(grep -E '^[ \t]*sharewait[ \t]*=' "${SHARECONFFILE}" | sed -e s+'^[ \t]*sharewait[ \t]*='+''+)
    if echo "${X}" | grep -qE '^[0-9][0-9]*$'
    then
	echo "${X}"
	return
    fi
    echo 7 # default value
}

MAXTRY=$(getMaxTryConfig "${SHARECONFFILE}")
NTRY=0

mountDeviceOrFallback() {
    DEVICE=$1
    TDEVICE=$2
    BATOCERAFULLFS="/var/batocerafs"
    FALLBACK=1

    if test -n "${DEVICE}"
    then
	if mkdir -p "${BATOCERAFULLFS}"
	then
	    if batocera-mount "${TDEVICE}" 1 "${DEVICE}" "${BATOCERAFULLFS}"
	    then
		if test -d "${BATOCERAFULLFS}/recalbox" -a ! -d "${BATOCERAFULLFS}/batocera" # legacy renaming (rename only if batocera doesn't exist and recalbox does)
		then
		    mv "${BATOCERAFULLFS}/recalbox" "${BATOCERAFULLFS}/batocera"
		fi
		if mkdir -p "${BATOCERAFULLFS}/batocera"
		then
		    if mount "${BATOCERAFULLFS}/batocera" "/userdata" -o "noatime"
		    then
			FALLBACK=0
		    fi
		fi
	    fi
	fi
    fi

    if test "${FALLBACK}" = 1
    then
	if ! batocera-mount "${INTERNALDEVICETYPE}" 1 "${INTERNALDEVICE}" /userdata
	then
	    mount -t tmpfs -o size=256M tmpfs /userdata
	fi
    fi
}

systemsetting="batocera-settings"
rb_wifi_configure() {
    X=$1

    if test "$X" = 1
    then
	settings_ssid="`$systemsetting -command load -key wifi.ssid`"
	settings_key="`$systemsetting -command load -key wifi.key`"
	settings_file="/var/lib/connman/batocera_wifi.config"
	settings_name="default"
    else
	settings_ssid="`$systemsetting -command load -key wifi${X}.ssid`"
	settings_key="`$systemsetting -command load -key wifi${X}.key`"
	settings_file="/var/lib/connman/batocera_wifi${X}.config"
	settings_name="${X}"
    fi

    if [[ "$settings_ssid" != "" ]] ;then
	mkdir -p "/var/lib/connman"
	cat > "${settings_file}" <<EOF
[global]
Name=batocera

[service_batocera_${settings_name}]
Type=wifi
Name=${settings_ssid}
EOF
	if test "${settings_key}" != ""
	then
	    settings_key_dec=$(batocera-encode decode "${settings_key}")
	    echo "Passphrase=${settings_key_dec}" >> "${settings_file}"

	    # saved the value encoded
	    if test "${settings_key}" = "${settings_key_dec}"
	    then
		# sed the replace by the secure value in batocera.conf
		#settings_key=$(batocera-encode encode "${settings_key}")
		sed -i -e s@'^[ \t]*wifi.key[ \t]*=.*$'@"wifi.key=${settings_key}"@ "/userdata/system/batocera.conf"
	    fi
	fi
    fi
}

# wifi configuration is related to the share mounting
# because some share mounts may depend on the wifi
# because wifi password are on the share
rb_wifi_configure_all() {
    rfkill unblock wifi

    rb_wifi_configure 1&  # 0.6
    rb_wifi_configure 2&  # 0.6
    rb_wifi_configure 3&  # 0.6
    wait

    # wait a bit, otherwise, connman is not really started
    sleep 2
    batocera-wifi start
}

fixbatoceraconfname() {
    test -e /userdata/system/recalbox.conf && mv /userdata/system/recalbox.conf /userdata/system/batocera.conf
}

mountNetwork() {
    # /boot/batocera-boot.conf examples :
    # sharedevice=NETWORK
    #
    # Basic commands : sharenetwork_<nfs|smb><[0-9]>=<SHARE|ROMS|SAVES|BIOS>@<host>:<remote directory>:<mount options>
    #
    # sharenetwork_nfs1=SHARE@192.168.0.1:/Documents/batocera
    # or
    # sharenetwork_nfs1=ROMS@192.168.0.1:/Documents/batocera/roms
    # sharenetwork_nfs2=SAVES@192.168.0.1:/Documents/batocera/saves
    # or
    # sharenetwork_smb1=SHARE@192.168.0.1:Documents/batocera:guest
    #
    # Advanced commands : sharenetwork_cmd<[0-9]>=<command to run>
    # sharenetwork_cmd1=mount -o port=2049,nolock,proto=tcp 192.168.0.1:/Documents/batocera /userdata
    # or
    # sharenetwork_cmd1=mount -o port=2049,nolock,proto=tcp 192.168.0.1:/Documents/batocera/roms /userdata/roms
    # sharenetwork_cmd2=mount -o port=2049,nolock,proto=tcp 192.168.0.1:/Documents/batocera/saves /userdata/saves
    # or
    # sharenetwork_cmd1=mount.cifs //192.168.0.1/batocera /userdata -o guest


    # execute all commands in /boot/batocera-boot.conf which are like : sharenetwork_cmd1=my command
    if ! grep -E '^[ ]*sharenetwork_[a-z]*[0-9][ ]*=' "${SHARECONFFILE}" |
	    sed -e s+'^[ ]*sharenetwork_\([a-z]*\)[0-9][ ]*='+'\1 '+ |
	    while read CTYPE CMD
	    do
		XTRY=5  # X tries and give up
		XWAIT=4 # N seconds between each try

		while test "${XTRY}" -gt 0
		do
		    let XTRY--

		    CMD_EXEC=echo
		    if test "${CTYPE}" = "cmd"
		    then
			CMD_EXEC="${CMD}"
		    else
			CMD_TARGET=$(echo "${CMD}" | sed -e s+'^\([^@]*\)@.*$'+'\1'+)
			CMD_HOST=$(echo "${CMD}" | sed -e s+'^[^@]*@\([^:]*\):.*$'+'\1'+)
			CMD_RDIR=$(echo "${CMD}" | sed -e s+'^[^@]*@[^:]*:\([^:]*\).*$'+'\1'+)
			CMD_OPT=$(echo "${CMD}" | sed -e s+'^[^@]*@[^:]*:[^:]*'+''+ -e s+'^:'++)

			# MAP to the batocera directory
			CMD_TDIR="/userdata"
			case "${CMD_TARGET}" in
			    "SHARE")
				CMD_TDIR="/userdata"
			    ;;
			    "ROMS")
				CMD_TDIR="/userdata/roms"
			    ;;
			    "SAVES")
				CMD_TDIR="/userdata/saves"
			    ;;
			    "BIOS")
				CMD_TDIR="/userdata/bios"
			    ;;
			esac

			case "${CTYPE}" in
			    "nfs")
				CMD_ADDOPT=
				test -n "${CMD_OPT}" && CMD_ADDOPT=",${CMD_OPT}"
				CMD_EXEC="mount -o port=2049,nolock,proto=tcp${CMD_ADDOPT} ${CMD_HOST}:${CMD_RDIR} ${CMD_TDIR}"
				;;
			    "smb")
				CMD_ADDOPT=
				test -n "${CMD_OPT}" && CMD_ADDOPT="-o ${CMD_OPT}"
				CMD_EXEC="mount.cifs //${CMD_HOST}/${CMD_RDIR} ${CMD_TDIR} ${CMD_ADDOPT}"
				;;
			esac
		    fi

		    echo "${CMD_EXEC}"
		    if ${CMD_EXEC}
		    then
			echo "success"
			XTRY=0
		    else
			echo "fail (${XTRY} : ${CMD_EXEC})"
			# give up
			if test ${XTRY} = 0
			then
			    echo "giving up"
			    return 1
			fi
			sleep ${XWAIT} # wait n seconds between each try
		    fi
		done
	    done
    then
	return 1
    fi
    return 0
}

RMODE="$SHAREDEVICE"

if echo "${RMODE}" | grep -qE '^DEV '
then
    MODE="DEV"
    UUID=$(echo "${RMODE}" | sed -e s+'^DEV '++)
else
    MODE=${RMODE}
fi

case "${MODE}" in
    "DEV")
	LDEVICE=$(blkid | grep " UUID=\"${UUID}\"")
	while test -z "${LDEVICE}" -a "${NTRY}" -lt "${MAXTRY}" # wait the device that can take some seconds after udev started
	do
	    let NTRY++
	    sleep 1
	    LDEVICE=$(blkid | grep " UUID=\"${UUID}\"")
	done
	DEVICE=$(echo "${LDEVICE}" | sed -e s+'^\([^:]*\):.*$'+'\1'+)
	TDEVICE=$(echo "${LDEVICE}" | sed -e s+'^.* TYPE="\([^"]*\)"$'+'\1'+)
	mountDeviceOrFallback "${DEVICE}" "${TDEVICE}"
	fixbatoceraconfname
	rb_wifi_configure_all& # configure the wifi at the end
	;;
    "ANYEXTERNAL")
        PARTPREFIX=$(batocera-part prefix "${INTERNALDEVICE}")
	LDEVICE=$(blkid | grep -vE "^${PARTPREFIX}" | head -1)
	while test -z "${LDEVICE}" -a "${NTRY}" -lt "${MAXTRY}" # wait the device that can take some seconds after udev started
	do
	    let NTRY++
	    sleep 1
	    LDEVICE=$(blkid | grep -vE "^${PARTPREFIX}" | head -1)
	done
	DEVICE=$(echo "${LDEVICE}" | sed -e s+'^\([^:]*\):.*$'+'\1'+)
	TDEVICE=$(echo "${LDEVICE}" | sed -e s+'^.* TYPE="\([^"]*\)"$'+'\1'+)
	mountDeviceOrFallback "${DEVICE}" "${TDEVICE}"
	fixbatoceraconfname
	rb_wifi_configure_all& # configure the wifi at the end
	;;
    "RAM")
	mount -t tmpfs -o size=256M tmpfs /userdata
	;;
    "NETWORK")
	# first, INTERNAL mount, then, network mount over the NETWORK mounts
	# to allow to mount over /userdata, but only over /userdata/roms if wanted
	# mounting network mounts over usb key have not really sense
	if batocera-mount "${INTERNALDEVICETYPE}" 1 "${INTERNALDEVICE}" /userdata
	then
	    # we try to configure the wifi here
	    # for people using the internal device for the wifi and some others mounts for data
	    fixbatoceraconfname
	    rb_wifi_configure_all
	else
	    # fallback
	    mount -t tmpfs -o size=256M tmpfs /userdata
	fi

	# Network mounts
	# no fallback required, mounted on the share
	mountNetwork > /tmp/mountNetwork.log 2> /tmp/mountNetwork.err # could be usefull to debug
	;;
    "INTERNAL"|*)
	if ! batocera-mount "${INTERNALDEVICETYPE}" 1 "${INTERNALDEVICE}" /userdata
	then
	    # fallback
	    # the internal partition is no more required in fact
	    mount -t tmpfs -o size=256M tmpfs /userdata
	fi
	fixbatoceraconfname
	rb_wifi_configure_all& # configure the wifi at the end
	;;
esac

# fs compression
compressenabled="`batocera-settings -command load -key system.fscompression.enabled`"
if test "$compressenabled" == "1"
then
    if grep -qE "^/dev/[^ ]* /userdata btrfs.*$" /proc/mounts
    then
	mount -o remount,compress /userdata || exit 1
    fi
fi


# share upgrade, just unzip share.zip from upgrade, no need to reboot
if test -e "/userdata/system/upgrade/share.zip"
then
    (cd /userdata && unzip -o /userdata/system/upgrade/share.zip) > /userdata/system/upgrade/upgrade.share.out.log 2> /userdata/system/upgrade/upgrade.share.err.log
    # always remove to not apply indefinitly
    rm -f /userdata/system/upgrade/share.zip
fi

# now, let mount delayed usbmount devices
ls /var/run/usbmount.delay |
    while read RULE
    do
	RTYPE=$(echo "${RULE}" | sed -e s+'^[0-9]*\.'++)
	# source the udev context and apply the usbmount
	(. "/var/run/usbmount.delay/${RULE}"
	 /usr/share/usbmount/usbmount "${RTYPE}"
	 rm "/var/run/usbmount.delay/${RULE}")
    done
touch /var/run/batocera.share.mounted # reenable standard usbmount
