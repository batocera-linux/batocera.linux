#!/bin/sh
#
# Prepare wifi even if /userdata isn't mounted
# This service relies on S65values4boot 

# Only init wifi on start condition
[ "$1" = "start" ] || exit 0

BATOCONF="/userdata/system/batocera.conf"
BOOTCONF="/boot/batocera-boot.conf"

# if /userdata is not yet available
if ! [ -f "$BATOCONF" ]; then
  # use the boot version of the file
  BATOCONF="$BOOTCONF"
fi

# WLAN enabled?
settingsWlan="$(/usr/bin/batocera-settings-get -f "$BATOCONF" wifi.enabled)"
if [ "$settingsWlan" != "1" ];then
    connmanctl disable wifi 2>/dev/null
    exit 0
fi

printf "Starting wifi: "

batocera_wifi_configure() {
    X=$1

    settings_hide=false; settings_name="${X}"
    [ "$X" = "1" ] && { X=; settings_name=default; }
    [ "$X" = ".hidden" ] && { settings_name=hidden_AP; settings_hide=true; }
    
    settings_ssid="$(/usr/bin/batocera-settings-get -f "$BATOCONF" wifi${X}.ssid)"
    settings_key="$(/usr/bin/batocera-settings-get -f "$BATOCONF" wifi${X}.key)"
    settings_file="/var/lib/connman/batocera_wifi${X}.config"

    if [ -n "$settings_ssid" ];then
        mkdir -p "/var/lib/connman"
        cat > "${settings_file}" <<-_EOF_
		[global]
		Name=batocera
		[service_batocera_${settings_name}]
		Type=wifi
		Name=${settings_ssid}
		Hidden=${settings_hide}
		Passphrase=${settings_key}
	_EOF_

    connmanctl enable wifi 2>/dev/null || return 1
    connmanctl scan wifi   2>/dev/null || return 1
    return 0

    fi
}

for i in 1 2 3 .hidden
do
    batocera_wifi_configure $i &
    ret=$?
done

echo "done."

exit $ret
