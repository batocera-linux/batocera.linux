// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord;
};
out_vertex _ret_0;
vec4 _r0008;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    _r0008 = VertexCoord.x*MVPMatrix[0];
    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];
    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];
    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];
    _ret_0._position1 = _r0008;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord = TexCoord.xy;
    gl_Position = _r0008;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color2;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _color2;
    vec2 _texCoord;
};
vec4 _ret_0;
float _TMP18;
vec3 _TMP36;
vec3 _TMP35;
vec3 _TMP34;
vec3 _TMP33;
vec3 _TMP32;
float _TMP37;
float _TMP17;
float _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _c0053;
vec2 _c0055;
vec2 _c0057;
vec2 _c0061;
vec2 _c0063;
vec2 _c0065;
vec2 _c0067;
vec2 _c0069;
vec2 _c0071;
vec2 _c0073;
vec2 _c0075;
float _TMP76;
float _TMP80;
float _TMP84;
float _TMP88;
float _TMP92;
float _TMP96;
float _TMP100;
float _TMP104;
float _TMP108;
float _TMP116;
float _TMP124;
float _TMP132;
float _TMP142;
float _a0145;
float _TMP146;
float _a0149;
float _TMP150;
float _a0153;
float _TMP154;
float _a0157;
float _TMP174;
float _a0177;
float _TMP178;
float _a0181;
float _TMP182;
float _a0185;
float _TMP196;
float _a0199;
float _TMP200;
float _a0203;
float _TMP204;
float _a0207;
float _TMP208;
float _a0211;
float _TMP228;
float _a0231;
float _TMP232;
float _a0235;
float _TMP236;
float _a0239;
float _x0251;
float _TMP252;
vec3 _r0259;
vec3 _r0261;
vec3 _TMP264;
vec3 _TMP272;
vec3 _TMP280;
float _a0287;
float _t0289;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _g1;
    vec2 _g2;
    float _d_edge;
    float _edge_strength;
    vec3 _color1;
    _g1 = vec2(1.00000000E+00/TextureSize.x, 0.00000000E+00);
    _g2 = vec2(0.00000000E+00, 1.00000000E+00/TextureSize.y);
    _c0053 = TEX0.xy - _g2;
    _TMP4 = COMPAT_TEXTURE(Texture, _c0053);
    _c0055 = (TEX0.xy + _g1) - _g2;
    _TMP5 = COMPAT_TEXTURE(Texture, _c0055);
    _c0057 = TEX0.xy - _g1;
    _TMP6 = COMPAT_TEXTURE(Texture, _c0057);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _c0061 = TEX0.xy + _g1;
    _TMP8 = COMPAT_TEXTURE(Texture, _c0061);
    _c0063 = (TEX0.xy - _g1) + _g2;
    _TMP9 = COMPAT_TEXTURE(Texture, _c0063);
    _c0065 = TEX0.xy + _g2;
    _TMP10 = COMPAT_TEXTURE(Texture, _c0065);
    _c0067 = TEX0.xy + _g1 + _g2;
    _TMP11 = COMPAT_TEXTURE(Texture, _c0067);
    _c0069 = TEX0.xy + 2.00000000E+00*_g1;
    _TMP12 = COMPAT_TEXTURE(Texture, _c0069);
    _c0071 = TEX0.xy + _g2 + 2.00000000E+00*_g1;
    _TMP13 = COMPAT_TEXTURE(Texture, _c0071);
    _c0073 = TEX0.xy + 2.00000000E+00*_g2;
    _TMP14 = COMPAT_TEXTURE(Texture, _c0073);
    _c0075 = TEX0.xy + 2.00000000E+00*_g2 + _g1;
    _TMP15 = COMPAT_TEXTURE(Texture, _c0075);
    _TMP76 = dot(_TMP4.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP80 = dot(_TMP5.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP84 = dot(_TMP6.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP88 = dot(_TMP7.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP92 = dot(_TMP8.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP96 = dot(_TMP9.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP100 = dot(_TMP10.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP104 = dot(_TMP11.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP108 = dot(_TMP13.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP116 = dot(_TMP15.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP124 = dot(_TMP14.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP132 = dot(_TMP12.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _a0145 = _TMP88 - _TMP80;
    _TMP142 = abs(_a0145);
    _a0149 = _TMP88 - _TMP96;
    _TMP146 = abs(_a0149);
    _a0153 = _TMP104 - _TMP124;
    _TMP150 = abs(_a0153);
    _a0157 = _TMP104 - _TMP132;
    _TMP154 = abs(_a0157);
    _a0177 = _TMP100 - _TMP92;
    _TMP174 = abs(_a0177);
    _a0181 = _TMP96 - _TMP80;
    _TMP178 = abs(_a0181);
    _a0185 = _TMP124 - _TMP132;
    _TMP182 = abs(_a0185);
    _TMP16 = _TMP142 + _TMP146 + _TMP150 + _TMP154 + 2.00000000E+00*_TMP174 + -(_TMP178 + _TMP182);
    _a0199 = _TMP92 - _TMP108;
    _TMP196 = abs(_a0199);
    _a0203 = _TMP92 - _TMP76;
    _TMP200 = abs(_a0203);
    _a0207 = _TMP100 - _TMP84;
    _TMP204 = abs(_a0207);
    _a0211 = _TMP100 - _TMP116;
    _TMP208 = abs(_a0211);
    _a0231 = _TMP88 - _TMP104;
    _TMP228 = abs(_a0231);
    _a0235 = _TMP76 - _TMP108;
    _TMP232 = abs(_a0235);
    _a0239 = _TMP84 - _TMP116;
    _TMP236 = abs(_a0239);
    _TMP17 = _TMP196 + _TMP200 + _TMP204 + _TMP208 + 2.00000000E+00*_TMP228 + -(_TMP232 + _TMP236);
    _d_edge = _TMP16 - _TMP17;
    _x0251 = (_d_edge - -9.99999997E-07)/1.99999999E-06;
    _TMP37 = min(1.00000000E+00, _x0251);
    _TMP252 = max(0.00000000E+00, _TMP37);
    _edge_strength = _TMP252*_TMP252*(3.00000000E+00 - 2.00000000E+00*_TMP252);
    _r0259 = 5.00000000E-01*_TMP10.xyz;
    _r0259 = _r0259 + 5.00000000E-01*_TMP8.xyz;
    _r0261 = 5.00000000E-01*_TMP7.xyz;
    _r0261 = _r0261 + 5.00000000E-01*_TMP11.xyz;
    _color1 = _r0259 + _edge_strength*(_r0261 - _r0259);
    _TMP32 = min(_TMP10.xyz, _TMP11.xyz);
    _TMP33 = min(_TMP8.xyz, _TMP32);
    _TMP264 = min(_TMP7.xyz, _TMP33);
    _TMP34 = max(_TMP10.xyz, _TMP11.xyz);
    _TMP35 = max(_TMP8.xyz, _TMP34);
    _TMP272 = max(_TMP7.xyz, _TMP35);
    _TMP36 = min(_TMP272, _color1);
    _TMP280 = max(_TMP264, _TMP36);
    _a0287 = _edge_strength - 5.00000000E-01;
    _TMP18 = abs(_a0287);
    _t0289 = 1.00000000E+00 - 2.00000000E+00*_TMP18;
    _color1 = _color1 + _t0289*(_TMP280 - _color1);
    _ret_0 = vec4(_color1.x, _color1.y, _color1.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
