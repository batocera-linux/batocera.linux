// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord1;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0008;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _ps;
    out_vertex _TMP4;
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _r0008 = VertexCoord.x*MVPMatrix[0];
    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];
    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];
    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];
    _TMP4._t1 = TexCoord.xyxy + vec4(-_ps.x, -_ps.y, 2.00000000E+00*_ps.x, 2.00000000E+00*_ps.y);
    _TMP4._t2 = TexCoord.xyxy + vec4(0.00000000E+00, -_ps.y, _ps.x, 2.00000000E+00*_ps.y);
    _TMP4._t3 = TexCoord.xyxy + vec4(-_ps.x, 0.00000000E+00, 2.00000000E+00*_ps.x, _ps.y);
    _TMP4._t4 = TexCoord.xyxy + vec4(0.00000000E+00, 0.00000000E+00, _ps.x, _ps.y);
    _ret_0._position1 = _r0008;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord1 = TexCoord.xy;
    _ret_0._t1 = _TMP4._t1;
    _ret_0._t2 = _TMP4._t2;
    _ret_0._t3 = _TMP4._t3;
    _ret_0._t4 = _TMP4._t4;
    gl_Position = _r0008;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
    TEX1 = _TMP4._t1;
    TEX2 = _TMP4._t2;
    TEX3 = _TMP4._t3;
    TEX4 = _TMP4._t4;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord1;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color2;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _color2;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
};
vec4 _ret_0;
vec3 _TMP52;
vec3 _TMP51;
vec3 _TMP50;
vec3 _TMP49;
vec3 _TMP48;
vec3 _TMP24;
vec3 _TMP22;
float _TMP23;
float _TMP21;
float _TMP20;
float _TMP53;
float _TMP19;
float _TMP18;
float _TMP17;
float _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
float _TMP94;
float _TMP98;
float _TMP102;
float _TMP106;
float _TMP110;
float _TMP114;
float _TMP118;
float _TMP122;
float _TMP126;
float _TMP130;
float _TMP134;
float _TMP138;
float _TMP142;
float _TMP146;
float _TMP150;
float _TMP154;
float _TMP160;
float _a0163;
float _TMP164;
float _a0167;
float _TMP168;
float _a0171;
float _TMP172;
float _a0175;
float _TMP176;
float _a0179;
float _TMP180;
float _a0183;
float _TMP184;
float _a0187;
float _TMP188;
float _a0191;
float _TMP192;
float _a0195;
float _TMP196;
float _a0199;
float _TMP200;
float _a0203;
float _TMP204;
float _a0207;
float _TMP208;
float _a0211;
float _TMP214;
float _a0217;
float _TMP218;
float _a0221;
float _TMP222;
float _a0225;
float _TMP226;
float _a0229;
float _TMP230;
float _a0233;
float _TMP234;
float _a0237;
float _TMP238;
float _a0241;
float _TMP242;
float _a0245;
float _TMP246;
float _a0249;
float _TMP250;
float _a0253;
float _TMP254;
float _a0257;
float _TMP258;
float _a0261;
float _TMP262;
float _a0265;
float _TMP268;
float _a0271;
float _TMP272;
float _a0275;
float _TMP276;
float _a0279;
float _TMP280;
float _a0283;
float _TMP284;
float _a0287;
float _TMP288;
float _a0291;
float _TMP292;
float _a0295;
float _TMP296;
float _a0299;
float _TMP300;
float _a0303;
float _TMP304;
float _a0307;
float _TMP310;
float _a0313;
float _TMP314;
float _a0317;
float _TMP318;
float _a0321;
float _TMP322;
float _a0325;
float _TMP326;
float _a0329;
float _TMP330;
float _a0333;
float _TMP334;
float _a0337;
float _TMP338;
float _a0341;
float _TMP342;
float _a0345;
float _TMP346;
float _a0349;
float _x0355;
float _TMP356;
vec3 _r0363;
vec3 _r0365;
vec3 _r0367;
vec3 _r0369;
float _t0379;
vec3 _TMP380;
vec3 _TMP388;
vec3 _TMP396;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    float _d_edge;
    float _hv_edge;
    float _edge_strength;
    vec3 _color1;
    vec3 _TMP58[4];
    vec3 _TMP59[4];
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xy);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.zy);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX1.xw);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX2.xy);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.zy);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX2.xw);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.xy);
    _TMP9 = COMPAT_TEXTURE(Texture, TEX3.zy);
    _TMP10 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _TMP11 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _TMP12 = COMPAT_TEXTURE(Texture, TEX4.xy);
    _TMP13 = COMPAT_TEXTURE(Texture, TEX4.zy);
    _TMP14 = COMPAT_TEXTURE(Texture, TEX4.xw);
    _TMP15 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _TMP94 = dot(_TMP4.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP98 = dot(_TMP5.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP102 = dot(_TMP8.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP106 = dot(_TMP12.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP110 = dot(_TMP13.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP114 = dot(_TMP10.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP118 = dot(_TMP14.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP122 = dot(_TMP15.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP126 = dot(_TMP11.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP130 = dot(_TMP0.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP134 = dot(_TMP7.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP138 = dot(_TMP1.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP142 = dot(_TMP6.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP146 = dot(_TMP2.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP150 = dot(_TMP9.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _TMP154 = dot(_TMP3.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _a0163 = _TMP106 - _TMP98;
    _TMP160 = abs(_a0163);
    _a0167 = _TMP106 - _TMP114;
    _TMP164 = abs(_a0167);
    _a0171 = _TMP122 - _TMP142;
    _TMP168 = abs(_a0171);
    _a0175 = _TMP122 - _TMP150;
    _TMP172 = abs(_a0175);
    _a0179 = _TMP110 - _TMP138;
    _TMP176 = abs(_a0179);
    _a0183 = _TMP146 - _TMP118;
    _TMP180 = abs(_a0183);
    _a0187 = _TMP118 - _TMP138;
    _TMP184 = abs(_a0187);
    _a0191 = _TMP146 - _TMP110;
    _TMP188 = abs(_a0191);
    _a0195 = _TMP118 - _TMP110;
    _TMP192 = abs(_a0195);
    _a0199 = _TMP114 - _TMP98;
    _TMP196 = abs(_a0199);
    _a0203 = _TMP142 - _TMP150;
    _TMP200 = abs(_a0203);
    _a0207 = _TMP102 - _TMP94;
    _TMP204 = abs(_a0207);
    _a0211 = _TMP134 - _TMP126;
    _TMP208 = abs(_a0211);
    _TMP16 = 2.00000000E+00*(_TMP160 + _TMP164 + _TMP168 + _TMP172) + _TMP176 + _TMP180 + -(_TMP184 + _TMP188) + 4.00000000E+00*_TMP192 + -(_TMP196 + _TMP200) + _TMP204 + _TMP208;
    _a0217 = _TMP110 - _TMP126;
    _TMP214 = abs(_a0217);
    _a0221 = _TMP110 - _TMP94;
    _TMP218 = abs(_a0221);
    _a0225 = _TMP118 - _TMP102;
    _TMP222 = abs(_a0225);
    _a0229 = _TMP118 - _TMP134;
    _TMP226 = abs(_a0229);
    _a0233 = _TMP122 - _TMP154;
    _TMP230 = abs(_a0233);
    _a0237 = _TMP130 - _TMP106;
    _TMP234 = abs(_a0237);
    _a0241 = _TMP106 - _TMP154;
    _TMP238 = abs(_a0241);
    _a0245 = _TMP130 - _TMP122;
    _TMP242 = abs(_a0245);
    _a0249 = _TMP106 - _TMP122;
    _TMP246 = abs(_a0249);
    _a0253 = _TMP94 - _TMP126;
    _TMP250 = abs(_a0253);
    _a0257 = _TMP102 - _TMP134;
    _TMP254 = abs(_a0257);
    _a0261 = _TMP98 - _TMP150;
    _TMP258 = abs(_a0261);
    _a0265 = _TMP114 - _TMP142;
    _TMP262 = abs(_a0265);
    _TMP17 = 2.00000000E+00*(_TMP214 + _TMP218 + _TMP222 + _TMP226) + _TMP230 + _TMP234 + -(_TMP238 + _TMP242) + 4.00000000E+00*_TMP246 + -(_TMP250 + _TMP254) + _TMP258 + _TMP262;
    _d_edge = _TMP16 - _TMP17;
    _a0271 = _TMP110 - _TMP122;
    _TMP268 = abs(_a0271);
    _a0275 = _TMP106 - _TMP118;
    _TMP272 = abs(_a0275);
    _a0279 = _TMP110 - _TMP98;
    _TMP276 = abs(_a0279);
    _a0283 = _TMP122 - _TMP134;
    _TMP280 = abs(_a0283);
    _a0287 = _TMP106 - _TMP94;
    _TMP284 = abs(_a0287);
    _a0291 = _TMP118 - _TMP142;
    _TMP288 = abs(_a0291);
    _a0295 = _TMP110 - _TMP134;
    _TMP292 = abs(_a0295);
    _a0299 = _TMP106 - _TMP142;
    _TMP296 = abs(_a0299);
    _a0303 = _TMP98 - _TMP122;
    _TMP300 = abs(_a0303);
    _a0307 = _TMP94 - _TMP118;
    _TMP304 = abs(_a0307);
    _TMP18 = 4.00000000E+00*(_TMP268 + _TMP272) + 2.00000000E+00*(_TMP276 + _TMP280 + _TMP284 + _TMP288) + -(_TMP292 + _TMP296 + _TMP300 + _TMP304);
    _a0313 = _TMP106 - _TMP110;
    _TMP310 = abs(_a0313);
    _a0317 = _TMP118 - _TMP122;
    _TMP314 = abs(_a0317);
    _a0321 = _TMP106 - _TMP102;
    _TMP318 = abs(_a0321);
    _a0325 = _TMP110 - _TMP150;
    _TMP322 = abs(_a0325);
    _a0329 = _TMP118 - _TMP114;
    _TMP326 = abs(_a0329);
    _a0333 = _TMP122 - _TMP126;
    _TMP330 = abs(_a0333);
    _a0337 = _TMP106 - _TMP150;
    _TMP334 = abs(_a0337);
    _a0341 = _TMP118 - _TMP126;
    _TMP338 = abs(_a0341);
    _a0345 = _TMP102 - _TMP110;
    _TMP342 = abs(_a0345);
    _a0349 = _TMP114 - _TMP122;
    _TMP346 = abs(_a0349);
    _TMP19 = 4.00000000E+00*(_TMP310 + _TMP314) + 2.00000000E+00*(_TMP318 + _TMP322 + _TMP326 + _TMP330) + -(_TMP334 + _TMP338 + _TMP342 + _TMP346);
    _hv_edge = _TMP18 - _TMP19;
    _TMP20 = abs(_d_edge);
    _x0355 = _TMP20/9.99999997E-07;
    _TMP53 = min(1.00000000E+00, _x0355);
    _TMP356 = max(0.00000000E+00, _TMP53);
    _edge_strength = _TMP356*_TMP356*(3.00000000E+00 - 2.00000000E+00*_TMP356);
    _r0363 = 5.00000000E-01*_TMP14.xyz;
    _r0363 = _r0363 + 5.00000000E-01*_TMP13.xyz;
    _r0365 = 5.00000000E-01*_TMP12.xyz;
    _r0365 = _r0365 + 5.00000000E-01*_TMP15.xyz;
    _TMP59[1] = _TMP12.xyz + _TMP14.xyz;
    _TMP59[2] = _TMP13.xyz + _TMP15.xyz;
    _r0367 = 2.50000000E-01*_TMP59[1];
    _r0367 = _r0367 + 2.50000000E-01*_TMP59[2];
    _TMP58[1] = _TMP13.xyz + _TMP12.xyz;
    _TMP58[2] = _TMP15.xyz + _TMP14.xyz;
    _r0369 = 2.50000000E-01*_TMP58[1];
    _r0369 = _r0369 + 2.50000000E-01*_TMP58[2];
    _TMP21 = float((_d_edge >= 0.00000000E+00));
    _TMP22 = _r0363 + _TMP21*(_r0365 - _r0363);
    _TMP23 = float((_hv_edge >= 0.00000000E+00));
    _TMP24 = _r0367 + _TMP23*(_r0369 - _r0367);
    _t0379 = 1.00000000E+00 - _edge_strength;
    _color1 = _TMP22 + _t0379*(_TMP24 - _TMP22);
    _TMP48 = min(_TMP14.xyz, _TMP15.xyz);
    _TMP49 = min(_TMP13.xyz, _TMP48);
    _TMP380 = min(_TMP12.xyz, _TMP49);
    _TMP50 = max(_TMP14.xyz, _TMP15.xyz);
    _TMP51 = max(_TMP13.xyz, _TMP50);
    _TMP388 = max(_TMP12.xyz, _TMP51);
    _TMP52 = min(_TMP388, _color1);
    _TMP396 = max(_TMP380, _TMP52);
    _ret_0 = vec4(_TMP396.x, _TMP396.y, _TMP396.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
