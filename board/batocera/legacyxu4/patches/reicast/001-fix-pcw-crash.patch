diff --git a/core/hw/pvr/ta.cpp b/core/hw/pvr/ta.cpp
index db9fb3f9..a0c72cd 100644
--- a/core/hw/pvr/ta.cpp
+++ b/core/hw/pvr/ta.cpp
@@ -22,20 +22,14 @@ extern u32 SQW,DMAW;
 
 #if HOST_CPU == CPU_X86
 #include <xmmintrin.h>
-struct simd256_t
-{
-	DECL_ALIGN(32) __m128 data[2];
-};
+typedef __m128 simd128_t;
 #elif HOST_CPU == CPU_ARM && defined(__ARM_NEON__)
 #include <arm_neon.h>
-struct simd256_t
-{
-	DECL_ALIGN(32) uint64x2_t data[2];
-};
+typedef uint64x2_t simd128_t;
 #else
-struct simd256_t
+struct simd128_t
 {
-DECL_ALIGN(32) u64 data[4];
+DECL_ALIGN(32) u64 data[2];
 };
 #endif
 
@@ -294,18 +288,16 @@ void ta_vtx_SoftReset()
 INLINE
 void DYNACALL ta_thd_data32_i(void* data)
 {
-	simd256_t* dst = (simd256_t*)ta_tad.thd_data;
-	simd256_t* src = (simd256_t*)data;
+	simd128_t* dst = (simd128_t*)ta_tad.thd_data;
+	simd128_t* src = (simd128_t*)data;
 
-	// First byte is PCW
-	PCW pcw = *(PCW*)data;
+	PCW pcw = *(PCW*)src;
 	
-	// Copy the TA data
-	*dst = *src;
+	dst[0] = src[0];
+	dst[1] = src[1];
 
 	ta_tad.thd_data += 32;
 
-	//process TA state
 	u32 state_in = (ta_cur_state << 8) | (pcw.ParaType << 5) | ((pcw.obj_ctrl >> 2) & 31);
 
 	u32 trans = ta_fsm[state_in];
@@ -313,7 +305,7 @@ void DYNACALL ta_thd_data32_i(void* data)
 	bool must_handle = trans & 0xF0;
 
 
-	if (likely(!must_handle))
+	if (!unlikely(must_handle))
 	{
 		return;
 	}
