From 7c612669865e682d6e7f6ec328557a26eaf9b27a Mon Sep 17 00:00:00 2001
From: Christian Hewitt <christianshewitt@gmail.com>
Date: Sun, 20 Dec 2020 14:13:49 +0000
Subject: [PATCH 117/118] WIP: vdec: dev_dbg/dev_warn > dev_info

---
 drivers/staging/media/meson/vdec/codec_h264.c   |  6 +++---
 drivers/staging/media/meson/vdec/esparser.c     | 14 +++++++-------
 drivers/staging/media/meson/vdec/vdec.c         |  2 +-
 drivers/staging/media/meson/vdec/vdec_helpers.c | 10 +++++-----
 4 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/drivers/staging/media/meson/vdec/codec_h264.c b/drivers/staging/media/meson/vdec/codec_h264.c
index c61128fc4bb9..fc9d60d637d6 100644
--- a/drivers/staging/media/meson/vdec/codec_h264.c
+++ b/drivers/staging/media/meson/vdec/codec_h264.c
@@ -292,7 +292,7 @@ static void codec_h264_resume(struct amvdec_session *sess)
 			    (u32[]){ ANC0_CANVAS_ADDR, 0 },
 			    (u32[]){ 24, 0 });
 
-	dev_dbg(core->dev, "max_refs = %u; actual_dpb_size = %u\n",
+	dev_info(core->dev, "max_refs = %u; actual_dpb_size = %u\n",
 		h264->max_refs, sess->num_dst_bufs);
 
 	/* Align to a multiple of 4 macroblocks */
@@ -349,7 +349,7 @@ static void codec_h264_src_change(struct amvdec_session *sess)
 	frame_width = h264->mb_width * 16 - crop_right;
 	frame_height = h264->mb_height * 16 - crop_bottom;
 
-	dev_dbg(core->dev, "frame: %ux%u; crop: %u %u\n",
+	dev_info(core->dev, "frame: %ux%u; crop: %u %u\n",
 		frame_width, frame_height, crop_right, crop_bottom);
 
 	codec_h264_set_par(sess);
@@ -401,7 +401,7 @@ static void codec_h264_frames_ready(struct amvdec_session *sess, u32 status)
 		 * Typical reason is a temporarily corrupted bitstream
 		 */
 		if (frame_status & ERROR_FLAG)
-			dev_dbg(core->dev, "Buffer %d decode error\n",
+			dev_info(core->dev, "Buffer %d decode error\n",
 				buffer_index);
 
 		if (pic_struct == PIC_TOP_BOT)
diff --git a/drivers/staging/media/meson/vdec/esparser.c b/drivers/staging/media/meson/vdec/esparser.c
index db7022707ff8..3801d732fa9f 100644
--- a/drivers/staging/media/meson/vdec/esparser.c
+++ b/drivers/staging/media/meson/vdec/esparser.c
@@ -95,7 +95,7 @@ static int vp9_update_header(struct amvdec_core *core, struct vb2_buffer *buf)
 	dsize = vb2_get_plane_payload(buf, 0);
 
 	if (dsize == vb2_plane_size(buf, 0)) {
-		dev_warn(core->dev, "%s: unable to update header\n", __func__);
+		dev_info(core->dev, "%s: unable to update header\n", __func__);
 		return 0;
 	}
 
@@ -134,7 +134,7 @@ static int vp9_update_header(struct amvdec_core *core, struct vb2_buffer *buf)
 	new_frame_size = total_datasize + num_frames * VP9_HEADER_SIZE;
 
 	if (new_frame_size >= vb2_plane_size(buf, 0)) {
-		dev_warn(core->dev, "%s: unable to update header\n", __func__);
+		dev_info(core->dev, "%s: unable to update header\n", __func__);
 		return 0;
 	}
 
@@ -168,7 +168,7 @@ static int vp9_update_header(struct amvdec_core *core, struct vb2_buffer *buf)
 		if (!old_header) {
 			/* nothing */
 		} else if (old_header > fdata + 16 + framesize) {
-			dev_dbg(core->dev, "%s: data has gaps, setting to 0\n",
+			dev_info(core->dev, "%s: data has gaps, setting to 0\n",
 				__func__);
 			memset(fdata + 16 + framesize, 0,
 			       (old_header - fdata + 16 + framesize));
@@ -200,7 +200,7 @@ static u32 esparser_pad_start_code(struct amvdec_core *core,
 
 	if ((payload_size + pad_size + SEARCH_PATTERN_LEN) >
 						vb2_plane_size(vb, 0)) {
-		dev_warn(core->dev, "%s: unable to pad start code\n", __func__);
+		dev_info(core->dev, "%s: unable to pad start code\n", __func__);
 		return pad_size;
 	}
 
@@ -244,7 +244,7 @@ static u32 esparser_vififo_get_free_space(struct amvdec_session *sess)
 	vififo_usage += (6 * SZ_1K); // 6 KiB internal fifo
 
 	if (vififo_usage > sess->vififo_size) {
-		dev_warn(sess->core->dev,
+		dev_info(sess->core->dev,
 			 "VIFIFO usage (%u) > VIFIFO size (%u)\n",
 			 vififo_usage, sess->vififo_size);
 		return 0;
@@ -329,7 +329,7 @@ esparser_queue(struct amvdec_session *sess, struct vb2_v4l2_buffer *vbuf)
 	offset = esparser_get_offset(sess);
 
 	amvdec_add_ts(sess, vb->timestamp, vbuf->timecode, offset, vbuf->flags);
-	dev_dbg(core->dev, "esparser: ts = %llu pld_size = %u offset = %08X flags = %08X\n",
+	dev_info(core->dev, "esparser: ts = %llu pld_size = %u offset = %08X flags = %08X\n",
 		vb->timestamp, payload_size, offset, vbuf->flags);
 
 	vbuf->flags = 0;
@@ -352,7 +352,7 @@ esparser_queue(struct amvdec_session *sess, struct vb2_v4l2_buffer *vbuf)
 	ret = esparser_write_data(core, phy, payload_size + pad_size);
 
 	if (ret <= 0) {
-		dev_warn(core->dev, "esparser: input parsing error\n");
+		dev_info(core->dev, "esparser: input parsing error\n");
 		amvdec_remove_ts(sess, vb->timestamp);
 		v4l2_m2m_buf_done(vbuf, VB2_BUF_STATE_ERROR);
 		amvdec_write_parser(core, PARSER_FETCH_CMD, 0);
diff --git a/drivers/staging/media/meson/vdec/vdec.c b/drivers/staging/media/meson/vdec/vdec.c
index 63cd3f14ab20..1780d41becdb 100644
--- a/drivers/staging/media/meson/vdec/vdec.c
+++ b/drivers/staging/media/meson/vdec/vdec.c
@@ -750,7 +750,7 @@ vdec_decoder_cmd(struct file *file, void *fh, struct v4l2_decoder_cmd *cmd)
 	if (cmd->cmd != V4L2_DEC_CMD_STOP)
 		return -EINVAL;
 
-	dev_dbg(dev, "Received V4L2_DEC_CMD_STOP\n");
+	dev_info(dev, "Received V4L2_DEC_CMD_STOP\n");
 
 	sess->should_stop = 1;
 
diff --git a/drivers/staging/media/meson/vdec/vdec_helpers.c b/drivers/staging/media/meson/vdec/vdec_helpers.c
index 7f07a9175815..010a7f4eecbb 100644
--- a/drivers/staging/media/meson/vdec/vdec_helpers.c
+++ b/drivers/staging/media/meson/vdec/vdec_helpers.c
@@ -258,7 +258,7 @@ void amvdec_remove_ts(struct amvdec_session *sess, u64 ts)
 			goto unlock;
 		}
 	}
-	dev_warn(sess->core->dev_dec,
+	dev_info(sess->core->dev_dec,
 		 "Couldn't remove buffer with timestamp %llu from list\n", ts);
 
 unlock:
@@ -295,7 +295,7 @@ static void dst_buf_done(struct amvdec_session *sess,
 	    atomic_read(&sess->esparser_queued_bufs) <= 1) {
 		const struct v4l2_event ev = { .type = V4L2_EVENT_EOS };
 
-		dev_dbg(dev, "Signaling EOS, sequence_cap = %u\n",
+		dev_info(dev, "Signaling EOS, sequence_cap = %u\n",
 			sess->sequence_cap - 1);
 		v4l2_event_queue_fh(&sess->fh, &ev);
 		vbuf->flags |= V4L2_BUF_FLAG_LAST;
@@ -304,10 +304,10 @@ static void dst_buf_done(struct amvdec_session *sess,
 		vbuf->flags |= V4L2_BUF_FLAG_LAST;
 		sess->sequence_cap = 0;
 	} else if (sess->should_stop)
-		dev_dbg(dev, "should_stop, %u bufs remain\n",
+		dev_info(dev, "should_stop, %u bufs remain\n",
 			atomic_read(&sess->esparser_queued_bufs));
 
-	dev_dbg(dev, "Buffer %u done, ts = %llu, flags = %08X\n",
+	dev_info(dev, "Buffer %u done, ts = %llu, flags = %08X\n",
 		vbuf->vb2_buf.index, timestamp, flags);
 	vbuf->field = field;
 	v4l2_m2m_buf_done(vbuf, VB2_BUF_STATE_DONE);
@@ -461,7 +461,7 @@ void amvdec_src_change(struct amvdec_session *sess, u32 width,
 	sess->height = height;
 	sess->status = STATUS_NEEDS_RESUME;
 
-	dev_dbg(sess->core->dev, "Res. changed (%ux%u), DPB size %u\n",
+	dev_info(sess->core->dev, "Res. changed (%ux%u), DPB size %u\n",
 		width, height, dpb_size);
 	v4l2_event_queue_fh(&sess->fh, &ev);
 }
-- 
2.31.1

