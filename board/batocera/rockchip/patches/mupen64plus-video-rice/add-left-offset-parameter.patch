MRFIXIT: Add a new parameter to the settings to control left offset since SDL2 center doesn't work
--- a/src/Config.cpp	2018-11-09 16:39:42.608159241 +0000
+++ b/src/Config.cpp	2018-11-09 16:52:27.401663331 +0000
@@ -306,7 +306,8 @@
     /* Set default config parameters */
     ConfigSetDefaultBool(l_ConfigVideoGeneral, "Fullscreen", 0, "Use fullscreen mode if True, or windowed mode if False ");
     ConfigSetDefaultInt(l_ConfigVideoGeneral, "ScreenWidth", 640, "Width of output window or fullscreen width");
     ConfigSetDefaultInt(l_ConfigVideoGeneral, "ScreenHeight", 480, "Height of output window or fullscreen height");
+    ConfigSetDefaultInt(l_ConfigVideoRice, "ScreenLeftOffset", 0, "Position of the left of the screen");
     ConfigSetDefaultBool(l_ConfigVideoGeneral, "VerticalSync", 0, "If true, activate the SDL_GL_SWAP_CONTROL attribute");
 
     ConfigSetDefaultInt(l_ConfigVideoRice, "Version", CONFIG_PARAM_VERSION, "Mupen64Plus Rice Video Plugin config parameter version number");
@@ -426,8 +426,9 @@
 static void ReadConfiguration(void)
 {
     windowSetting.bDisplayFullscreen = ConfigGetParamBool(l_ConfigVideoGeneral, "Fullscreen");
     windowSetting.uDisplayWidth = ConfigGetParamInt(l_ConfigVideoGeneral, "ScreenWidth");
     windowSetting.uDisplayHeight = ConfigGetParamInt(l_ConfigVideoGeneral, "ScreenHeight");
+    windowSetting.leftOffset = ConfigGetParamInt(l_ConfigVideoRice, "ScreenLeftOffset");
     windowSetting.bVerticalSync = ConfigGetParamBool(l_ConfigVideoGeneral, "VerticalSync");
 
     defaultRomOptions.N64FrameBufferEmuType = ConfigGetParamInt(l_ConfigVideoRice, "FrameBufferSetting");

--- a/src/Video.h
+++ b/src/Video.h
@@ -30,7 +30,7 @@
 typedef struct {
     float   fViWidth, fViHeight;
     unsigned short        uViWidth, uViHeight;
-    unsigned short        uDisplayWidth, uDisplayHeight;
+    unsigned short        uDisplayWidth, uDisplayHeight, leftOffset;
     
     BOOL    bDisplayFullscreen;
     BOOL    bVerticalSync;
--- a/src/OGLRender.cpp
+++ b/src/OGLRender.cpp
@@ -36,6 +36,8 @@
 #include "OGLTexture.h"
 #include "TextureManager.h"
 
+int adjust = 0;
+
 // FIXME: Use OGL internal L/T and matrix stack
 // FIXME: Use OGL lookupAt function
 // FIXME: Use OGL DisplayList
@@ -70,7 +72,7 @@
 
 void OGLRender::Initialize(void)
 {
-
+    adjust = windowSetting.leftOffset;
     glViewportWrapper(0, windowSetting.statusBarHeightToUse, windowSetting.uDisplayWidth, windowSetting.uDisplayHeight);
     OPENGL_CHECK_ERRORS;
     
@@ -935,7 +937,7 @@
         uint32 height = (gRDP.scissor.right*gRDP.scissor.bottom)/width;
         glEnable(GL_SCISSOR_TEST);
         OPENGL_CHECK_ERRORS;
-        glScissor(0, int(height*windowSetting.fMultY+windowSetting.statusBarHeightToUse),
+        glScissor(0 + adjust, int(height*windowSetting.fMultY+windowSetting.statusBarHeightToUse),
             int(width*windowSetting.fMultX), int(height*windowSetting.fMultY) );
         OPENGL_CHECK_ERRORS;
     }
@@ -956,13 +958,13 @@
         uint32 height = (gRDP.scissor.right*gRDP.scissor.bottom)/width;
         glEnable(GL_SCISSOR_TEST);
         OPENGL_CHECK_ERRORS;
-        glScissor(0, int(height*windowSetting.fMultY+windowSetting.statusBarHeightToUse),
+        glScissor(0 + adjust, int(height*windowSetting.fMultY+windowSetting.statusBarHeightToUse),
             int(width*windowSetting.fMultX), int(height*windowSetting.fMultY) );
         OPENGL_CHECK_ERRORS;
     }
     else
     {
-        glScissor(int(gRDP.scissor.left*windowSetting.fMultX), int((windowSetting.uViHeight-gRDP.scissor.bottom)*windowSetting.fMultY+windowSetting.statusBarHeightToUse),
+        glScissor(int(gRDP.scissor.left*windowSetting.fMultX) + adjust, int((windowSetting.uViHeight-gRDP.scissor.bottom)*windowSetting.fMultY+windowSetting.statusBarHeightToUse),
             int((gRDP.scissor.right-gRDP.scissor.left)*windowSetting.fMultX), int((gRDP.scissor.bottom-gRDP.scissor.top)*windowSetting.fMultY ));
         OPENGL_CHECK_ERRORS;
     }
@@ -976,7 +978,7 @@
 
     glEnable(GL_SCISSOR_TEST);
     OPENGL_CHECK_ERRORS;
-    glScissor(windowSetting.clipping.left, int((windowSetting.uViHeight-gRSP.real_clip_scissor_bottom)*windowSetting.fMultY)+windowSetting.statusBarHeightToUse,
+    glScissor(windowSetting.clipping.left + adjust, int((windowSetting.uViHeight-gRSP.real_clip_scissor_bottom)*windowSetting.fMultY)+windowSetting.statusBarHeightToUse,
         windowSetting.clipping.width, windowSetting.clipping.height);
     OPENGL_CHECK_ERRORS;
 
@@ -1019,7 +1021,7 @@
         mflag=flag;
         glLoadIdentity();
         OPENGL_CHECK_ERRORS;
-        glViewport(x,y,width,height);
+        glViewport(x + adjust,y,width,height);
         OPENGL_CHECK_ERRORS;
     }
 }
