From 215ecf403ac1de497d7deb5d952e1afa77210db8 Mon Sep 17 00:00:00 2001
From: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date: Fri, 17 Nov 2017 11:47:01 +0200
Subject: [PATCH] adapter: Fix crash while reseting discovery filter

The client watch should be removed when freeing the discovery client
otherwise the disconnect callback my still be called:

Invalid read of size 8
   at 0x490495: discovery_disconnect (adapter.c:2129)
   by 0x4CA909: service_filter (watch.c:481)
   by 0x4CA4F8: message_filter (watch.c:557)
   by 0x53AC32C: dbus_connection_dispatch (in /usr/lib64/libdbus-1.so.3.19.0)
   by 0x4C933F: message_dispatch (mainloop.c:72)
   by 0x50C9C26: ??? (in /usr/lib64/libglib-2.0.so.0.5200.3)
   by 0x50CD246: g_main_context_dispatch (in /usr/lib64/libglib-2.0.so.0.5200.3)
   by 0x50CD5E7: ??? (in /usr/lib64/libglib-2.0.so.0.5200.3)
   by 0x50CD901: g_main_loop_run (in /usr/lib64/libglib-2.0.so.0.5200.3)
   by 0x40CD60: main (main.c:770)
 Address 0x931a4f0 is 16 bytes inside a block of size 40 free'd
   at 0x4C2FD18: free (vg_replace_malloc.c:530)
   by 0x50D2B4D: g_free (in /usr/lib64/libglib-2.0.so.0.5200.3)
   by 0x48FF00: set_discovery_filter (adapter.c:2462)
   by 0x4CE6E2: process_message.isra.3 (object.c:259)
   by 0x4CEF14: generic_message (object.c:1079)
   by 0x53BB57F: ??? (in /usr/lib64/libdbus-1.so.3.19.0)
   by 0x53AC3A9: dbus_connection_dispatch (in /usr/lib64/libdbus-1.so.3.19.0)
   by 0x4C933F: message_dispatch (mainloop.c:72)
   by 0x50C9C26: ??? (in /usr/lib64/libglib-2.0.so.0.5200.3)
   by 0x50CD246: g_main_context_dispatch (in /usr/lib64/libglib-2.0.so.0.5200.3)
   by 0x50CD5E7: ??? (in /usr/lib64/libglib-2.0.so.0.5200.3)
   by 0x50CD901: g_main_loop_run (in /usr/lib64/libglib-2.0.so.0.5200.3)
---
 src/adapter.c | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/src/adapter.c b/src/adapter.c
index 1c751b1d4..f3d88ab1a 100644
--- a/src/adapter.c
+++ b/src/adapter.c
@@ -1712,6 +1712,22 @@
 	adapter->discovery_found = NULL;
 }
 
+static void discovery_free(void *user_data)
+{
+	struct watch_client *client = user_data;
+
+	if (client->watch)
+		g_dbus_remove_watch(dbus_conn, client->watch);
+
+	if (client->discovery_filter) {
+		free_discovery_filter(client->discovery_filter);
+		client->discovery_filter = NULL;
+	}
+
+	g_free(client->owner);
+	g_free(client);
+}
+
 static gboolean remove_temp_devices(gpointer user_data)
 {
 	struct btd_adapter *adapter = user_data;
@@ -2458,8 +2458,7 @@ static DBusMessage *set_discovery_filter(DBusConnection *conn,
 		adapter->set_filter_list = g_slist_remove(
 					      adapter->set_filter_list,
 					      client);
-		g_free(client->owner);
-		g_free(client);
+		discovery_free(client);
 		DBG("successfully cleared pre-set filter");
 	} else if (discovery_filter) {
 		/* Client pre-setting his filter for first time */

From ded317e9c2848e16e0616b961df2b3dc4e836c6e Mon Sep 17 00:00:00 2001
From: Anurag Biradar <biradar.a@samsung.com>
Date: Fri, 7 Jul 2017 12:06:08 +0530
Subject: [PATCH] src/device: Fix bluetoothd crash

DUT was trying to connect with carkit and due to some reason connection
got aborted. SDP search got error and browse request was freed but
device->browse is still pointing to freed memory. During clean up
bluez removes all device and while removing it find reference to
browse_req and it tries to free again which leads to the crash.

Assign NULL to device browse_req before freeing the browse_req.

Log:

bluetooth: src/service.c:change_state() 0xb700a650: device XX:XX:XX:XX:XX:XX
           profile a2dp-sink state changed: connecting -> disconnected (-11)
bluetooth: src/device.c:device_profile_connected()
			a2dp-sink Resource temporarily unavailable (11)
bluetooth: src/device.c:device_profile_connected() returning response to :1.300
bluetooth: src/device.c:device_browse_sdp()
bluetooth: src/device.c:browse_request_free()

--Browse req is freed but device->browse is still pointing to freed memory --

While turning OFF freeing each devices:
bluetoothd[2024]: src/adapter.c:adapter_remove()
		Removing adapter /org/bluez/hci0
bluetoothd[2024]: src/device.c:device_remove()
		Removing device /org/bluez/hci0/dev_XX_XX_XX_XX_XX_XX
bluetoothd[2024]: src/device.c:browse_request_cancel()

(gdb)
0  0xb6f981ae in queue_remove_if (queue=0xb7007d70,
     function=0xb6f9a319 <match_disconn_id>, user_data=0xb7001ae0)
     at src/shared/queue.c:289
1  0xb6f9a87a in bt_att_unregister_disconnect (att=<optimized out>,
     id=<optimized out>) at src/shared/att.c:1161
2  0xb6f81bf6 in attio_cleanup (device=0xb6d4d810) at src/device.c:742
3  0xb6f81c3c in browse_request_cancel (req=0xb6fe3038) at src/device.c:777
4  0xb6f87066 in device_remove (device=0xb700ac00, remove_stored=0)
     at src/device.c:5238
5  0xb6f6b80c in adapter_remove (adapter=adapter@entry=0xb6fff2f0)
     at src/adapter.c:7822
6  0xb6f79068 in adapter_cleanup () at src/adapter.c:11707
---
 src/device.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/device.c b/src/device.c
index 6a9936acd..73b2c44f0 100644
--- a/src/device.c
+++ b/src/device.c
@@ -5118,6 +5118,7 @@ static int device_browse_sdp(struct btd_device *device, DBusMessage *msg)
 				&device->bdaddr, &uuid, browse_cb, req, NULL,
 				req->sdp_flags);
 	if (err < 0) {
+		device->browse = NULL;
 		browse_request_free(req);
 		return err;
 	}
