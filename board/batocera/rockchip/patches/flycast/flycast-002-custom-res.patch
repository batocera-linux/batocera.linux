MRFIXIT2001: changes to a custom resolution defined in recalbox.conf using a graphics stack wrapper
diff -Naur reicast_orig/core/linux-dist/drm_setres.cpp reicast_cust/core/linux-dist/drm_setres.cpp
--- a/core/linux-dist/drm_setres.cpp	1970-01-01 00:00:00.000000000 +0000
+++ b/core/linux-dist/drm_setres.cpp	2018-10-23 01:15:19.394458192 +0000
@@ -0,0 +1,414 @@
+// MRFIXIT: The sole purpose of the code below, mostly borrowed from the below URL, with some tweaks by me, is to change the resolution of the monitor prior to the emulator starting
+// https://gist.github.com/Miouyouyou/89e9fe56a2c59bce7d4a18a858f389ef
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <string.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <errno.h>
+#include <unistd.h> // for close()
+#include <linux/version.h> // for kernel version
+
+#include <xf86drm.h>
+#include <xf86drmMode.h>
+#include <gbm.h>
+
+#define GL_GLEXT_PROTOTYPES 1
+#include <GLES2/gl2.h>
+#include <GLES2/gl2ext.h>
+#include <EGL/egl.h>
+#include <EGL/eglext.h>
+
+#include <assert.h>
+
+#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))
+
+static struct {
+	EGLDisplay display;
+	EGLConfig config;
+	EGLContext context;
+	EGLSurface surface;
+	GLuint program;
+	GLint modelviewmatrix, modelviewprojectionmatrix, normalmatrix;
+	GLuint vbo;
+	GLuint positionsoffset, colorsoffset, normalsoffset;
+} gl;
+
+static struct {
+	struct gbm_device *dev;
+	struct gbm_surface *surface;
+} gbm;
+
+static struct {
+	int fd;
+	drmModeModeInfo *mode;
+	uint32_t crtc_id;
+	drmModeCrtc *old_crtc;
+	uint32_t connector_id;
+} drm;
+
+struct drm_fb {
+	struct gbm_bo *bo;
+	uint32_t fb_id;
+};
+
+static uint32_t find_crtc_for_encoder(const drmModeRes *resources,
+				      const drmModeEncoder *encoder) {
+	int i;
+
+	for (i = 0; i < resources->count_crtcs; i++) {
+		const uint32_t crtc_mask = 1 << i;
+		const uint32_t crtc_id = resources->crtcs[i];
+		if (encoder->possible_crtcs & crtc_mask) {
+			return crtc_id;
+		}
+	}
+
+	/* no match found */
+	return -1;
+}
+
+static uint32_t find_crtc_for_connector(const drmModeRes *resources,
+					const drmModeConnector *connector) {
+	int i;
+
+	for (i = 0; i < connector->count_encoders; i++) {
+		const uint32_t encoder_id = connector->encoders[i];
+		drmModeEncoder *encoder = drmModeGetEncoder(drm.fd, encoder_id);
+
+		if (encoder) {
+			const uint32_t crtc_id = find_crtc_for_encoder(resources, encoder);
+
+			drmModeFreeEncoder(encoder);
+			if (crtc_id != 0) {
+				return crtc_id;
+			}
+		}
+	}
+
+	/* no match found */
+	return -1;
+}
+
+static int init_drm(void)
+{
+	drmModeRes *resources;
+	drmModeConnector *connector = NULL;
+	drmModeEncoder *encoder = NULL;
+	int i;
+	const char *x = NULL, *y = NULL;
+	char res[12], *value;
+	FILE *fp;
+
+	/* Get preferred X and Y from config */
+	fp = popen("/usr/bin/batocera-settings -command load -key flycast.resolution", "r");
+	if (fp != NULL) {
+		fgets(res, sizeof(res)-1, fp);
+		pclose(fp);
+		if (res != NULL) {
+			value = strdup(res);
+			x = strtok(value,"x");
+			y = strtok(NULL, "x");
+		}
+	}
+	if ( x == NULL || y == NULL ) {
+		x = "800";
+		y = "600";
+	}
+	int resX = atoi(x), resY = atoi(y);
+	printf("REQUESTING RESOLUTION: %dx%d\n", resX, resY);
+
+	drm.fd = open("/dev/dri/card0", O_RDWR);
+	if (drm.fd < 0) {
+		printf("could not open drm device\n");
+		return -1;
+	}
+
+	resources = drmModeGetResources(drm.fd);
+	if (!resources) {
+		printf("drmModeGetResources failed: %s\n", strerror(errno));
+		return -1;
+	}
+
+	// find a connected connector: 
+	for (i = 0; i < resources->count_connectors; i++) {
+		connector = drmModeGetConnector(drm.fd, resources->connectors[i]);
+		if (connector->connection == DRM_MODE_CONNECTED) {
+			// it's connected, let's use this! 
+			break;
+		}
+		drmModeFreeConnector(connector);
+		connector = NULL;
+	}
+
+	if (!connector) {
+		printf("no connected connector!\n");
+		return -1;
+	}
+
+	drm.connector_id = connector->connector_id;
+
+	// find resolution 
+	for (i = 0; i < connector->count_modes; i++) {
+		drmModeModeInfo *current_mode = &connector->modes[i];
+			
+		if (current_mode->hdisplay <= resX && current_mode->vdisplay <= resY && current_mode->vrefresh <= 61) {
+			drm.mode = current_mode;
+			break;
+		}
+	}
+
+	// if couldn't find requested resolution, cancel and don't change mode 
+	if (!drm.mode) {
+		printf("could not find %dx%d, no mode change\n", resX, resY);
+		return -1;
+	}
+	
+	// find encoder: 
+	for (i = 0; i < resources->count_encoders; i++) {
+		encoder = drmModeGetEncoder(drm.fd, resources->encoders[i]);
+		if (encoder->encoder_id == connector->encoder_id)
+			break;
+		drmModeFreeEncoder(encoder);
+		encoder = NULL;
+	}
+
+	if (encoder) {
+		printf("Found encoder crtc\n");
+		drm.crtc_id = encoder->crtc_id;
+	} else {
+		uint32_t crtc_id = find_crtc_for_connector(resources, connector);
+		if (crtc_id == 0) {
+			printf("no crtc found!\n");
+			return -1;
+		} else
+			printf("Found crtc for connector\n");
+		drm.crtc_id = crtc_id;
+	}
+
+	drm.old_crtc = NULL;
+	drm.old_crtc = drmModeGetCrtc(drm.fd, drm.crtc_id);
+	if (!drm.old_crtc) {
+		printf("Could Not Get Current CRTC!\n");
+		return -1;
+	}
+
+	return 0;
+}
+
+static int init_gbm(void)
+{
+	gbm.dev = gbm_create_device(drm.fd);
+
+	gbm.surface = gbm_surface_create(gbm.dev,
+			drm.mode->hdisplay, drm.mode->vdisplay,
+			GBM_FORMAT_XRGB8888,
+			GBM_BO_USE_SCANOUT | GBM_BO_USE_RENDERING);
+	if (!gbm.surface) {
+		printf("failed to create gbm surface\n");
+		return -1;
+	}
+
+	return 0;
+}
+
+static int init_gl(void)
+{
+	EGLint major, minor, n;
+
+	static const EGLint context_attribs[] = {
+		EGL_CONTEXT_CLIENT_VERSION, 2,
+		EGL_NONE
+	};
+
+	static const EGLint config_attribs[] = {
+		EGL_SURFACE_TYPE, EGL_WINDOW_BIT,
+		EGL_RED_SIZE, 1,
+		EGL_GREEN_SIZE, 1,
+		EGL_BLUE_SIZE, 1,
+		EGL_ALPHA_SIZE, 0,
+		EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT,
+		EGL_NONE
+	};
+
+	PFNEGLGETPLATFORMDISPLAYEXTPROC get_platform_display = NULL;
+	get_platform_display =
+		(void *) eglGetProcAddress("eglGetPlatformDisplayEXT");
+	assert(get_platform_display != NULL);
+
+	gl.display = get_platform_display(0x31D7, gbm.dev, NULL);
+
+	if (!eglInitialize(gl.display, &major, &minor)) {
+		printf("failed to initialize\n");
+		return -1;
+	}
+
+	printf("Using display %p with EGL version %d.%d\n",
+			gl.display, major, minor);
+
+	printf("EGL Version \"%s\"\n", eglQueryString(gl.display, EGL_VERSION));
+	printf("EGL Vendor \"%s\"\n", eglQueryString(gl.display, EGL_VENDOR));
+	printf("EGL Extensions \"%s\"\n", eglQueryString(gl.display, EGL_EXTENSIONS));
+
+	if (!eglBindAPI(EGL_OPENGL_ES_API)) {
+		printf("failed to bind api EGL_OPENGL_ES_API\n");
+		return -1;
+	}
+
+	if (!eglChooseConfig(gl.display, config_attribs, &gl.config, 1, &n) || n != 1) {
+		printf("failed to choose config: %d\n", n);
+		return -1;
+	}
+
+	gl.context = eglCreateContext(gl.display, gl.config,
+			EGL_NO_CONTEXT, context_attribs);
+	if (gl.context == NULL) {
+		printf("failed to create context\n");
+		return -1;
+	}
+
+	gl.surface = eglCreateWindowSurface(gl.display, gl.config, (EGLNativeWindowType)gbm.surface, NULL);
+	if (gl.surface == EGL_NO_SURFACE) {
+		printf("failed to create egl surface\n");
+		return -1;
+	}
+
+	/* connect the context to the surface */
+	eglMakeCurrent(gl.display, gl.surface, gl.surface, gl.context);
+
+	printf("GL Extensions: \"%s\"\n", glGetString(GL_EXTENSIONS));
+
+	return 0;
+}
+
+static void
+drm_fb_destroy_callback(struct gbm_bo *bo, void *data)
+{
+	struct drm_fb *fb = data;
+	//struct gbm_device *gbm = gbm_bo_get_device(bo);
+
+	if (fb->fb_id)
+		drmModeRmFB(drm.fd, fb->fb_id);
+
+	free(fb);
+}
+
+static struct drm_fb * drm_fb_get_from_bo(struct gbm_bo *bo)
+{
+	struct drm_fb *fb = gbm_bo_get_user_data(bo);
+	uint32_t width, height, stride, handle;
+	int ret;
+
+	if (fb)
+		return fb;
+
+	fb = calloc(1, sizeof *fb);
+	fb->bo = bo;
+
+	width = gbm_bo_get_width(bo);
+	height = gbm_bo_get_height(bo);
+	stride = gbm_bo_get_stride(bo);
+	handle = gbm_bo_get_handle(bo).u32;
+
+	ret = drmModeAddFB(drm.fd, width, height, 24, 32, stride, handle, &fb->fb_id);
+	if (ret) {
+		printf("failed to create fb: %s\n", strerror(errno));
+		free(fb);
+		return NULL;
+	}
+
+	gbm_bo_set_user_data(bo, fb, drm_fb_destroy_callback);
+
+	return fb;
+}
+
+static void page_flip_handler(int fd, unsigned int frame,
+		  unsigned int sec, unsigned int usec, void *data)
+{
+	int *waiting_for_flip = data;
+	*waiting_for_flip = 0;
+}
+
+struct gbm_bo *bo;
+	
+void drm_setres()
+{
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,5,0)
+	printf("Identified kernel 4.4, initializing full graphics stack\n");
+	fd_set fds;
+	
+	struct drm_fb *fb;
+	uint32_t i = 0;
+	int ret;
+
+	ret = init_drm();
+	if (ret) {
+		//printf("failed to initialize DRM\n");
+		return;
+	}
+
+	FD_ZERO(&fds);
+	FD_SET(0, &fds);
+	FD_SET(drm.fd, &fds);
+
+	ret = init_gbm();
+	if (ret) {
+		//printf("failed to initialize GBM\n");
+		return;
+	}
+
+	ret = init_gl();
+	if (ret) {
+		//printf("failed to initialize EGL\n");
+		return;
+	}
+
+	eglSwapBuffers(gl.display, gl.surface);
+	bo = gbm_surface_lock_front_buffer(gbm.surface);
+	fb = drm_fb_get_from_bo(bo);
+
+	drm.old_crtc = drmModeGetCrtc(drm.fd, drm.crtc_id);
+	
+	/* set mode: */
+	ret = drmModeSetCrtc(drm.fd, drm.crtc_id, fb->fb_id, 0, 0,
+			&drm.connector_id, 1, drm.mode);
+	if (ret) {
+		printf("failed to set mode: %s\n", strerror(errno));
+		return;
+	}
+#else
+	printf("Identified kernel newer than 4.4 - don't need to init full graphics stack\n");
+	if (init_drm() == -1) {
+		printf("failed to initialize DRM %s\n", strerror(errno));
+		goto out;
+	} else
+		printf("success initialize DRM\n");
+
+	// set mode:
+	if (drmModeSetCrtc(drm.fd, drm.crtc_id, drm.old_crtc->buffer_id, 0, 0, &drm.connector_id, 1, drm.mode)) {
+		printf("failed to set mode: %s\n", strerror(errno));
+		goto out;
+	} else
+		printf("success set mode\n");
+
+out:
+	drmDropMaster(drm.fd);
+#endif
+}
+
+void drm_clearres()
+{
+	
+	if( bo ) { gbm_surface_release_buffer(gbm.surface, bo); }
+	
+	if( drm.old_crtc ) { drmModeSetCrtc (drm.fd, drm.crtc_id, drm.old_crtc->buffer_id, drm.old_crtc->x, drm.old_crtc->y, &drm.connector_id, 1, &drm.old_crtc->mode); }
+	if( drm.old_crtc ) { drmModeFreeCrtc (drm.old_crtc); }
+	if( drm.fd ) { close(drm.fd); }
+
+	if( gl.surface && gl.display ) { eglDestroySurface (gl.display, gl.surface); }
+	if( gbm.surface ) { gbm_surface_destroy (gbm.surface); }
+	if( gl.surface && gl.context ) { eglDestroyContext (gl.display, gl.context); }
+	if( gl.display ) { eglTerminate (gl.display); }
+	if( gbm.dev ) { gbm_device_destroy (gbm.dev); }
+}
diff -Naur reicast_orig/core/linux-dist/drm_setres.h reicast_cust/core/linux-dist/drm_setres.h
--- a/core/linux-dist/drm_setres.h	1970-01-01 00:00:00.000000000 +0000
+++ b/core/linux-dist/drm_setres.h	2018-10-22 00:34:11.857953739 +0000
@@ -0,0 +1,4 @@
+#pragma once
+
+extern void drm_setres();
+extern void drm_clearres();
diff -Naur reicast_orig/core/linux-dist/main.cpp reicast_cust/core/linux-dist/main.cpp
--- a/core/linux-dist/main.cpp	2018-10-22 00:01:57.025317810 +0000
+++ b/core/linux-dist/main.cpp	2018-10-23 00:56:11.650156399 +0000
@@ -8,6 +8,7 @@
 #include <cstdarg>
 #include <csignal>
 #include <unistd.h>
+#include "drm_setres.h"
 
 #if defined(SUPPORT_DISPMANX)
 	#include "dispmanx.h"
@@ -312,6 +313,7 @@
 	INFO_LOG(BOOT, "Config dir is: %s", get_writable_config_path("/").c_str());
 	INFO_LOG(BOOT, "Data dir is:   %s", get_writable_data_path("/").c_str());
 
+	drm_setres();
 	#if defined(USE_SDL)
 		if (SDL_Init(0) != 0)
 		{
@@ -335,6 +337,7 @@
 		clean_exit(0);
 	#endif
 
+	drm_clearres();
 	dc_term();
 
 	#if defined(USE_EVDEV)

