# credits .: Daniel Mehrwald
# https://github.com/AreaScout/SDL/commit/54675d1edc8b8d5919ae665f7d12be3b254b0df7?diff=unified
diff --git a/Makefile.in b/Makefile.in
index 65b0fd9..66ebbf3 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -22,7 +22,7 @@ CC      = @CC@
 INCLUDE = @INCLUDE@
 CFLAGS  = @BUILD_CFLAGS@
 EXTRA_CFLAGS = @EXTRA_CFLAGS@
-LDFLAGS = @BUILD_LDFLAGS@
+LDFLAGS = @BUILD_LDFLAGS@ -lrga
 EXTRA_LDFLAGS = @EXTRA_LDFLAGS@
 LIBTOOL = @LIBTOOL@
 INSTALL = @INSTALL@
diff --git a/src/video/kmsdrm/SDL_kmsdrmopengles.c b/src/video/kmsdrm/SDL_kmsdrmopengles.c
index cf59478..0a9b022 100644
--- a/src/video/kmsdrm/SDL_kmsdrmopengles.c
+++ b/src/video/kmsdrm/SDL_kmsdrmopengles.c
@@ -33,6 +33,9 @@
 #define EGL_PLATFORM_GBM_MESA 0x31D7
 #endif
 
+extern rga_info_t src_info;
+extern rga_info_t dst_info;
+
 /* EGL implementation of SDL OpenGL support */
 
 int
@@ -64,6 +67,7 @@ KMSDRM_GLES_SwapWindow(_THIS, SDL_Window * window) {
     SDL_VideoData *viddata = ((SDL_VideoData *)_this->driverdata);
     KMSDRM_FBInfo *fb_info;
     int ret, timeout;
+    struct gbm_bo* rga_buffer = NULL;
 
     /* Recreate the GBM / EGL surfaces if the display mode has changed */
     if (windata->egl_surface_dirty) {
@@ -104,11 +108,24 @@ KMSDRM_GLES_SwapWindow(_THIS, SDL_Window * window) {
         SDL_LogDebug(SDL_LOG_CATEGORY_VIDEO, "Locked GBM surface %p", (void *)windata->next_bo); */
     }
 
-    fb_info = KMSDRM_FBFromBO(_this, windata->next_bo);
+    if (src_info.fd) {
+        close(src_info.fd);
+    }
+    src_info.fd = KMSDRM_gbm_bo_get_fd(windata->next_bo);
+    dst_info.fd = viddata->rga_buffer_prime_fds[viddata->rga_buffer_index];
+    if (c_RkRgaBlit(&src_info, &dst_info, NULL) < 0) {
+        SDL_LogError(SDL_LOG_CATEGORY_VIDEO,
+                        "Failed to rga blit\n");
+    }
+
+    rga_buffer = viddata->rga_buffers[viddata->rga_buffer_index];
+    fb_info = KMSDRM_FBFromBO(_this, rga_buffer);
     if (!fb_info) {
         return 0;
     }
 
+    viddata->rga_buffer_index = (viddata->rga_buffer_index + 1) % RGA_BUFFERS_MAX;
+
     if (!windata->curr_bo) {
         /* On the first swap, immediately present the new front buffer. Before
            drmModePageFlip can be used the CRTC has to be configured to use
diff --git a/src/video/kmsdrm/SDL_kmsdrmsym.h b/src/video/kmsdrm/SDL_kmsdrmsym.h
index e3e48ef..aa240cc 100644
--- a/src/video/kmsdrm/SDL_kmsdrmsym.h
+++ b/src/video/kmsdrm/SDL_kmsdrmsym.h
@@ -88,6 +88,7 @@ SDL_KMSDRM_SYM(struct gbm_surface *,gbm_surface_create,(struct gbm_device *gbm,
 SDL_KMSDRM_SYM(void,gbm_surface_destroy,(struct gbm_surface *surf))
 SDL_KMSDRM_SYM(struct gbm_bo *,gbm_surface_lock_front_buffer,(struct gbm_surface *surf))
 SDL_KMSDRM_SYM(void,gbm_surface_release_buffer,(struct gbm_surface *surf, struct gbm_bo *bo))
+SDL_KMSDRM_SYM(int,gbm_bo_get_fd,(struct gbm_bo *bo))
 
 
 #undef SDL_KMSDRM_MODULE
diff --git a/src/video/kmsdrm/SDL_kmsdrmvideo.c b/src/video/kmsdrm/SDL_kmsdrmvideo.c
index a8d92b2..96f97af 100644
--- a/src/video/kmsdrm/SDL_kmsdrmvideo.c
+++ b/src/video/kmsdrm/SDL_kmsdrmvideo.c
@@ -42,6 +42,7 @@
 #include "SDL_kmsdrmopengles.h"
 #include "SDL_kmsdrmmouse.h"
 #include "SDL_kmsdrmdyn.h"
+#include <sys/ioctl.h>
 #include <sys/stat.h>
 #include <dirent.h>
 #include <errno.h>
@@ -49,6 +50,9 @@
 
 #define KMSDRM_DRI_PATH "/dev/dri/"
 
+rga_info_t src_info = {0};
+rga_info_t dst_info = {0};
+
 static int
 check_modestting(int devindex)
 {
@@ -254,6 +258,46 @@ KMSDRM_FBDestroyCallback(struct gbm_bo *bo, void *data)
     SDL_free(fb_info);
 }
 
+static void
+KMSDRM_InitRotateBuffer(_THIS, int frameWidth, int frameHeight)
+{
+    int l_frameHeight;
+    SDL_VideoData *viddata = ((SDL_VideoData *)_this->driverdata);
+
+    // initialize 2D raster graphic acceleration unit (RGA)
+    c_RkRgaInit();
+
+    l_frameHeight = frameHeight;
+    if(l_frameHeight % 32 != 0) {
+      l_frameHeight = (frameHeight + 32) & (~31);
+    }
+
+    // create buffers for RGA with adjusted stride
+    for (int i = 0; i < RGA_BUFFERS_MAX; ++i)
+    {
+        viddata->rga_buffers[i] = KMSDRM_gbm_bo_create(viddata->gbm,
+              frameWidth, l_frameHeight,
+              GBM_FORMAT_XRGB8888, GBM_BO_USE_SCANOUT | GBM_BO_USE_RENDERING);
+        assert(viddata->rga_buffers[i]);
+
+        viddata->rga_buffer_prime_fds[i] = KMSDRM_gbm_bo_get_fd(viddata->rga_buffers[i]);
+    }
+    viddata->rga_buffer_index = 0;
+
+    // setup rotation
+    src_info.fd = -1;
+    src_info.mmuFlag = 1;
+    src_info.rotation = HAL_TRANSFORM_ROT_270;
+
+    // swap width and height and adjust stride here because our source buffer is 480x854
+    rga_set_rect(&src_info.rect, 0, 0, frameHeight, frameWidth, l_frameHeight, frameWidth, RK_FORMAT_BGRA_8888);
+
+    dst_info.fd = -1;
+    dst_info.mmuFlag = 1;
+
+    rga_set_rect(&dst_info.rect, 0, 0, frameWidth, frameHeight, frameWidth, frameHeight, RK_FORMAT_BGRA_8888);
+}
+
 KMSDRM_FBInfo *
 KMSDRM_FBFromBO(_THIS, struct gbm_bo *bo)
 {
@@ -387,8 +431,8 @@ KMSDRM_CreateSurfaces(_THIS, SDL_Window * window)
     SDL_VideoData *viddata = ((SDL_VideoData *)_this->driverdata);
     SDL_WindowData *windata = (SDL_WindowData *)window->driverdata;
     SDL_DisplayData *dispdata = (SDL_DisplayData *) SDL_GetDisplayForWindow(window)->driverdata;
-    Uint32 width = dispdata->mode.hdisplay;
-    Uint32 height = dispdata->mode.vdisplay;
+    Uint32 width = dispdata->mode.vdisplay;
+    Uint32 height = dispdata->mode.hdisplay;
     Uint32 surface_fmt = GBM_FORMAT_XRGB8888;
     Uint32 surface_flags = GBM_BO_USE_SCANOUT | GBM_BO_USE_RENDERING;
 #if SDL_VIDEO_OPENGL_EGL
@@ -599,8 +643,8 @@ KMSDRM_VideoInit(_THIS)
 
     /* Setup the single display that's available */
 
-    display.desktop_mode.w = dispdata->mode.hdisplay;
-    display.desktop_mode.h = dispdata->mode.vdisplay;
+    display.desktop_mode.w = dispdata->mode.vdisplay;
+    display.desktop_mode.h = dispdata->mode.hdisplay;
     display.desktop_mode.refresh_rate = dispdata->mode.vrefresh;
 #if 1
     display.desktop_mode.format = SDL_PIXELFORMAT_ARGB8888;
@@ -730,8 +774,8 @@ KMSDRM_GetDisplayModes(_THIS, SDL_VideoDisplay * display)
           modedata->mode_index = i;
         }
 
-        mode.w = conn->modes[i].hdisplay;
-        mode.h = conn->modes[i].vdisplay;
+        mode.w = conn->modes[i].vdisplay;
+        mode.h = conn->modes[i].hdisplay;
         mode.refresh_rate = conn->modes[i].vrefresh;
         mode.format = SDL_PIXELFORMAT_ARGB8888;
         mode.driverdata = modedata;
@@ -782,6 +826,7 @@ KMSDRM_CreateWindow(_THIS, SDL_Window * window)
 {
     SDL_VideoData *viddata = (SDL_VideoData *)_this->driverdata;
     SDL_WindowData *windata;
+    SDL_DisplayData *data;
 
 #if SDL_VIDEO_OPENGL_EGL
     if (!_this->egl_data) {
@@ -836,6 +881,9 @@ KMSDRM_CreateWindow(_THIS, SDL_Window * window)
     SDL_SetMouseFocus(window);
     SDL_SetKeyboardFocus(window);
 
+    data = (SDL_DisplayData *) SDL_GetDisplayForWindow(window)->driverdata;
+    KMSDRM_InitRotateBuffer(_this, data->mode.hdisplay, data->mode.vdisplay);
+
     return 0;
 
 error:
@@ -873,6 +921,13 @@ KMSDRM_DestroyWindow(_THIS, SDL_Window * window)
     window->driverdata = NULL;
 
     SDL_free(windata);
+    for (int i = 0; i < RGA_BUFFERS_MAX; ++i) {
+        close(viddata->rga_buffer_prime_fds[i]);
+    }
+    if (src_info.fd) {
+        close(src_info.fd);
+    }
+    c_RkRgaDeInit();
 }
 
 int
diff --git a/src/video/kmsdrm/SDL_kmsdrmvideo.h b/src/video/kmsdrm/SDL_kmsdrmvideo.h
index 63dcf6f..f9ce2eb 100644
--- a/src/video/kmsdrm/SDL_kmsdrmvideo.h
+++ b/src/video/kmsdrm/SDL_kmsdrmvideo.h
@@ -34,6 +34,10 @@
 #if SDL_VIDEO_OPENGL_EGL
 #include <EGL/egl.h>
 #endif
+#include <rga/RgaApi.h>
+#include <assert.h>
+
+#define RGA_BUFFERS_MAX (3)
 
 typedef struct SDL_VideoData
 {
@@ -44,6 +48,9 @@ typedef struct SDL_VideoData
     SDL_Window **windows;
     int max_windows;
     int num_windows;
+    struct gbm_bo* rga_buffers[RGA_BUFFERS_MAX];
+    int rga_buffer_prime_fds[RGA_BUFFERS_MAX];
+    int rga_buffer_index;
 } SDL_VideoData;
 
 
