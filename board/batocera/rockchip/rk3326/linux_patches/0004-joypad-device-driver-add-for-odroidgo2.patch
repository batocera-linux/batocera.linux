From e426d41a4fbb77e495c424ca1bd90456c245c73a Mon Sep 17 00:00:00 2001
Date: Wed, 7 Feb 2024 12:02:49 -0400
Subject: [PATCH] joypad device driver add for odroidgo2

---
 .../boot/dts/rockchip/rk3326-odroid-go.dtsi   |  87 --
 .../dts/rockchip/rk3326-odroid-go2-v11.dts    | 210 ++++-
 .../boot/dts/rockchip/rk3326-odroid-go2.dts   | 184 +++-
 drivers/input/joystick/Kconfig                |   5 +
 drivers/input/joystick/Makefile               |   1 +
 drivers/input/joystick/odroidgo2-joypad.c     | 882 ++++++++++++++++++
 6 files changed, 1224 insertions(+), 145 deletions(-)
 create mode 100644 drivers/input/joystick/odroidgo2-joypad.c

diff --git a/arch/arm64/boot/dts/rockchip/rk3326-odroid-go.dtsi b/arch/arm64/boot/dts/rockchip/rk3326-odroid-go.dtsi
index 80fc53c..1e21c8c 100644
--- a/arch/arm64/boot/dts/rockchip/rk3326-odroid-go.dtsi
+++ b/arch/arm64/boot/dts/rockchip/rk3326-odroid-go.dtsi
@@ -27,93 +27,6 @@ backlight: backlight {
 		pwms = <&pwm1 0 25000 0>;
 	};
 
-	builtin_gamepad: gpio-keys {
-		compatible = "gpio-keys";
-		pinctrl-names = "default";
-		pinctrl-0 = <&btn_pins>;
-
-		button-sw1 {
-			gpios = <&gpio1 RK_PB4 GPIO_ACTIVE_LOW>;
-			label = "DPAD-UP";
-			linux,code = <BTN_DPAD_UP>;
-		};
-		button-sw2 {
-			gpios = <&gpio1 RK_PB5 GPIO_ACTIVE_LOW>;
-			label = "DPAD-DOWN";
-			linux,code = <BTN_DPAD_DOWN>;
-		};
-		button-sw3 {
-			gpios = <&gpio1 RK_PB6 GPIO_ACTIVE_LOW>;
-			label = "DPAD-LEFT";
-			linux,code = <BTN_DPAD_LEFT>;
-		};
-		button-sw4 {
-			gpios = <&gpio1 RK_PB7 GPIO_ACTIVE_LOW>;
-			label = "DPAD-RIGHT";
-			linux,code = <BTN_DPAD_RIGHT>;
-		};
-		button-sw5 {
-			gpios = <&gpio1 RK_PA2 GPIO_ACTIVE_LOW>;
-			label = "BTN-A";
-			linux,code = <BTN_EAST>;
-		};
-		button-sw6 {
-			gpios = <&gpio1 RK_PA5 GPIO_ACTIVE_LOW>;
-			label = "BTN-B";
-			linux,code = <BTN_SOUTH>;
-		};
-		button-sw7 {
-			gpios = <&gpio1 RK_PA6 GPIO_ACTIVE_LOW>;
-			label = "BTN-Y";
-			linux,code = <BTN_WEST>;
-		};
-		button-sw8 {
-			gpios = <&gpio1 RK_PA7 GPIO_ACTIVE_LOW>;
-			label = "BTN-X";
-			linux,code = <BTN_NORTH>;
-		};
-		btn_f1: button-sw9 {
-			gpios = <&gpio2 RK_PA0 GPIO_ACTIVE_LOW>;
-			label = "F1";
-			linux,code = <BTN_TRIGGER_HAPPY1>;
-		};
-		btn_f2: button-sw10 {
-			gpios = <&gpio2 RK_PA1 GPIO_ACTIVE_LOW>;
-			label = "F2";
-			linux,code = <BTN_TRIGGER_HAPPY2>;
-		};
-		btn_f3: button-sw11 {
-			gpios = <&gpio2 RK_PA2 GPIO_ACTIVE_LOW>;
-			label = "F3";
-			linux,code = <BTN_TRIGGER_HAPPY3>;
-		};
-		btn_f4: button-sw12 {
-			gpios = <&gpio2 RK_PA3 GPIO_ACTIVE_LOW>;
-			label = "F4";
-			linux,code = <BTN_TRIGGER_HAPPY4>;
-		};
-		btn_f5: button-sw13 {
-			gpios = <&gpio2 RK_PA4 GPIO_ACTIVE_LOW>;
-			label = "F5";
-			linux,code = <BTN_TRIGGER_HAPPY5>;
-		};
-		btn_f6: button-sw14 {
-			gpios = <&gpio2 RK_PA5 GPIO_ACTIVE_LOW>;
-			label = "F6";
-			linux,code = <BTN_TRIGGER_HAPPY6>;
-		};
-		button-sw15 {
-			gpios = <&gpio2 RK_PA6 GPIO_ACTIVE_LOW>;
-			label = "TOP-LEFT";
-			linux,code = <BTN_TL>;
-		};
-		button-sw16 {
-			gpios = <&gpio2 RK_PA7 GPIO_ACTIVE_LOW>;
-			label = "TOP-RIGHT";
-			linux,code = <BTN_TR>;
-		};
-	};
-
 	/* led-1 is wired directly to output of always-on regulator */
 
 	gpio_led: gpio-leds {
diff --git a/arch/arm64/boot/dts/rockchip/rk3326-odroid-go2-v11.dts b/arch/arm64/boot/dts/rockchip/rk3326-odroid-go2-v11.dts
index d94ac81..0a65170 100644
--- a/arch/arm64/boot/dts/rockchip/rk3326-odroid-go2-v11.dts
+++ b/arch/arm64/boot/dts/rockchip/rk3326-odroid-go2-v11.dts
@@ -16,29 +16,180 @@ aliases {
 		mmc1 = &sdio;
 	};
 
-	analog_sticks: adc-joystick {
-		compatible = "adc-joystick";
-		io-channels = <&saradc 1>,
-			      <&saradc 2>;
-		poll-interval = <60>;
-		#address-cells = <1>;
-		#size-cells = <0>;
-
-		axis@0 {
-			reg = <0>;
-			abs-flat = <10>;
-			abs-fuzz = <10>;
-			abs-range = <172 772>;
-			linux,code = <ABS_X>;
-			};
-
-		axis@1 {
-			reg = <1>;
-			abs-flat = <10>;
-			abs-fuzz = <10>;
-			abs-range = <278 815>;
-			linux,code = <ABS_Y>;
-		};
+	joypad: odroidgo2-joypad {
+			compatible = "odroidgo2-joypad";
+
+			joypad-name = "GO-Advance Gamepad (rev 1.1)";
+			joypad-product = <0x1000>;
+			joypad-revision = <0x0101>;
+
+			/*
+				- odroidgo2-joypad sysfs list -
+		* for poll device interval(ms)
+		/sys/devices/platform/odroidgo2_joypad/poll_interval [rw]
+				* for button-adc-fuzz
+		/sys/devices/platform/odroidgo2_joypad/adc_fuzz [r]
+				* for button-adc-flat
+		/sys/devices/platform/odroidgo2_joypad/adc_flat [r]
+
+		* for report control(1:enable, 0:disable)
+		/sys/devices/platform/odroidgo2_joypad/enable [rw]
+		* for adc calibration value setup(1:current adcs value -> cal value)
+		/sys/devices/platform/odroidgo2_joypad/adc_cal [rw]
+			*/
+
+	/* gpio pincontrol setup */
+			pinctrl-names = "default";
+			pinctrl-0 = <&btn_pins>;
+
+	/* JOY_X, JOY_Y Channel define */
+	io-channel-names = "joy_x", "joy_y";
+	io-channels = <&saradc 1>, <&saradc 2>;
+
+	/* adc channel count */
+	button-adc-count = <2>;
+
+	/* adc calculate scale */
+	button-adc-scale = <2>;
+
+	/* adc deadzone range  */
+	button-adc-deadzone = <20>;
+
+	/*
+		joy-stick voltage range
+		/sys/devices/platform/ff288000.saradc/iio:device0
+		adc-x : in_voltage1_raw
+		adc-y : in_voltage2_raw
+
+		range calculate.
+		(adc raw max value - adc raw min value) * scale * 1.7515
+	*/
+	button-adc-x-range = <1800>;
+	button-adc-y-range = <1800>;
+
+	/*
+		specifies fuzz value that is used to filter noise from
+		the event stream.
+	*/
+	button-adc-fuzz = <32>;
+	button-adc-flat = <32>;
+
+	/* poll device interval (ms), adc read interval */
+	poll-interval = <10>;
+
+	/* gpio button auto repeat set value : default disable */
+	/*
+		autorepeat;
+	*/
+
+	/*
+			*** ODROIDGO2-Advance Switch layoout ***
+	|------------------------------------------------|
+	| sw15                                      sw16 |
+	|        sw20                         sw21       |
+	|------------------------------------------------|
+	|     sw1      |-------------------|      sw8    |
+	|  sw3   sw4   |                   |   sw7   sw5 |
+	|     sw2      |    LCD Display    |      sw6    |
+	|              |                   |             |
+	|              |-------------------|             |
+	|         sw9 sw10   sw11 sw12   sw13 sw14       |
+	|------------------------------------------------|
+	*/
+			/*
+				joypad driver is poll-device driver.
+				poll-device is does not support wakeup-source.
+	*/
+			sw1 {
+					gpios = <&gpio1 RK_PB4 GPIO_ACTIVE_LOW>;
+					label = "GPIO DPAD-UP";
+					linux,code = <BTN_DPAD_UP>; // 0x220
+			};
+			sw2 {
+					gpios = <&gpio1 RK_PB5 GPIO_ACTIVE_LOW>;
+					label = "GPIO DPAD-DOWN";
+					linux,code = <BTN_DPAD_DOWN>; // 0x221
+			};
+			sw3 {
+					gpios = <&gpio1 RK_PB6 GPIO_ACTIVE_LOW>;
+					label = "GPIO DPAD-LEFT";
+					linux,code = <BTN_DPAD_LEFT>; // 0x222
+			};
+			sw4 {
+					gpios = <&gpio1 RK_PB7 GPIO_ACTIVE_LOW>;
+					label = "GPIO DPAD-RIGHT";
+					linux,code = <BTN_DPAD_RIGHT>; // 0x223
+			};
+			sw5 {
+					gpios = <&gpio1 RK_PA2 GPIO_ACTIVE_LOW>;
+					label = "GPIO KEY BTN-A";
+					linux,code = <BTN_EAST>; // 0x131
+			};
+			sw6 {
+					gpios = <&gpio1 RK_PA5 GPIO_ACTIVE_LOW>;
+					label = "GPIO BTN-B";
+					linux,code = <BTN_SOUTH>; // 0x130
+			};
+			sw7 {
+					gpios = <&gpio1 RK_PA6 GPIO_ACTIVE_LOW>;
+					label = "GPIO BTN-Y";
+					linux,code = <BTN_WEST>; // 0x134
+			};
+			sw8 {
+					gpios = <&gpio1 RK_PA7 GPIO_ACTIVE_LOW>;
+					label = "GPIO BTN-X";
+					linux,code = <BTN_NORTH>; // 0x133
+			};
+			sw9 {
+					gpios = <&gpio2 RK_PA0 GPIO_ACTIVE_LOW>;
+					label = "GPIO F1";
+					linux,code = <BTN_TRIGGER_HAPPY1>; // 0x2c0
+			};
+			sw10 {
+					gpios = <&gpio2 RK_PA1 GPIO_ACTIVE_LOW>;
+					label = "GPIO F2";
+					linux,code = <BTN_TRIGGER_HAPPY2>; // 0x2c1
+			};
+			sw11 {
+					gpios = <&gpio2 RK_PA2 GPIO_ACTIVE_LOW>;
+					label = "GPIO F3";
+					linux,code = <BTN_TRIGGER_HAPPY3>; // 0x2c2
+			};
+			sw12 {
+					gpios = <&gpio2 RK_PA3 GPIO_ACTIVE_LOW>;
+					label = "GPIO F4";
+					linux,code = <BTN_TRIGGER_HAPPY4>; // 0x2c3
+			};
+			sw13 {
+					gpios = <&gpio2 RK_PA4 GPIO_ACTIVE_LOW>;
+					label = "GPIO F5";
+					linux,code = <BTN_TRIGGER_HAPPY5>; // 0x2c4
+			};
+			sw14 {
+					gpios = <&gpio2 RK_PA5 GPIO_ACTIVE_LOW>;
+					label = "GPIO F6";
+					linux,code = <BTN_TRIGGER_HAPPY6>; // 0x13c
+			};
+			sw15 {
+					gpios = <&gpio2 RK_PA6 GPIO_ACTIVE_LOW>;
+					label = "GPIO TOP-LEFT";
+					linux,code = <BTN_TL>; // 0x02
+			};
+			sw16 {
+					gpios = <&gpio2 RK_PA7 GPIO_ACTIVE_LOW>;
+					label = "GPIO TOP-RIGHT";
+					linux,code = <BTN_TR>; // 0x05
+			};
+			sw20 {
+					gpios = <&gpio3 RK_PB7 GPIO_ACTIVE_LOW>;
+					label = "GPIO TOP-LEFT2";
+					linux,code = <BTN_TL2>;
+			};
+			sw21 {
+					gpios = <&gpio3 RK_PB2 GPIO_ACTIVE_LOW>;
+					label = "GPIO TOP-RIGHT2";
+					linux,code = <BTN_TR2>;
+			};
 	};
 
 	battery: battery {
@@ -68,19 +219,6 @@ wifi_pwrseq: wifi-pwrseq {
 	};
 };
 
-&builtin_gamepad {
-	button-sw20 {
-		gpios = <&gpio3 RK_PB7 GPIO_ACTIVE_LOW>;
-		label = "TOP-LEFT 2";
-		linux,code = <BTN_TL2>;
-	};
-	button-sw21 {
-		gpios = <&gpio3 RK_PB2 GPIO_ACTIVE_LOW>;
-		label = "TOP-RIGHT 2";
-		linux,code = <BTN_TR2>;
-	};
-};
-
 &internal_display {
 	compatible = "elida,kd35t133";
 	iovcc-supply = <&vcc_lcd>;
diff --git a/arch/arm64/boot/dts/rockchip/rk3326-odroid-go2.dts b/arch/arm64/boot/dts/rockchip/rk3326-odroid-go2.dts
index aa6f5b1..0723949 100644
--- a/arch/arm64/boot/dts/rockchip/rk3326-odroid-go2.dts
+++ b/arch/arm64/boot/dts/rockchip/rk3326-odroid-go2.dts
@@ -12,28 +12,168 @@ / {
 	model = "ODROID-GO Advance";
 	compatible = "hardkernel,rk3326-odroid-go2", "rockchip,rk3326";
 
-	analog_sticks: adc-joystick {
-		compatible = "adc-joystick";
-		io-channels = <&saradc 1>,
-			      <&saradc 2>;
-		poll-interval = <60>;
-		#address-cells = <1>;
-		#size-cells = <0>;
-
-		axis@0 {
-			reg = <0>;
-			abs-flat = <10>;
-			abs-fuzz = <10>;
-			abs-range = <172 772>;
-			linux,code = <ABS_X>;
-		};
-
-		axis@1 {
-			reg = <1>;
-			abs-flat = <10>;
-			abs-fuzz = <10>;
-			abs-range = <278 815>;
-			linux,code = <ABS_Y>;
+	joypad: odroidgo2-joypad {
+			compatible = "odroidgo2-joypad";
+
+			joypad-name = "GO-Advance Gamepad";
+			joypad-product = <0x1000>;
+			joypad-revision = <0x0100>;
+
+			/*
+				- odroidgo2-joypad sysfs list -
+		* for poll device interval(ms)
+		/sys/devices/platform/odroidgo2_joypad/poll_interval [rw]
+				* for button-adc-fuzz
+		/sys/devices/platform/odroidgo2_joypad/adc_fuzz [r]
+				* for button-adc-flat
+		/sys/devices/platform/odroidgo2_joypad/adc_flat [r]
+
+		* for report control(1:enable, 0:disable)
+		/sys/devices/platform/odroidgo2_joypad/enable [rw]
+		* for adc calibration value setup(1:current adcs value -> cal value)
+		/sys/devices/platform/odroidgo2_joypad/adc_cal [rw]
+			*/
+
+	/* gpio pincontrol setup */
+			pinctrl-names = "default";
+			pinctrl-0 = <&btn_pins>;
+
+	/* JOY_X, JOY_Y Channel define */
+	io-channel-names = "joy_x", "joy_y";
+	io-channels = <&saradc 1>, <&saradc 2>;
+
+	/* adc channel count */
+	button-adc-count = <2>;
+
+	/* adc calculate scale */
+	button-adc-scale = <2>;
+
+	/* adc deadzone range  */
+	button-adc-deadzone = <20>;
+
+	/*
+		joy-stick voltage range
+		/sys/devices/platform/ff288000.saradc/iio:device0
+		adc-x : in_voltage1_raw
+		adc-y : in_voltage2_raw
+
+		range calculate.
+		(adc raw max value - adc raw min value) * scale * 1.7515
+	*/
+	button-adc-x-range = <1800>;
+	button-adc-y-range = <1800>;
+
+	/*
+		specifies fuzz value that is used to filter noise from
+		the event stream.
+	*/
+	button-adc-fuzz = <32>;
+	button-adc-flat = <32>;
+
+	/* poll device interval (ms), adc read interval */
+	poll-interval = <10>;
+
+	/* gpio button auto repeat set value : default disable */
+	/*
+		autorepeat;
+	*/
+
+	/*
+			*** ODROIDGO2-Advance Switch layoout ***
+	|------------------------------------------------|
+	| sw15                                      sw16 |
+	|------------------------------------------------|
+	|     sw1      |-------------------|      sw8    |
+	|  sw3   sw4   |                   |   sw7   sw5 |
+	|     sw2      |    LCD Display    |      sw6    |
+	|              |                   |             |
+	|              |-------------------|             |
+	|         sw9 sw10   sw11 sw12   sw13 sw14       |
+	|------------------------------------------------|
+	*/
+		/*
+			joypad driver is poll-device driver.
+			poll-device is does not support wakeup-source.
+		*/
+		sw1 {
+				gpios = <&gpio1 RK_PB4 GPIO_ACTIVE_LOW>;
+				label = "GPIO DPAD-UP";
+				linux,code = <BTN_DPAD_UP>; // 0x220
+		};
+		sw2 {
+				gpios = <&gpio1 RK_PB5 GPIO_ACTIVE_LOW>;
+				label = "GPIO DPAD-DOWN";
+				linux,code = <BTN_DPAD_DOWN>; // 0x221
+		};
+		sw3 {
+				gpios = <&gpio1 RK_PB6 GPIO_ACTIVE_LOW>;
+				label = "GPIO DPAD-LEFT";
+				linux,code = <BTN_DPAD_LEFT>; // 0x222
+		};
+		sw4 {
+				gpios = <&gpio1 RK_PB7 GPIO_ACTIVE_LOW>;
+				label = "GPIO DPAD-RIGHT";
+				linux,code = <BTN_DPAD_RIGHT>; // 0x223
+		};
+		sw5 {
+				gpios = <&gpio1 RK_PA2 GPIO_ACTIVE_LOW>;
+				label = "GPIO KEY BTN-A";
+				linux,code = <BTN_EAST>; // 0x131
+		};
+		sw6 {
+				gpios = <&gpio1 RK_PA5 GPIO_ACTIVE_LOW>;
+				label = "GPIO BTN-B";
+				linux,code = <BTN_SOUTH>; // 0x130
+		};
+		sw7 {
+				gpios = <&gpio1 RK_PA6 GPIO_ACTIVE_LOW>;
+				label = "GPIO BTN-Y";
+				linux,code = <BTN_WEST>; // 0x134
+		};
+		sw8 {
+				gpios = <&gpio1 RK_PA7 GPIO_ACTIVE_LOW>;
+				label = "GPIO BTN-X";
+				linux,code = <BTN_NORTH>; // 0x133
+		};
+		sw9 {
+				gpios = <&gpio2 RK_PA0 GPIO_ACTIVE_LOW>;
+				label = "GPIO F1";
+				linux,code = <BTN_TRIGGER_HAPPY1>; // 0x2c0
+		};
+		sw10 {
+				gpios = <&gpio2 RK_PA1 GPIO_ACTIVE_LOW>;
+				label = "GPIO F2";
+				linux,code = <BTN_TRIGGER_HAPPY2>; // 0x2c1
+		};
+		sw11 {
+				gpios = <&gpio2 RK_PA2 GPIO_ACTIVE_LOW>;
+				label = "GPIO F3";
+				linux,code = <BTN_TRIGGER_HAPPY3>; // 0x2c2
+		};
+		sw12 {
+				gpios = <&gpio2 RK_PA3 GPIO_ACTIVE_LOW>;
+				label = "GPIO F4";
+				linux,code = <BTN_TRIGGER_HAPPY4>; // 0x2c3
+		};
+		sw13 {
+				gpios = <&gpio2 RK_PA4 GPIO_ACTIVE_LOW>;
+				label = "GPIO F5";
+				linux,code = <BTN_TRIGGER_HAPPY5>; // 0x2c4
+		};
+		sw14 {
+				gpios = <&gpio2 RK_PA5 GPIO_ACTIVE_LOW>;
+				label = "GPIO F6";
+				linux,code = <BTN_TRIGGER_HAPPY6>; // 0x13c
+		};
+		sw15 {
+				gpios = <&gpio2 RK_PA6 GPIO_ACTIVE_LOW>;
+				label = "GPIO TOP-LEFT";
+				linux,code = <BTN_TL>; // 0x02
+		};
+		sw16 {
+				gpios = <&gpio2 RK_PA7 GPIO_ACTIVE_LOW>;
+				label = "GPIO TOP-RIGHT";
+				linux,code = <BTN_TR>; // 0x05
 		};
 	};
 
diff --git a/drivers/input/joystick/Kconfig b/drivers/input/joystick/Kconfig
index 90a0e6a..dd5f801 100644
--- a/drivers/input/joystick/Kconfig
+++ b/drivers/input/joystick/Kconfig
@@ -54,6 +54,11 @@ config JOYSTICK_ADC
 	  To compile this driver as a module, choose M here: the
 	  module will be called adc-joystick.
 
+config JOYSTICK_ODROIDGO2
+	tristate "OdroidGO2-Advance joypad driver"
+	help
+	  Made for OdroidGO2-Advance.
+
 config JOYSTICK_ADI
 	tristate "Logitech ADI digital joysticks and gamepads"
 	select GAMEPORT
diff --git a/drivers/input/joystick/Makefile b/drivers/input/joystick/Makefile
index 65e4b4c..cb3e7c1 100644
--- a/drivers/input/joystick/Makefile
+++ b/drivers/input/joystick/Makefile
@@ -7,6 +7,7 @@
 
 obj-$(CONFIG_JOYSTICK_A3D)		+= a3d.o
 obj-$(CONFIG_JOYSTICK_ADC)		+= adc-joystick.o
+obj-$(CONFIG_JOYSTICK_ODROIDGO2)	+= odroidgo2-joypad.o
 obj-$(CONFIG_JOYSTICK_ADI)		+= adi.o
 obj-$(CONFIG_JOYSTICK_AMIGA)		+= amijoy.o
 obj-$(CONFIG_JOYSTICK_AS5011)		+= as5011.o
diff --git a/drivers/input/joystick/odroidgo2-joypad.c b/drivers/input/joystick/odroidgo2-joypad.c
new file mode 100644
index 0000000..7efbb39
--- /dev/null
+++ b/drivers/input/joystick/odroidgo2-joypad.c
@@ -0,0 +1,882 @@
+/*
+ * SARADC joystick & GPIO Button driver for Linux(Hardkernel ODROIDGO2-Advance)
+ */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ *
+ * Should you need to contact me, the author, you can do so either by
+ * e-mail - mail your message to <vojtech@ucw.cz>, or by paper mail:
+ * Vojtech Pavlik, Simunkova 1594, Prague 8, 182 00 Czech Republic
+ */
+
+/*----------------------------------------------------------------------------*/
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/input.h>
+#include <linux/input-polldev.h>
+#include <linux/ioport.h>
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+#include <linux/gpio/consumer.h>
+#include <linux/gpio_keys.h>
+#include <linux/iio/consumer.h>
+#include <linux/iio/types.h>
+#include <linux/property.h>
+#include <linux/of_gpio.h>
+
+/*----------------------------------------------------------------------------*/
+#define DRV_NAME "odroidgo2_joypad"
+
+/*----------------------------------------------------------------------------*/
+struct bt_adc {
+	/* IIO ADC Channel */
+	struct iio_channel *channel;
+	/* report value (mV) */
+	int old_value;
+	/* report type */
+	int report_type;
+	/* input device init value (mV) */
+	int max, min;
+	/* calibrated adc value */
+	int cal;
+	/*  adc scale value */
+	int scale;
+	/* invert report */
+	bool invert;
+};
+
+struct bt_gpio {
+	/* GPIO Request label */
+	const char *label;
+	/* GPIO Number */
+	int num;
+	/* report type */
+	int report_type;
+	/* report linux code */
+	int linux_code;
+	/* prev button value */
+	bool old_value;
+	/* button press level */
+	bool active_level;
+};
+
+struct joypad {
+	struct device *dev;
+	int poll_interval;
+
+	/* report enable/disable */
+	bool enable;
+
+	/* report reference point */
+	bool invert_absx;
+	bool invert_absy;
+
+	/* report interval (ms) */
+	int bt_gpio_count;
+	struct bt_gpio *gpios;
+	/* button auto repeat */
+	int auto_repeat;
+
+	/* report threshold (mV) */
+	int bt_adc_fuzz, bt_adc_flat;
+	int bt_adc_x_range, bt_adc_y_range;
+	/* adc read value scale */
+	int bt_adc_scale;
+	/* joystick deadzone control */
+	int bt_adc_deadzone;
+	int bt_adc_count;
+	struct bt_adc *adcs;
+
+	struct mutex lock;
+};
+
+/*----------------------------------------------------------------------------*/
+//
+// set to the value in the boot.ini file. (if exist)
+//
+/*----------------------------------------------------------------------------*/
+static unsigned int g_button_adc_x_range = 0;
+static unsigned int g_button_adc_y_range = 0;
+static unsigned int g_button_adc_fuzz = 0;
+static unsigned int g_button_adc_flat = 0;
+static unsigned int g_button_adc_scale = 0;
+static unsigned int g_button_adc_deadzone = 0;
+
+static int __init button_adcx_range_setup(char *str)
+{
+        if (!str)
+                return -EINVAL;
+
+	g_button_adc_x_range = simple_strtoul(str, NULL, 10);
+
+        return 0;
+}
+__setup("button-adc-x-range=", button_adcx_range_setup);
+
+static int __init button_adcy_range_setup(char *str)
+{
+        if (!str)
+                return -EINVAL;
+
+	g_button_adc_y_range = simple_strtoul(str, NULL, 10);
+
+        return 0;
+}
+__setup("button-adc-y-range=", button_adcy_range_setup);
+
+static int button_adc_fuzz(char *str)
+{
+        if (!str)
+                return -EINVAL;
+	g_button_adc_fuzz = simple_strtoul(str, NULL, 10);
+	return 0;
+}
+__setup("button-adc-fuzz=", button_adc_fuzz);
+
+static int button_adc_flat(char *str)
+{
+        if (!str)
+                return -EINVAL;
+	g_button_adc_flat = simple_strtoul(str, NULL, 10);
+	return 0;
+}
+__setup("button-adc-flat=", button_adc_flat);
+
+static int button_adc_scale(char *str)
+{
+        if (!str)
+                return -EINVAL;
+	g_button_adc_scale = simple_strtoul(str, NULL, 10);
+	return 0;
+}
+__setup("button-adc-scale=", button_adc_scale);
+
+static int button_adc_deadzone(char *str)
+{
+        if (!str)
+                return -EINVAL;
+	g_button_adc_deadzone = simple_strtoul(str, NULL, 10);
+	return 0;
+}
+__setup("button-adc-deadzone=", button_adc_deadzone);
+
+/*----------------------------------------------------------------------------*/
+/*----------------------------------------------------------------------------*/
+static int joypad_adc_read(struct bt_adc *adc)
+{
+	int value;
+
+	if (iio_read_channel_processed(adc->channel, &value))
+		return 0;
+
+	value *= adc->scale;
+
+	return (adc->invert ? (adc->max - value) : value);
+}
+
+/*----------------------------------------------------------------------------*/
+/*----------------------------------------------------------------------------*/
+/*
+ * ATTRIBUTES:
+ *
+ * /sys/devices/platform/odroidgo2_joypad/poll_interval [rw]
+ */
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_store_poll_interval(struct device *dev,
+				      struct device_attribute *attr,
+				      const char *buf,
+				      size_t count)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	mutex_lock(&joypad->lock);
+	joypad->poll_interval = simple_strtoul(buf, NULL, 10);
+	mutex_unlock(&joypad->lock);
+
+	return count;
+}
+
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_show_poll_interval(struct device *dev,
+				     struct device_attribute *attr,
+				     char *buf)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	return sprintf(buf, "%d\n", joypad->poll_interval);
+}
+
+/*----------------------------------------------------------------------------*/
+static DEVICE_ATTR(poll_interval, S_IWUSR | S_IRUGO,
+		   joypad_show_poll_interval,
+		   joypad_store_poll_interval);
+
+/*----------------------------------------------------------------------------*/
+/*
+ * ATTRIBUTES:
+ *
+ * /sys/devices/platform/odroidgo2_joypad/adc_fuzz [r]
+ */
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_show_adc_fuzz(struct device *dev,
+				     struct device_attribute *attr,
+				     char *buf)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	return sprintf(buf, "%d\n", joypad->bt_adc_fuzz);
+}
+
+/*----------------------------------------------------------------------------*/
+static DEVICE_ATTR(adc_fuzz, S_IWUSR | S_IRUGO,
+		   joypad_show_adc_fuzz,
+		   NULL);
+
+/*----------------------------------------------------------------------------*/
+/*
+ * ATTRIBUTES:
+ *
+ * /sys/devices/platform/odroidgo2_joypad/adc_flat [r]
+ */
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_show_adc_flat(struct device *dev,
+				     struct device_attribute *attr,
+				     char *buf)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	return sprintf(buf, "%d\n", joypad->bt_adc_flat);
+}
+
+/*----------------------------------------------------------------------------*/
+static DEVICE_ATTR(adc_flat, S_IWUSR | S_IRUGO,
+		   joypad_show_adc_flat,
+		   NULL);
+
+/*----------------------------------------------------------------------------*/
+/*
+ * ATTRIBUTES:
+ *
+ * /sys/devices/platform/odroidgo2_joypad/enable [rw]
+ */
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_store_enable(struct device *dev,
+				      struct device_attribute *attr,
+				      const char *buf,
+				      size_t count)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	mutex_lock(&joypad->lock);
+	joypad->enable = simple_strtoul(buf, NULL, 10);
+	mutex_unlock(&joypad->lock);
+
+	return count;
+}
+
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_show_enable(struct device *dev,
+				     struct device_attribute *attr,
+				     char *buf)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	return sprintf(buf, "%d\n", joypad->enable);
+}
+
+/*----------------------------------------------------------------------------*/
+static DEVICE_ATTR(enable, S_IWUSR | S_IRUGO,
+		   joypad_show_enable,
+		   joypad_store_enable);
+
+/*----------------------------------------------------------------------------*/
+/*
+ * ATTRIBUTES:
+ *
+ * /sys/devices/platform/odroidgo2_joypad/adc_cal [rw]
+ */
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_store_adc_cal(struct device *dev,
+				      struct device_attribute *attr,
+				      const char *buf,
+				      size_t count)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+	bool calibration;
+
+	calibration = simple_strtoul(buf, NULL, 10);
+
+	if (calibration) {
+		int nbtn;
+
+		mutex_lock(&joypad->lock);
+		for (nbtn = 0; nbtn < joypad->bt_adc_count; nbtn++) {
+			struct bt_adc *adc = &joypad->adcs[nbtn];
+
+			adc->cal = joypad_adc_read(adc);
+			if (!adc->cal) {
+				dev_err(joypad->dev, "%s : saradc channels[%d]!\n",
+					__func__, nbtn);
+				continue;
+			}
+			adc->old_value = adc->cal;
+		}
+		mutex_unlock(&joypad->lock);
+	}
+	return count;
+}
+
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_show_adc_cal(struct device *dev,
+				     struct device_attribute *attr,
+				     char *buf)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+	int nbtn;
+	ssize_t pos;
+
+	for (nbtn = 0, pos = 0; nbtn < joypad->bt_adc_count; nbtn++) {
+		struct bt_adc *adc = &joypad->adcs[nbtn];
+		pos += sprintf(&buf[pos], "adc[%d]->cal = %d ",
+				nbtn, adc->cal);
+	}
+	pos += sprintf(&buf[pos], "\n");
+	return pos;
+}
+
+/*----------------------------------------------------------------------------*/
+static DEVICE_ATTR(adc_cal, S_IWUSR | S_IRUGO,
+		   joypad_show_adc_cal,
+		   joypad_store_adc_cal);
+
+/*----------------------------------------------------------------------------*/
+/*----------------------------------------------------------------------------*/
+static struct attribute *joypad_attrs[] = {
+	&dev_attr_poll_interval.attr,
+	&dev_attr_adc_fuzz.attr,
+	&dev_attr_adc_flat.attr,
+	&dev_attr_enable.attr,
+	&dev_attr_adc_cal.attr,
+	NULL,
+};
+
+static struct attribute_group joypad_attr_group = {
+	.attrs = joypad_attrs,
+};
+
+/*----------------------------------------------------------------------------*/
+/*----------------------------------------------------------------------------*/
+static void joypad_gpio_check(struct input_polled_dev *poll_dev)
+{
+	struct joypad *joypad = poll_dev->private;
+	int nbtn, value;
+
+	for (nbtn = 0; nbtn < joypad->bt_gpio_count; nbtn++) {
+		struct bt_gpio *gpio = &joypad->gpios[nbtn];
+
+		if (gpio_get_value_cansleep(gpio->num) < 0) {
+			dev_err(joypad->dev, "failed to get gpio state\n");
+			continue;
+		}
+		value = gpio_get_value(gpio->num);
+		if (value != gpio->old_value) {
+			input_event(poll_dev->input,
+				gpio->report_type,
+				gpio->linux_code,
+				(value == gpio->active_level) ? 1 : 0);
+			gpio->old_value = value;
+		}
+	}
+	input_sync(poll_dev->input);
+}
+
+/*----------------------------------------------------------------------------*/
+static void joypad_adc_check(struct input_polled_dev *poll_dev)
+{
+	struct joypad *joypad = poll_dev->private;
+	int nbtn, value;
+
+	for (nbtn = 0; nbtn < joypad->bt_adc_count; nbtn++) {
+		struct bt_adc *adc = &joypad->adcs[nbtn];
+
+		value = joypad_adc_read(adc);
+		if (!value) {
+			dev_err(joypad->dev, "%s : saradc channels[%d]!\n",
+				__func__, nbtn);
+			continue;
+		}
+
+		/* Joystick Deadzone check */
+		if (joypad->bt_adc_deadzone) {
+			if ((value < adc->cal + joypad->bt_adc_deadzone) &&
+			    (value > adc->cal - joypad->bt_adc_deadzone))
+				value = adc->cal;
+		}
+		value = value - adc->cal;
+		value = value > adc->max ? adc->max : value;
+		value = value < adc->min ? adc->min : value;
+
+		if (nbtn == 0)
+		{
+			// adc-x value is default inverted(h/w)
+			input_report_abs(poll_dev->input,
+				adc->report_type, value * (-1));
+		}
+		else
+		{
+			input_report_abs(poll_dev->input,
+				adc->report_type, value);
+		}
+		adc->old_value = value;
+	}
+	input_sync(poll_dev->input);
+}
+
+/*----------------------------------------------------------------------------*/
+static void joypad_poll(struct input_polled_dev *poll_dev)
+{
+	struct joypad *joypad = poll_dev->private;
+
+	if (joypad->enable) {
+		joypad_adc_check(poll_dev);
+		joypad_gpio_check(poll_dev);
+	}
+	if (poll_dev->poll_interval != joypad->poll_interval) {
+		mutex_lock(&joypad->lock);
+		poll_dev->poll_interval = joypad->poll_interval;
+		mutex_unlock(&joypad->lock);
+	}
+}
+
+/*----------------------------------------------------------------------------*/
+static void joypad_open(struct input_polled_dev *poll_dev)
+{
+	struct joypad *joypad = poll_dev->private;
+	int nbtn;
+
+	for (nbtn = 0; nbtn < joypad->bt_gpio_count; nbtn++) {
+		struct bt_gpio *gpio = &joypad->gpios[nbtn];
+		gpio->old_value = gpio->active_level ? 0 : 1;
+	}
+	for (nbtn = 0; nbtn < joypad->bt_adc_count; nbtn++) {
+		struct bt_adc *adc = &joypad->adcs[nbtn];
+
+		adc->old_value = joypad_adc_read(adc);
+		if (!adc->old_value) {
+			dev_err(joypad->dev, "%s : saradc channels[%d]!\n",
+				__func__, nbtn);
+			continue;
+		}
+		adc->cal = adc->old_value;
+		dev_info(joypad->dev, "%s : adc[%d] adc->cal = %d\n",
+			__func__, nbtn, adc->cal);
+	}
+	/* buttons status sync */
+	joypad_adc_check(poll_dev);
+	joypad_gpio_check(poll_dev);
+
+	/* button report enable */
+	mutex_lock(&joypad->lock);
+	joypad->enable = true;
+	mutex_unlock(&joypad->lock);
+
+	dev_info(joypad->dev, "%s : opened\n", __func__);
+}
+
+/*----------------------------------------------------------------------------*/
+static void joypad_close(struct input_polled_dev *poll_dev)
+{
+	struct joypad *joypad = poll_dev->private;
+
+	/* button report disable */
+	mutex_lock(&joypad->lock);
+	joypad->enable = false;
+	mutex_unlock(&joypad->lock);
+
+	dev_info(joypad->dev, "%s : closed\n", __func__);
+}
+
+/*----------------------------------------------------------------------------*/
+static int joypad_adc_setup(struct device *dev, struct joypad *joypad)
+{
+	int nbtn = 0;
+
+	joypad->adcs = devm_kzalloc(dev, joypad->bt_adc_count *
+				sizeof(struct bt_adc), GFP_KERNEL);
+
+	if (!joypad->adcs) {
+		dev_err(dev, "%s devm_kzmalloc error!", __func__);
+		return -ENOMEM;
+	}
+
+	for (nbtn = 0; nbtn < joypad->bt_adc_count; nbtn++) {
+		struct bt_adc *adc = &joypad->adcs[nbtn];
+		enum iio_chan_type type;
+
+		adc->scale = joypad->bt_adc_scale;
+		if (nbtn) {
+			adc->channel =
+				devm_iio_channel_get(dev, "joy_y");
+			adc->report_type = ABS_Y;
+			if (joypad->invert_absy)
+				adc->invert = true;
+
+			adc->max =  (joypad->bt_adc_y_range / 2) - 1;
+			adc->min = -(joypad->bt_adc_y_range / 2);
+		}
+		else {
+			adc->channel =
+				devm_iio_channel_get(dev, "joy_x");
+			adc->report_type = ABS_X;
+			if (joypad->invert_absx)
+				adc->invert = true;
+
+			adc->max =  (joypad->bt_adc_x_range / 2) - 1;
+			adc->min = -(joypad->bt_adc_x_range / 2);
+		}
+
+		if (IS_ERR(adc->channel)) {
+			dev_err(dev, "iio channel[%d] get error\n", nbtn);
+			return -EINVAL;
+		}
+		if (!adc->channel->indio_dev)
+			return -ENXIO;
+
+		if (iio_get_channel_type(adc->channel, &type))
+			return -EINVAL;
+
+		if (type != IIO_VOLTAGE) {
+			dev_err(dev, "Incompatible channel %d type %d\n",
+				nbtn, type);
+			return -EINVAL;
+		}
+	}
+	if (nbtn == 0)
+		return -EINVAL;
+
+	return	0;
+}
+
+/*----------------------------------------------------------------------------*/
+static int joypad_gpio_setup(struct device *dev, struct joypad *joypad)
+{
+	struct device_node *node, *pp;
+	int nbtn;
+
+	node = dev->of_node;
+	if (!node)
+		return -ENODEV;
+
+	joypad->gpios = devm_kzalloc(dev, joypad->bt_gpio_count *
+				sizeof(struct bt_gpio), GFP_KERNEL);
+
+	if (!joypad->gpios) {
+		dev_err(dev, "%s devm_kzmalloc error!", __func__);
+		return -ENOMEM;
+	}
+
+	nbtn = 0;
+	for_each_child_of_node(node, pp) {
+		enum of_gpio_flags flags;
+		struct bt_gpio *gpio = &joypad->gpios[nbtn++];
+		int error;
+
+		gpio->num = of_get_gpio_flags(pp, 0, &flags);
+		if (gpio->num < 0) {
+			error = gpio->num;
+			dev_err(dev, "Failed to get gpio flags, error: %d\n",
+				error);
+			return error;
+		}
+
+		/* gpio active level(key press level) */
+		gpio->active_level = (flags & OF_GPIO_ACTIVE_LOW) ? 0 : 1;
+
+		gpio->label = of_get_property(pp, "label", NULL);
+
+		if (gpio_is_valid(gpio->num)) {
+			error = devm_gpio_request_one(dev, gpio->num,
+						      GPIOF_IN, gpio->label);
+			if (error < 0) {
+				dev_err(dev,
+					"Failed to request GPIO %d, error %d\n",
+					gpio->num, error);
+				return error;
+			}
+		}
+		if (of_property_read_u32(pp, "linux,code", &gpio->linux_code)) {
+			dev_err(dev, "Button without keycode: 0x%x\n",
+				gpio->num);
+			return -EINVAL;
+		}
+		if (of_property_read_u32(pp, "linux,input-type",
+				&gpio->report_type))
+			gpio->report_type = EV_KEY;
+	}
+	if (nbtn == 0)
+		return -EINVAL;
+
+	return	0;
+}
+
+/*----------------------------------------------------------------------------*/
+static int joypad_input_setup(struct device *dev, struct joypad *joypad)
+{
+	struct input_polled_dev *poll_dev;
+	struct input_dev *input;
+	int nbtn, error;
+	u32 joypad_revision = 0;
+	u32 joypad_product = 0;
+
+	poll_dev = devm_input_allocate_polled_device(dev);
+	if (!poll_dev) {
+		dev_err(dev, "no memory for polled device\n");
+		return -ENOMEM;
+	}
+
+	poll_dev->private	= joypad;
+	poll_dev->poll		= joypad_poll;
+	poll_dev->poll_interval	= joypad->poll_interval;
+	poll_dev->open		= joypad_open;
+	poll_dev->close		= joypad_close;
+
+	input = poll_dev->input;
+
+	device_property_read_string(dev, "joypad-name", &input->name);
+	input->phys = DRV_NAME"/input0";
+
+	device_property_read_u32(dev, "joypad-revision", &joypad_revision);
+	device_property_read_u32(dev, "joypad-product", &joypad_product);
+	input->id.bustype = BUS_HOST;
+	input->id.vendor  = 0x484B;
+	input->id.product = (u16)joypad_product;
+	input->id.version = (u16)joypad_revision;
+
+	/* IIO ADC key setup (0 mv ~ 1800 mv) * adc->scale */
+	__set_bit(EV_ABS, input->evbit);
+	for(nbtn = 0; nbtn < joypad->bt_adc_count; nbtn++) {
+		struct bt_adc *adc = &joypad->adcs[nbtn];
+		input_set_abs_params(input, adc->report_type,
+				adc->min, adc->max,
+				joypad->bt_adc_fuzz,
+				joypad->bt_adc_flat);
+		dev_info(dev,
+			"%s : SCALE = %d, ABS min = %d, max = %d,"
+			" fuzz = %d, flat = %d, deadzone = %d\n",
+			__func__, adc->scale, adc->min, adc->max,
+			joypad->bt_adc_fuzz, joypad->bt_adc_flat,
+			joypad->bt_adc_deadzone);
+	}
+
+	/* GPIO key setup */
+	__set_bit(EV_KEY, input->evbit);
+	for(nbtn = 0; nbtn < joypad->bt_gpio_count; nbtn++) {
+		struct bt_gpio *gpio = &joypad->gpios[nbtn];
+		input_set_capability(input, gpio->report_type,
+				gpio->linux_code);
+	}
+
+	if (joypad->auto_repeat)
+		__set_bit(EV_REP, input->evbit);
+
+	joypad->dev = dev;
+
+	error = input_register_polled_device(poll_dev);
+	if (error) {
+		dev_err(dev, "unable to register polled device, err=%d\n",
+			error);
+		return error;
+	}
+	return 0;
+}
+
+/*----------------------------------------------------------------------------*/
+static void joypad_setup_value_check(struct device *dev, struct joypad *joypad)
+{
+	/*
+		fuzz: specifies fuzz value that is used to filter noise from
+			the event stream.
+	*/
+	if (g_button_adc_fuzz)
+		joypad->bt_adc_fuzz = g_button_adc_fuzz;
+	else
+		device_property_read_u32(dev, "button-adc-fuzz",
+					&joypad->bt_adc_fuzz);
+	/*
+		flat: values that are within this value will be discarded by
+			joydev interface and reported as 0 instead.
+	*/
+	if (g_button_adc_flat)
+		joypad->bt_adc_flat = g_button_adc_flat;
+	else
+		device_property_read_u32(dev, "button-adc-flat",
+					&joypad->bt_adc_flat);
+
+	/* Joystick report value control */
+	if (g_button_adc_scale)
+		joypad->bt_adc_scale = g_button_adc_scale;
+	else
+		device_property_read_u32(dev, "button-adc-scale",
+					&joypad->bt_adc_scale);
+
+	/* Joystick deadzone value control */
+	if (g_button_adc_deadzone)
+		joypad->bt_adc_deadzone = g_button_adc_deadzone;
+	else
+		device_property_read_u32(dev, "button-adc-deadzone",
+					&joypad->bt_adc_deadzone);
+
+	if (g_button_adc_x_range)
+		joypad->bt_adc_x_range = g_button_adc_x_range;
+	else
+		device_property_read_u32(dev, "button-adc-x-range",
+					&joypad->bt_adc_x_range);
+	if (g_button_adc_y_range)
+		joypad->bt_adc_y_range = g_button_adc_y_range;
+	else
+		device_property_read_u32(dev, "button-adc-y-range",
+					&joypad->bt_adc_y_range);
+}
+
+/*----------------------------------------------------------------------------*/
+static int joypad_dt_parse(struct device *dev, struct joypad *joypad)
+{
+	int error = 0;
+
+	/* initialize value check from boot.ini */
+	joypad_setup_value_check(dev, joypad);
+
+	device_property_read_u32(dev, "button-adc-count",
+				&joypad->bt_adc_count);
+
+	device_property_read_u32(dev, "poll-interval",
+				&joypad->poll_interval);
+
+	joypad->auto_repeat = device_property_present(dev, "autorepeat");
+
+	/* change the report reference point? (ADC MAX - read value) */
+	joypad->invert_absx = device_property_present(dev, "invert-absx");
+	joypad->invert_absy = device_property_present(dev, "invert-absy");
+	dev_info(dev, "%s : invert-absx = %d, inveret-absy = %d\n",
+		__func__, joypad->invert_absx, joypad->invert_absy);
+
+	joypad->bt_gpio_count = device_get_child_node_count(dev);
+
+	if ((joypad->bt_adc_count == 0) || (joypad->bt_gpio_count == 0)) {
+		dev_err(dev, "adc key = %d, gpio key = %d error!",
+			joypad->bt_adc_count, joypad->bt_gpio_count);
+		return -EINVAL;
+	}
+
+	error = joypad_adc_setup(dev, joypad);
+	if (error)
+		return error;
+
+	error = joypad_gpio_setup(dev, joypad);
+	if (error)
+		return error;
+
+	return error;
+}
+
+/*----------------------------------------------------------------------------*/
+static int joypad_probe(struct platform_device *pdev)
+{
+	struct joypad *joypad;
+	struct device *dev = &pdev->dev;
+	int error;
+
+	joypad = devm_kzalloc(dev, sizeof(struct joypad), GFP_KERNEL);
+	if (!joypad) {
+		dev_err(dev, "joypad devm_kzmalloc error!");
+		return -ENOMEM;
+	}
+
+	/* device tree data parse */
+	error = joypad_dt_parse(dev, joypad);
+	if (error) {
+		dev_err(dev, "dt parse error!(err = %d)\n", error);
+		return error;
+	}
+
+	mutex_init(&joypad->lock);
+	platform_set_drvdata(pdev, joypad);
+
+	error = sysfs_create_group(&pdev->dev.kobj, &joypad_attr_group);
+	if (error) {
+		dev_err(dev, "create sysfs group fail, error: %d\n",
+			error);
+		return error;
+	}
+
+	/* poll input device setup */
+	error = joypad_input_setup(dev, joypad);
+	if (error) {
+		dev_err(dev, "input setup failed!(err = %d)\n", error);
+		return error;
+	}
+	dev_info(dev, "%s : probe success\n", __func__);
+	return 0;
+}
+
+/*----------------------------------------------------------------------------*/
+static const struct of_device_id joypad_of_match[] = {
+	{ .compatible = "odroidgo2-joypad", },
+	{},
+};
+
+MODULE_DEVICE_TABLE(of, joypad_of_match);
+
+/*----------------------------------------------------------------------------*/
+static struct platform_driver joypad_driver = {
+	.probe = joypad_probe,
+	.driver = {
+		.name = DRV_NAME,
+		.of_match_table = of_match_ptr(joypad_of_match),
+	},
+};
+
+/*----------------------------------------------------------------------------*/
+static int __init joypad_init(void)
+{
+	return platform_driver_register(&joypad_driver);
+}
+
+/*----------------------------------------------------------------------------*/
+static void __exit joypad_exit(void)
+{
+	platform_driver_unregister(&joypad_driver);
+}
+
+/*----------------------------------------------------------------------------*/
+late_initcall(joypad_init);
+module_exit(joypad_exit);
+
+/*----------------------------------------------------------------------------*/
+MODULE_AUTHOR("Hardkernel Co.,LTD");
+MODULE_DESCRIPTION("Keypad driver(ADC&GPIO) for ODROIDGO-Advance");
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("platform:" DRV_NAME);
+
+/*----------------------------------------------------------------------------*/
\ No newline at end of file
-- 
2.43.0

