diff --git a/drivers/gpu/drm/panel/Kconfig b/drivers/gpu/drm/panel/Kconfig
index 479ffdb..de55abb 100644
--- a/drivers/gpu/drm/panel/Kconfig
+++ b/drivers/gpu/drm/panel/Kconfig
@@ -252,6 +252,15 @@ config DRM_PANEL_NEC_NL8048HL11
 	  panel (found on the Zoom2/3/3630 SDP boards). To compile this driver
 	  as a module, choose M here.
 
+config DRM_PANEL_NEWVISION_NV3052C
+	tristate "NewVision NV3052C DSI/SPI RGB panel"
+	depends on OF
+	depends on DRM_MIPI_DSI
+	depends on BACKLIGHT_CLASS_DEVICE
+	help
+	  Say Y here if you want to enable support for the panels built
+	  around the NewVision NV3052C display controller.
+
 config DRM_PANEL_NOVATEK_NT35510
 	tristate "Novatek NT35510 RGB panel driver"
 	depends on OF
diff --git a/drivers/gpu/drm/panel/Makefile b/drivers/gpu/drm/panel/Makefile
index c813205..f1e74c9 100644
--- a/drivers/gpu/drm/panel/Makefile
+++ b/drivers/gpu/drm/panel/Makefile
@@ -23,6 +23,7 @@ obj-$(CONFIG_DRM_PANEL_LEADTEK_LTK500HD1829) += panel-leadtek-ltk500hd1829.o
 obj-$(CONFIG_DRM_PANEL_LG_LB035Q02) += panel-lg-lb035q02.o
 obj-$(CONFIG_DRM_PANEL_LG_LG4573) += panel-lg-lg4573.o
 obj-$(CONFIG_DRM_PANEL_NEC_NL8048HL11) += panel-nec-nl8048hl11.o
+obj-$(CONFIG_DRM_PANEL_NEWVISION_NV3052C) += panel-newvision-nv3052c.o
 obj-$(CONFIG_DRM_PANEL_NOVATEK_NT35510) += panel-novatek-nt35510.o
 obj-$(CONFIG_DRM_PANEL_NOVATEK_NT36672A) += panel-novatek-nt36672a.o
 obj-$(CONFIG_DRM_PANEL_NOVATEK_NT39016) += panel-novatek-nt39016.o
diff --git a/drivers/gpu/drm/panel/panel-newvision-nv3052c.c b/drivers/gpu/drm/panel/panel-newvision-nv3052c.c
index e69de29..cd1d091 100644
--- a/drivers/gpu/drm/panel/panel-newvision-nv3052c.c
+++ b/drivers/gpu/drm/panel/panel-newvision-nv3052c.c
@@ -0,0 +1,719 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * NevVision NV3052C IPS LCD panel driver
+ *
+ * Copyright (C) 2020, Paul Cercueil <paul@crapouillou.net>
+ * Copyright (C) 2021, Romain Tisserand <romain.tisserand@gmail.com>
+ * Copyright (C) 2021, Tony Jih
+ */
+
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/gpio/consumer.h>
+#include <linux/media-bus-format.h>
+#include <linux/module.h>
+#include <linux/of_device.h>
+#include <linux/regulator/consumer.h>
+
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_modes.h>
+#include <drm/drm_panel.h>
+
+#include <video/mipi_display.h>
+
+struct nv3052c_panel_info {
+	const struct drm_display_mode *display_modes;
+	unsigned int num_modes;
+	u32 bus_format, bus_flags;
+};
+
+struct nv3052c {
+	struct drm_panel panel;
+	struct mipi_dsi_device *dsi;
+
+	struct regulator *supply;
+	const struct nv3052c_panel_info *panel_info;
+
+	struct gpio_desc *reset_gpio;
+	enum drm_panel_orientation orientation;
+};
+
+static const u8 nv3052c_init_sequence_rg351v[][2] = {
+	{ 0xFF, 0x30 },
+	{ 0xFF, 0x52 },
+	{ 0xFF, 0x01 },
+	{ 0xE3, 0x00 },
+	{ 0x40, 0x0A },
+	{ 0x03, 0x40 },
+	{ 0x04, 0x00 },
+	{ 0x05, 0x03 },
+	{ 0x24, 0x12 },
+	{ 0x25, 0x1E },
+	{ 0x26, 0x28 },
+	{ 0x27, 0x52 },
+	{ 0x28, 0x57 },
+	{ 0x29, 0x01 },
+	{ 0x2A, 0xDF },
+	{ 0x38, 0x9C },
+	{ 0x39, 0xA7 },
+	{ 0x3A, 0x53 },
+	{ 0x44, 0x00 },
+	{ 0x49, 0x3C },
+	{ 0x59, 0xFE },
+	{ 0x5C, 0x00 },
+	{ 0x91, 0x77 },
+	{ 0x92, 0x77 },
+	{ 0xA0, 0x55 },
+	{ 0xA1, 0x50 },
+	{ 0xA4, 0x9C },
+	{ 0xA7, 0x02 },
+	{ 0xA8, 0x01 },
+	{ 0xA9, 0x01 },
+	{ 0xAA, 0xFC },
+	{ 0xAB, 0x28 },
+	{ 0xAC, 0x06 },
+	{ 0xAD, 0x06 },
+	{ 0xAE, 0x06 },
+	{ 0xAF, 0x03 },
+	{ 0xB0, 0x08 },
+	{ 0xB1, 0x26 },
+	{ 0xB2, 0x28 },
+	{ 0xB3, 0x28 },
+	{ 0xB4, 0x33 },
+	{ 0xB5, 0x08 },
+	{ 0xB6, 0x26 },
+	{ 0xB7, 0x08 },
+	{ 0xB8, 0x26 },
+	{ 0xFF, 0x30 },
+	{ 0xFF, 0x52 },
+	{ 0xFF, 0x02 },
+	{ 0xB0, 0x0B },
+	{ 0xB1, 0x16 },
+	{ 0xB2, 0x17 },
+	{ 0xB3, 0x2C },
+	{ 0xB4, 0x32 },
+	{ 0xB5, 0x3B },
+	{ 0xB6, 0x29 },
+	{ 0xB7, 0x40 },
+	{ 0xB8, 0x0D },
+	{ 0xB9, 0x05 },
+	{ 0xBA, 0x12 },
+	{ 0xBB, 0x10 },
+	{ 0xBC, 0x12 },
+	{ 0xBD, 0x15 },
+	{ 0xBE, 0x19 },
+	{ 0xBF, 0x0E },
+	{ 0xC0, 0x16 },
+	{ 0xC1, 0x0A },
+	{ 0xD0, 0x0C },
+	{ 0xD1, 0x17 },
+	{ 0xD2, 0x14 },
+	{ 0xD3, 0x2E },
+	{ 0xD4, 0x32 },
+	{ 0xD5, 0x3C },
+	{ 0xD6, 0x22 },
+	{ 0xD7, 0x3D },
+	{ 0xD8, 0x0D },
+	{ 0xD9, 0x07 },
+	{ 0xDA, 0x13 },
+	{ 0xDB, 0x13 },
+	{ 0xDC, 0x11 },
+	{ 0xDD, 0x15 },
+	{ 0xDE, 0x19 },
+	{ 0xDF, 0x10 },
+	{ 0xE0, 0x17 },
+	{ 0xE1, 0x0A },
+	{ 0xFF, 0x30 },
+	{ 0xFF, 0x52 },
+	{ 0xFF, 0x03 },
+	{ 0x00, 0x2A },
+	{ 0x01, 0x2A },
+	{ 0x02, 0x2A },
+	{ 0x03, 0x2A },
+	{ 0x04, 0x61 },
+	{ 0x05, 0x80 },
+	{ 0x06, 0xC7 },
+	{ 0x07, 0x01 },
+	{ 0x08, 0x82 },
+	{ 0x09, 0x83 },
+	{ 0x30, 0x2A },
+	{ 0x31, 0x2A },
+	{ 0x32, 0x2A },
+	{ 0x33, 0x2A },
+	{ 0x34, 0x61 },
+	{ 0x35, 0xC5 },
+	{ 0x36, 0x80 },
+	{ 0x37, 0x23 },
+	{ 0x40, 0x82 },
+	{ 0x41, 0x83 },
+	{ 0x42, 0x80 },
+	{ 0x43, 0x81 },
+	{ 0x44, 0x11 },
+	{ 0x45, 0xE6 },
+	{ 0x46, 0xE5 },
+	{ 0x47, 0x11 },
+	{ 0x48, 0xE8 },
+	{ 0x49, 0xE7 },
+	{ 0x50, 0x02 },
+	{ 0x51, 0x01 },
+	{ 0x52, 0x04 },
+	{ 0x53, 0x03 },
+	{ 0x54, 0x11 },
+	{ 0x55, 0xEA },
+	{ 0x56, 0xE9 },
+	{ 0x57, 0x11 },
+	{ 0x58, 0xEC },
+	{ 0x59, 0xEB },
+	{ 0x7E, 0x02 },
+	{ 0x7F, 0x80 },
+	{ 0xE0, 0x5A },
+	{ 0xB1, 0x00 },
+	{ 0xB4, 0x0E },
+	{ 0xB5, 0x0F },
+	{ 0xB6, 0x04 },
+	{ 0xB7, 0x07 },
+	{ 0xB8, 0x06 },
+	{ 0xB9, 0x05 },
+	{ 0xBA, 0x0F },
+	{ 0xC7, 0x00 },
+	{ 0xCA, 0x0E },
+	{ 0xCB, 0x0F },
+	{ 0xCC, 0x04 },
+	{ 0xCD, 0x07 },
+	{ 0xCE, 0x06 },
+	{ 0xCF, 0x05 },
+	{ 0xD0, 0x0F },
+	{ 0x81, 0x0F },
+	{ 0x84, 0x0E },
+	{ 0x85, 0x0F },
+	{ 0x86, 0x07 },
+	{ 0x87, 0x04 },
+	{ 0x88, 0x05 },
+	{ 0x89, 0x06 },
+	{ 0x8A, 0x00 },
+	{ 0x97, 0x0F },
+	{ 0x9A, 0x0E },
+	{ 0x9B, 0x0F },
+	{ 0x9C, 0x07 },
+	{ 0x9D, 0x04 },
+	{ 0x9E, 0x05 },
+	{ 0x9F, 0x06 },
+	{ 0xA0, 0x00 },
+	{ 0xFF, 0x30 },
+	{ 0xFF, 0x52 },
+	{ 0xFF, 0x02 },
+	{ 0x01, 0x01 },
+	{ 0x02, 0xDA },
+	{ 0x03, 0xBA },
+	{ 0x04, 0xA8 },
+	{ 0x05, 0x9A },
+	{ 0x06, 0x70 },
+	{ 0x07, 0xFF },
+	{ 0x08, 0x91 },
+	{ 0x09, 0x90 },
+	{ 0x0A, 0xFF },
+	{ 0x0B, 0x8F },
+	{ 0x0C, 0x60 },
+	{ 0x0D, 0x58 },
+	{ 0x0E, 0x48 },
+	{ 0x0F, 0x38 },
+	{ 0x10, 0x2B },
+	{ 0xFF, 0x30 },
+	{ 0xFF, 0x52 },
+	{ 0xFF, 0x00 },
+	{ 0x36, 0x02 },
+	{ 0x3A, 0x70 }
+};
+
+#if 0
+static const u8 nv3052c_init_sequence_rg351mp[][2] = {
+	{ 0xFF, 0x30 },
+	{ 0xFF, 0x52 },
+	{ 0xFF, 0x01 },
+	{ 0xE3, 0x00 },
+	{ 0x40, 0x0A },
+	{ 0x03, 0x40 },
+	{ 0x04, 0x00 },
+	{ 0x05, 0x03 },
+	{ 0x24, 0x12 },
+	{ 0x25, 0x1E },
+	{ 0x26, 0x28 },
+	{ 0x27, 0x52 },
+	{ 0x28, 0x57 },
+	{ 0x29, 0x01 },
+	{ 0x2A, 0xDF },
+	{ 0x38, 0x9C },
+	{ 0x39, 0xA7 },
+	{ 0x3A, 0x53 },
+	{ 0x44, 0x00 },
+	{ 0x49, 0x3C },
+	{ 0x59, 0xFE },
+	{ 0x5C, 0x00 },
+	{ 0x91, 0x77 },
+	{ 0x92, 0x77 },
+	{ 0xA0, 0x55 },
+	{ 0xA1, 0x50 },
+	{ 0xA4, 0x9C },
+	{ 0xA7, 0x02 },
+	{ 0xA8, 0x01 },
+	{ 0xA9, 0x01 },
+	{ 0xAA, 0xFC },
+	{ 0xAB, 0x28 },
+	{ 0xAC, 0x06 },
+	{ 0xAD, 0x06 },
+	{ 0xAE, 0x06 },
+	{ 0xAF, 0x03 },
+	{ 0xB0, 0x08 },
+	{ 0xB1, 0x26 },
+	{ 0xB2, 0x28 },
+	{ 0xB3, 0x28 },
+	{ 0xB4, 0x33 },
+	{ 0xB5, 0x08 },
+	{ 0xB6, 0x26 },
+	{ 0xB7, 0x08 },
+	{ 0xB8, 0x26 },
+	{ 0xFF, 0x30 },
+	{ 0xFF, 0x52 },
+	{ 0xFF, 0x02 },
+	{ 0xB0, 0x0B },
+	{ 0xB1, 0x16 },
+	{ 0xB2, 0x17 },
+	{ 0xB3, 0x2C },
+	{ 0xB4, 0x32 },
+	{ 0xB5, 0x3B },
+	{ 0xB6, 0x29 },
+	{ 0xB7, 0x40 },
+	{ 0xB8, 0x0D },
+	{ 0xB9, 0x05 },
+	{ 0xBA, 0x12 },
+	{ 0xBB, 0x10 },
+	{ 0xBC, 0x12 },
+	{ 0xBD, 0x15 },
+	{ 0xBE, 0x19 },
+	{ 0xBF, 0x0E },
+	{ 0xC0, 0x16 },
+	{ 0xC1, 0x0A },
+	{ 0xD0, 0x0C },
+	{ 0xD1, 0x17 },
+	{ 0xD2, 0x14 },
+	{ 0xD3, 0x2E },
+	{ 0xD4, 0x32 },
+	{ 0xD5, 0x3C },
+	{ 0xD6, 0x22 },
+	{ 0xD7, 0x3D },
+	{ 0xD8, 0x0D },
+	{ 0xD9, 0x07 },
+	{ 0xDA, 0x13 },
+	{ 0xDB, 0x13 },
+	{ 0xDC, 0x11 },
+	{ 0xDD, 0x15 },
+	{ 0xDE, 0x19 },
+	{ 0xDF, 0x10 },
+	{ 0xE0, 0x17 },
+	{ 0xE1, 0x0A },
+	{ 0xFF, 0x30 },
+	{ 0xFF, 0x52 },
+	{ 0xFF, 0x03 },
+	{ 0x00, 0x2A },
+	{ 0x01, 0x2A },
+	{ 0x02, 0x2A },
+	{ 0x03, 0x2A },
+	{ 0x04, 0x61 },
+	{ 0x05, 0x80 },
+	{ 0x06, 0xC7 },
+	{ 0x07, 0x01 },
+	{ 0x08, 0x82 },
+	{ 0x09, 0x83 },
+	{ 0x30, 0x2A },
+	{ 0x31, 0x2A },
+	{ 0x32, 0x2A },
+	{ 0x33, 0x2A },
+	{ 0x34, 0x61 },
+	{ 0x35, 0xC5 },
+	{ 0x36, 0x80 },
+	{ 0x37, 0x23 },
+	{ 0x40, 0x82 },
+	{ 0x41, 0x83 },
+	{ 0x42, 0x80 },
+	{ 0x43, 0x81 },
+	{ 0x44, 0x11 },
+	{ 0x45, 0xE6 },
+	{ 0x46, 0xE5 },
+	{ 0x47, 0x11 },
+	{ 0x48, 0xE8 },
+	{ 0x49, 0xE7 },
+	{ 0x50, 0x02 },
+	{ 0x51, 0x01 },
+	{ 0x52, 0x04 },
+	{ 0x53, 0x03 },
+	{ 0x54, 0x11 },
+	{ 0x55, 0xEA },
+	{ 0x56, 0xE9 },
+	{ 0x57, 0x11 },
+	{ 0x58, 0xEC },
+	{ 0x59, 0xEB },
+	{ 0x7E, 0x02 },
+	{ 0x7F, 0x80 },
+	{ 0xE0, 0x5A },
+	{ 0xB1, 0x00 },
+	{ 0xB4, 0x0E },
+	{ 0xB5, 0x0F },
+	{ 0xB6, 0x04 },
+	{ 0xB7, 0x07 },
+	{ 0xB8, 0x06 },
+	{ 0xB9, 0x05 },
+	{ 0xBA, 0x0F },
+	{ 0xC7, 0x00 },
+	{ 0xCA, 0x0E },
+	{ 0xCB, 0x0F },
+	{ 0xCC, 0x04 },
+	{ 0xCD, 0x07 },
+	{ 0xCE, 0x06 },
+	{ 0xCF, 0x05 },
+	{ 0xD0, 0x0F },
+	{ 0x81, 0x0F },
+	{ 0x84, 0x0E },
+	{ 0x85, 0x0F },
+	{ 0x86, 0x07 },
+	{ 0x87, 0x04 },
+	{ 0x88, 0x05 },
+	{ 0x89, 0x06 },
+	{ 0x8A, 0x00 },
+	{ 0x97, 0x0F },
+	{ 0x9A, 0x0E },
+	{ 0x9B, 0x0F },
+	{ 0x9C, 0x07 },
+	{ 0x9D, 0x04 },
+	{ 0x9E, 0x05 },
+	{ 0x9F, 0x06 },
+	{ 0xA0, 0x00 },
+	{ 0xFF, 0x30 },
+	{ 0xFF, 0x52 },
+	{ 0xFF, 0x02 },
+	{ 0x01, 0x01 },
+	{ 0x02, 0xDA },
+	{ 0x03, 0xBA },
+	{ 0x04, 0xA8 },
+	{ 0x05, 0x9A },
+	{ 0x06, 0x70 },
+	{ 0x07, 0xFF },
+	{ 0x08, 0x91 },
+	{ 0x09, 0x90 },
+	{ 0x0A, 0xFF },
+	{ 0x0B, 0x8F },
+	{ 0x0C, 0x60 },
+	{ 0x0D, 0x58 },
+	{ 0x0E, 0x48 },
+	{ 0x0F, 0x38 },
+	{ 0x10, 0x2B },
+	{ 0xFF, 0x30 },
+	{ 0xFF, 0x52 },
+	{ 0xFF, 0x00 },
+	{ 0x36, 0x02 },
+	{ 0x3A, 0x70 }
+};
+#endif
+
+static inline struct nv3052c *to_nv3052c(struct drm_panel *panel)
+{
+	return container_of(panel, struct nv3052c, panel);
+}
+
+static int nv3052c_prepare(struct drm_panel *panel)
+{
+	struct nv3052c *priv = to_nv3052c(panel);
+	unsigned int i;
+	int err;
+
+	err = regulator_enable(priv->supply);
+	if (err) {
+		dev_err(panel->dev, "Failed to enable power supply: %d\n", err);
+		return err;
+	}
+
+	/* Reset the chip */
+	gpiod_set_value_cansleep(priv->reset_gpio, 1);
+	usleep_range(10, 1000);
+	gpiod_set_value_cansleep(priv->reset_gpio, 0);
+	usleep_range(5000, 20000);
+
+
+	err = mipi_dsi_dcs_exit_sleep_mode(priv->dsi);
+	if (err) {
+		dev_err(panel->dev, "Unable to exit sleep mode: %d\n", err);
+		return err;
+	}
+
+	msleep(100);
+
+	for (i = 0; i < ARRAY_SIZE(nv3052c_init_sequence_rg351v); i++) {
+		err = mipi_dsi_dcs_write_buffer(priv->dsi, nv3052c_init_sequence_rg351v[i], 2);
+		if (err < 0) {
+			dev_err(panel->dev, "Unable to write init sequence %d: %d\n", i, err);
+			goto err_disable_regulator;
+		}
+		//msleep(10);
+	}
+
+	// SLEEP OUT  dsi_generic_write_seq(priv->dsi, 0x05, 0xC8, 0x01, 0x11);
+	// DISPLAY ON dsi_generic_write_seq(priv->dsi, 0x05, 0x0A, 0x01, 0x29);
+
+	/* Panel is operational 120 msec after reset */
+	msleep(120);
+
+	//err = mipi_dsi_dcs_set_display_on(priv->dsi);
+	//if (err) {
+	//	dev_err(panel->dev, "Unable to enable display: %d\n", err);
+	//	return err;
+	//}
+
+	dev_dbg(panel->dev, "Panel init sequence done\n");
+
+	return 0;
+
+err_disable_regulator:
+	regulator_disable(priv->supply);
+	return err;
+}
+
+static int nv3052c_unprepare(struct drm_panel *panel)
+{
+	struct nv3052c *priv = to_nv3052c(panel);
+	int err;
+
+	// DISPLAY OFF dsi_generic_write_seq(priv->dsi, 0x05, 0x14, 0x01, 0x28);
+	// SLEEP IN dsi_generic_write_seq(priv->dsi, 0x05, 0x0A, 0x01, 0x10);
+
+	err = mipi_dsi_dcs_enter_sleep_mode(priv->dsi);
+	if (err) {
+		dev_err(panel->dev, "Unable to enter sleep mode: %d\n", err);
+		return err;
+	}
+
+	gpiod_set_value_cansleep(priv->reset_gpio, 1);
+
+	regulator_disable(priv->supply);
+
+	return 0;
+}
+
+static int nv3052c_enable(struct drm_panel *panel)
+{
+	struct nv3052c *priv = to_nv3052c(panel);
+	int err;
+
+	err = mipi_dsi_dcs_set_display_on(priv->dsi);
+	if (err) {
+		dev_err(panel->dev, "Unable to enable display: %d\n", err);
+		return err;
+	}
+
+	if (panel->backlight) {
+		/* Wait for the picture to be ready before enabling backlight */
+		usleep_range(10000, 20000);
+	}
+
+	return 0;
+}
+
+static int nv3052c_disable(struct drm_panel *panel)
+{
+	struct nv3052c *priv = to_nv3052c(panel);
+	int err;
+
+	err = mipi_dsi_dcs_set_display_off(priv->dsi);
+	if (err) {
+		dev_err(panel->dev, "Unable to disable display: %d\n", err);
+		return err;
+	}
+
+	return 0;
+}
+
+static int nv3052c_get_modes(struct drm_panel *panel,
+			     struct drm_connector *connector)
+{
+	struct nv3052c *priv = to_nv3052c(panel);
+	const struct nv3052c_panel_info *panel_info = priv->panel_info;
+	struct drm_display_mode *mode;
+	unsigned int i;
+
+	for (i = 0; i < panel_info->num_modes; i++) {
+		mode = drm_mode_duplicate(connector->dev,
+					  &panel_info->display_modes[i]);
+		if (!mode)
+			return -ENOMEM;
+
+		drm_mode_set_name(mode);
+
+		mode->type = DRM_MODE_TYPE_DRIVER;
+		if (panel_info->num_modes == 1)
+			mode->type |= DRM_MODE_TYPE_PREFERRED;
+
+		drm_mode_probed_add(connector, mode);
+	}
+
+    drm_connector_set_panel_orientation(connector, priv->orientation);
+	connector->display_info.bpc = 8;
+	connector->display_info.width_mm = mode->width_mm;
+	connector->display_info.height_mm = mode->height_mm;
+	drm_display_info_set_bus_formats(&connector->display_info,
+					 &panel_info->bus_format, 1);
+	connector->display_info.bus_flags = panel_info->bus_flags;
+
+
+	return panel_info->num_modes;
+}
+
+static const struct drm_panel_funcs nv3052c_funcs = {
+	.prepare	= nv3052c_prepare,
+	.unprepare	= nv3052c_unprepare,
+	.enable		= nv3052c_enable,
+	.disable	= nv3052c_disable,
+	.get_modes	= nv3052c_get_modes,
+};
+
+static int nv3052c_probe(struct mipi_dsi_device *dsi)
+{
+	struct device *dev = &dsi->dev;
+	struct nv3052c *priv;
+	int err;
+
+	priv = devm_kzalloc(dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv) {
+		dev_err(dev, "Failed to init probe\n");
+		return -ENOMEM;
+	}
+
+	priv->reset_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_HIGH);
+	if (IS_ERR(priv->reset_gpio)) {
+		dev_err(dev, "Failed to get reset GPIO\n");
+		return PTR_ERR(priv->reset_gpio);
+	}
+
+	priv->supply = devm_regulator_get(dev, "vcc");
+	if (IS_ERR(priv->supply)) {
+		err = PTR_ERR(priv->supply);
+		if (err != -EPROBE_DEFER)
+			dev_err(dev, "Failed to request supply regulator: %d\n", err);
+		return err;
+	}
+
+	priv->dsi = dsi;
+	mipi_dsi_set_drvdata(dsi, priv);
+
+	priv->panel_info = of_device_get_match_data(dev);
+	if (!priv->panel_info)
+		return -EINVAL;
+
+	// TODO : this should be in panel description as in st7701 / st7703
+	dsi->lanes = 4;
+	dsi->format = MIPI_DSI_FMT_RGB888;
+	dsi->mode_flags = MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_VIDEO_BURST |
+			  MIPI_DSI_MODE_LPM | MIPI_DSI_MODE_VIDEO_SYNC_PULSE /*| MIPI_DSI_MODE_EOT_PACKET*/ |
+			  MIPI_DSI_CLOCK_NON_CONTINUOUS;
+
+	drm_panel_init(&priv->panel, dev, &nv3052c_funcs,
+		       DRM_MODE_CONNECTOR_DSI);
+
+	err = drm_panel_of_backlight(&priv->panel);
+	if (err < 0) {
+		if (err != -EPROBE_DEFER)
+			dev_err(dev, "Failed to attach backlight\n");
+		return err;
+	}
+
+	err = of_drm_get_panel_orientation(dev->of_node, &priv->orientation);
+	if (err < 0) {
+		dev_err(dev, "%pOF: failed to get orientation %d\n", dev->of_node, err);
+		return err;
+	}
+
+	drm_panel_add(&priv->panel);
+
+	err = mipi_dsi_attach(dsi);
+	if (err) {
+		dev_err(dev, "Failed to attach panel\n");
+		drm_panel_remove(&priv->panel);
+		return err;
+	}
+
+	/*
+	 * We can't call mipi_dsi_maybe_register_tiny_driver(), since the
+	 * NV3052C does not support MIPI_DCS_WRITE_MEMORY_START.
+	 */
+
+	return 0;
+}
+
+static int nv3052c_remove(struct mipi_dsi_device *dsi)
+{
+	struct nv3052c *priv = mipi_dsi_get_drvdata(dsi);
+
+	mipi_dsi_detach(dsi);
+	drm_panel_remove(&priv->panel);
+
+	drm_panel_disable(&priv->panel);
+	drm_panel_unprepare(&priv->panel);
+
+	return 0;
+}
+
+static const struct drm_display_mode ltk035c5444t_modes[] = {
+	{ /* 60 Hz */
+		.clock = 26400,
+		.hdisplay = 640,
+		.hsync_start = 640 + 119,
+		.hsync_end = 640 + 119 + 2,
+		.htotal = 640 + 119 + 2 + 119,
+		.vdisplay = 480,
+		.vsync_start = 480 + 13,
+		.vsync_end = 480 + 13 + 2,
+		.vtotal = 480 + 13 + 2 + 5,
+		.width_mm = 77,
+		.height_mm = 64,
+		.flags = DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC,
+	},
+	{ /* 50 Hz */
+		.clock = 26400,
+		.hdisplay = 640,
+		.hsync_start = 640 + 207,
+		.hsync_end = 640 + 207 + 2,
+		.htotal = 640 + 207 + 2 + 207,
+		.vdisplay = 480,
+		.vsync_start = 480 + 13,
+		.vsync_end = 480 + 13 + 2,
+		.vtotal = 480 + 13 + 2 + 5,
+		.width_mm = 77,
+		.height_mm = 64,
+		.flags = DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC,
+	},
+};
+
+static const struct nv3052c_panel_info ltk035c5444t_panel_info = {
+	.display_modes = ltk035c5444t_modes,
+	.num_modes = ARRAY_SIZE(ltk035c5444t_modes),
+	.bus_format = MEDIA_BUS_FMT_RGB888_1X24,
+	.bus_flags = DRM_BUS_FLAG_DE_HIGH | DRM_BUS_FLAG_PIXDATA_SAMPLE_NEGEDGE,
+};
+
+static const struct of_device_id nv3052c_of_match[] = {
+	{ .compatible = "leadtek,ltk035c5444t", .data = &ltk035c5444t_panel_info },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, nv3052c_of_match);
+
+static struct mipi_dsi_driver nv3052c_driver = {
+	.driver = {
+		.name = "nv3052c",
+		.of_match_table = nv3052c_of_match,
+	},
+	.probe = nv3052c_probe,
+	.remove = nv3052c_remove,
+};
+module_mipi_dsi_driver(nv3052c_driver);
+
+MODULE_AUTHOR("Paul Cercueil <paul@crapouillou.net>");
+MODULE_AUTHOR("Romain Tisserand <romain.tisserand@gmail.com>");
+MODULE_AUTHOR("Tony Jih");
+MODULE_LICENSE("GPL v2");
