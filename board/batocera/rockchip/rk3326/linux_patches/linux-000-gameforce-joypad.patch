--- a/drivers/input/joystick/Kconfig	2021-07-11 12:53:32.000000000 +0200
+++ b/drivers/input/joystick/Kconfig	2021-07-12 18:18:21.775514499 +0200
@@ -246,6 +249,15 @@
 	  To compile this driver as a module, choose M here: the
 	  module will be called gamecon.
 
+config JOYSTICK_GAMEFORCE
+	tristate "Gameforce Chi joypad"
+	select INPUT_FF_MEMLESS
+	help
+	  Say Y here if you have a Gameforce Chi device.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called gameforce.
+
 config JOYSTICK_TURBOGRAFX
 	tristate "Multisystem joysticks via TurboGraFX device"
 	depends on PARPORT
--- a/drivers/input/joystick/Makefile	2021-07-11 12:53:32.000000000 +0200
+++ b/drivers/input/joystick/Makefile	2021-07-12 18:17:32.945515309 +0200
@@ -15,6 +15,7 @@
 obj-$(CONFIG_JOYSTICK_DB9)		+= db9.o
 obj-$(CONFIG_JOYSTICK_FSIA6B)		+= fsia6b.o
 obj-$(CONFIG_JOYSTICK_GAMECON)		+= gamecon.o
+obj-$(CONFIG_JOYSTICK_GAMEFORCE)	+= gameforce.o
 obj-$(CONFIG_JOYSTICK_GF2K)		+= gf2k.o
 obj-$(CONFIG_JOYSTICK_GRIP)		+= grip.o
 obj-$(CONFIG_JOYSTICK_GRIP_MP)		+= grip_mp.o
--- a/dev/null	2022-01-07 20:43:58.847139940 +0100
+++ b/drivers/input/joystick/gameforce.c	2022-01-08 00:15:35.462105133 +0100
@@ -0,0 +1,1334 @@
+/*
+ * SARADC joystick & GPIO Button driver for Chi Gameforce hanheld based on :
+ * SARADC joystick & GPIO Button driver for Linux(Hardkernel ODROIDGO2-Advance)
+ */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ *
+ * Should you need to contact me, the author, you can do so either by
+ * e-mail - mail your message to <vojtech@ucw.cz>, or by paper mail:
+ * Vojtech Pavlik, Simunkova 1594, Prague 8, 182 00 Czech Republic
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/input.h>
+#include <linux/ioport.h>
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+#include <linux/gpio/consumer.h>
+#include <linux/gpio_keys.h>
+#include <linux/iio/iio.h>
+#include <linux/iio/consumer.h>
+#include <linux/iio/types.h>
+#include <linux/property.h>
+#include <linux/of_gpio.h>
+
+#define RIGHT_ADC_JOYSTICK
+#define VOLUME_ADC_KEYS
+#define	VIBRATORS_FF
+
+#ifdef RIGHT_ADC_JOYSTICK
+#include <linux/miscdevice.h>
+#include "../input-compat.h"
+#endif
+
+#define DRV_NAME "gameforce_gamepad"
+
+#ifdef VOLUME_ADC_KEYS
+struct of_device_id adckeys_of_match[] = {
+			{ .compatible = "volume-keys", },
+			{},
+};
+#endif
+
+#ifdef VIBRATORS_FF
+struct of_device_id vibrators_of_match[] = {
+			{ .compatible = "gpio,vibrators", },
+			{},
+};
+
+
+struct gpio_vib {
+	struct work_struct work;
+	int speed;
+	int index;
+	int last_index;
+	bool active;
+    int gpio0;
+	int gpio1;
+};
+#endif
+
+#ifdef VOLUME_ADC_KEYS
+struct adc_keys_button {
+	u32 voltage;
+	u32 keycode;
+};
+
+struct adc_keys_state {
+	struct iio_channel *channel;
+	u32 num_keys;
+	u32 last_key;
+	u32 keyup_voltage;
+	const struct adc_keys_button *map;
+};
+#endif
+
+struct bt_adc {
+	/* IIO ADC Channel */
+	struct iio_channel *channel;
+	/* report value (mV) */
+	int old_value;
+	/* report type */
+	int report_type;
+	/* input device init value (mV) */
+	int max, min;
+	/* calibrated adc value */
+	int cal;
+	/*  adc scale value */
+	int scale;
+	/* invert report */
+	bool invert;
+};
+
+struct bt_gpio {
+	/* GPIO Request label */
+	const char *label;
+	/* GPIO Number */
+	int num;
+	/* report type */
+	int report_type;
+	/* report linux code */
+	int linux_code;
+	/* prev button value */
+	bool old_value;
+	/* button press level */
+	bool active_level;
+};
+
+struct joypad {
+	struct device *dev;
+	int poll_interval;
+
+	/* report enable/disable */
+	bool enable;
+
+	/* report reference point */
+	bool invert_absx;
+	bool invert_absy;
+
+	/* report interval (ms) */
+	int bt_gpio_count;
+	struct bt_gpio *gpios;
+	/* button auto repeat */
+	int auto_repeat;
+
+	/* report threshold (mV) */
+	int bt_adc_fuzz, bt_adc_flat;
+	int bt_adc_x_range, bt_adc_y_range;
+	/* adc read value scale */
+	int bt_adc_scale;
+	/* joystick deadzone control */
+	int bt_adc_deadzone;
+	int bt_adc_count;
+	struct bt_adc *adcs;
+#ifdef VOLUME_ADC_KEYS
+	/*adc key saradc[2]*/
+	struct adc_keys_state *st;
+#endif
+#ifdef VIBRATORS_FF
+	/* vibrator */
+	struct gpio_vib *vib;
+#endif	
+	struct mutex lock;
+};
+
+#ifdef RIGHT_ADC_JOYSTICK
+struct input_dev *global_input = NULL;
+#endif
+/*----------------------------------------------------------------------------*/
+//
+// set to the value in the boot.ini file. (if exist)
+//
+/*----------------------------------------------------------------------------*/
+static unsigned int g_button_adc_x_range = 0;
+static unsigned int g_button_adc_y_range = 0;
+static unsigned int g_button_adc_fuzz = 0;
+static unsigned int g_button_adc_flat = 0;
+static unsigned int g_button_adc_scale = 0;
+static unsigned int g_button_adc_deadzone = 0;
+
+static int __init button_adcx_range_setup(char *str)
+{
+        if (!str)
+                return -EINVAL;
+
+	g_button_adc_x_range = simple_strtoul(str, NULL, 10);
+
+        return 0;
+}
+__setup("button-adc-x-range=", button_adcx_range_setup);
+
+static int __init button_adcy_range_setup(char *str)
+{
+        if (!str)
+                return -EINVAL;
+
+	g_button_adc_y_range = simple_strtoul(str, NULL, 10);
+
+        return 0;
+}
+__setup("button-adc-y-range=", button_adcy_range_setup);
+
+static int button_adc_fuzz(char *str)
+{
+        if (!str)
+                return -EINVAL;
+	g_button_adc_fuzz = simple_strtoul(str, NULL, 10);
+	return 0;
+}
+__setup("button-adc-fuzz=", button_adc_fuzz);
+
+static int button_adc_flat(char *str)
+{
+        if (!str)
+                return -EINVAL;
+	g_button_adc_flat = simple_strtoul(str, NULL, 10);
+	return 0;
+}
+__setup("button-adc-flat=", button_adc_flat);
+
+static int button_adc_scale(char *str)
+{
+        if (!str)
+                return -EINVAL;
+	g_button_adc_scale = simple_strtoul(str, NULL, 10);
+	return 0;
+}
+__setup("button-adc-scale=", button_adc_scale);
+
+static int button_adc_deadzone(char *str)
+{
+        if (!str)
+                return -EINVAL;
+	g_button_adc_deadzone = simple_strtoul(str, NULL, 10);
+	return 0;
+}
+__setup("button-adc-deadzone=", button_adc_deadzone);
+
+/*----------------------------------------------------------------------------*/
+/*----------------------------------------------------------------------------*/
+static int joypad_adc_read(struct bt_adc *adc)
+{
+	int value;
+
+	if (iio_read_channel_processed(adc->channel, &value))
+		return 0;
+
+	value *= adc->scale;
+
+	return (adc->invert ? (adc->max - value) : value);
+}
+
+/*----------------------------------------------------------------------------*/
+/*----------------------------------------------------------------------------*/
+/*
+ * ATTRIBUTES:
+ *
+ * /sys/devices/platform/DRV_NAME/poll_interval [rw]
+ */
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_store_poll_interval(struct device *dev,
+				      struct device_attribute *attr,
+				      const char *buf,
+				      size_t count)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	mutex_lock(&joypad->lock);
+	joypad->poll_interval = simple_strtoul(buf, NULL, 10);
+	mutex_unlock(&joypad->lock);
+
+	return count;
+}
+
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_show_poll_interval(struct device *dev,
+				     struct device_attribute *attr,
+				     char *buf)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	return sprintf(buf, "%d\n", joypad->poll_interval);
+}
+
+/*----------------------------------------------------------------------------*/
+static DEVICE_ATTR(poll_interval, S_IWUSR | S_IRUGO,
+		   joypad_show_poll_interval,
+		   joypad_store_poll_interval);
+
+/*----------------------------------------------------------------------------*/
+/*
+ * ATTRIBUTES:
+ *
+ * /sys/devices/platform/DRV_NAME/adc_fuzz [r]
+ */
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_show_adc_fuzz(struct device *dev,
+				     struct device_attribute *attr,
+				     char *buf)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	return sprintf(buf, "%d\n", joypad->bt_adc_fuzz);
+}
+
+/*----------------------------------------------------------------------------*/
+static DEVICE_ATTR(adc_fuzz, S_IWUSR | S_IRUGO,
+		   joypad_show_adc_fuzz,
+		   NULL);
+
+/*----------------------------------------------------------------------------*/
+/*
+ * ATTRIBUTES:
+ *
+ * /sys/devices/platform/DRV_NAME/adc_flat [r]
+ */
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_show_adc_flat(struct device *dev,
+				     struct device_attribute *attr,
+				     char *buf)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	return sprintf(buf, "%d\n", joypad->bt_adc_flat);
+}
+
+/*----------------------------------------------------------------------------*/
+static DEVICE_ATTR(adc_flat, S_IWUSR | S_IRUGO,
+		   joypad_show_adc_flat,
+		   NULL);
+
+/*----------------------------------------------------------------------------*/
+/*
+ * ATTRIBUTES:
+ *
+ * /sys/devices/platform/DRV_NAME/enable [rw]
+ */
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_store_enable(struct device *dev,
+				      struct device_attribute *attr,
+				      const char *buf,
+				      size_t count)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	mutex_lock(&joypad->lock);
+	joypad->enable = simple_strtoul(buf, NULL, 10);
+	mutex_unlock(&joypad->lock);
+
+	return count;
+}
+
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_show_enable(struct device *dev,
+				     struct device_attribute *attr,
+				     char *buf)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	return sprintf(buf, "%d\n", joypad->enable);
+}
+
+/*----------------------------------------------------------------------------*/
+static DEVICE_ATTR(enable, S_IWUSR | S_IRUGO,
+		   joypad_show_enable,
+		   joypad_store_enable);
+
+/*----------------------------------------------------------------------------*/
+/*
+ * ATTRIBUTES:
+ *
+ * /sys/devices/platform/DRV_NAME/adc_cal [rw]
+ */
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_store_adc_cal(struct device *dev,
+				      struct device_attribute *attr,
+				      const char *buf,
+				      size_t count)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+	bool calibration;
+
+	calibration = simple_strtoul(buf, NULL, 10);
+
+	if (calibration) {
+		int nbtn;
+
+		mutex_lock(&joypad->lock);
+		for (nbtn = 0; nbtn < joypad->bt_adc_count; nbtn++) {
+			struct bt_adc *adc = &joypad->adcs[nbtn];
+
+			adc->cal = joypad_adc_read(adc);
+			if (!adc->cal) {
+				dev_err(joypad->dev, "%s : saradc channels[%d]!\n",
+					__func__, nbtn);
+				continue;
+			}
+			adc->old_value = adc->cal;
+		}
+		mutex_unlock(&joypad->lock);
+	}
+	return count;
+}
+
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_show_adc_cal(struct device *dev,
+				     struct device_attribute *attr,
+				     char *buf)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+	int nbtn;
+	ssize_t pos;
+
+	for (nbtn = 0, pos = 0; nbtn < joypad->bt_adc_count; nbtn++) {
+		struct bt_adc *adc = &joypad->adcs[nbtn];
+		pos += sprintf(&buf[pos], "adc[%d]->cal = %d ",
+				nbtn, adc->cal);
+	}
+	pos += sprintf(&buf[pos], "\n");
+	return pos;
+}
+
+/*----------------------------------------------------------------------------*/
+static DEVICE_ATTR(adc_cal, S_IWUSR | S_IRUGO,
+		   joypad_show_adc_cal,
+		   joypad_store_adc_cal);
+
+/*----------------------------------------------------------------------------*/
+/*----------------------------------------------------------------------------*/
+static struct attribute *joypad_attrs[] = {
+	&dev_attr_poll_interval.attr,
+	&dev_attr_adc_fuzz.attr,
+	&dev_attr_adc_flat.attr,
+	&dev_attr_enable.attr,
+	&dev_attr_adc_cal.attr,
+	NULL,
+};
+
+static struct attribute_group joypad_attr_group = {
+	.attrs = joypad_attrs,
+};
+
+/*----------------------------------------------------------------------------*/
+/*----------------------------------------------------------------------------*/
+static void joypad_gpio_check(struct input_dev *input)
+{
+	struct joypad *joypad = input_get_drvdata(input);
+	int nbtn, value;
+
+	for (nbtn = 0; nbtn < joypad->bt_gpio_count; nbtn++) {
+		struct bt_gpio *gpio = &joypad->gpios[nbtn];
+
+		if (gpio_get_value_cansleep(gpio->num) < 0) {
+			dev_err(joypad->dev, "failed to get gpio state\n");
+			continue;
+		}
+		value = gpio_get_value(gpio->num);
+		if (value != gpio->old_value) {
+			input_event(input,
+				gpio->report_type,
+				gpio->linux_code,
+				(value == gpio->active_level) ? 1 : 0);
+			gpio->old_value = value;
+		}
+	}
+	input_sync(input);
+}
+
+/*----------------------------------------------------------------------------*/
+static void joypad_adc_check(struct input_dev *input)
+{
+	struct joypad *joypad = input_get_drvdata(input);
+	int nbtn, value;
+
+	for (nbtn = 0; nbtn < joypad->bt_adc_count; nbtn++) {
+		struct bt_adc *adc = &joypad->adcs[nbtn];
+
+		value = joypad_adc_read(adc);
+		if (!value) {
+			dev_err(joypad->dev, "%s : saradc channels[%d]!\n",
+				__func__, nbtn);
+			continue;
+		}
+
+		/* Joystick Deadzone check */
+		if (joypad->bt_adc_deadzone) {
+			if ((value < adc->cal + joypad->bt_adc_deadzone) &&
+			    (value > adc->cal - joypad->bt_adc_deadzone))
+				value = adc->cal;
+		}
+		value = value - adc->cal;
+		value = value > adc->max ? adc->max : value;
+		value = value < adc->min ? adc->min : value;
+
+		if (nbtn == 0)
+		{
+			// adc-x value is default inverted(h/w)
+			input_report_abs(input,
+				adc->report_type, value);
+		}
+		else
+		{
+			input_report_abs(input,
+				adc->report_type, value * (-1));
+		}
+		adc->old_value = value;
+	}
+	input_sync(input);
+}
+
+/*----------------------------------------------------------------------------*/
+#ifdef VOLUME_ADC_KEYS
+static int joypad_vol_check(struct input_dev *input)
+{
+	struct joypad *joypad = input_get_drvdata(input);
+	//struct adc_keys_state *st = dev->private;
+	int i, value, ret;
+	u32 diff, closest = 0xffffffff;
+	int keycode = 0;
+
+	ret = iio_read_channel_processed(joypad->st->channel, &value);
+	if (unlikely(ret < 0)) {
+		/* Forcibly release key if any was pressed */
+		value = joypad->st->keyup_voltage;
+	} else {
+		for (i = 0; i < joypad->st->num_keys; i++) {
+			diff = abs(joypad->st->map[i].voltage - value);
+			if (diff < closest) {
+				closest = diff;
+				keycode = joypad->st->map[i].keycode;
+			}
+		}
+	}
+
+	if (((157<value) && (value< 300)) || ((value > 320) && (value<1700)))
+		return -1;
+	if (abs(joypad->st->keyup_voltage - value) < closest)
+		keycode = 0;
+
+	if (joypad->st->last_key && joypad->st->last_key != keycode)
+		input_report_key(input, joypad->st->last_key, 0);
+
+	if (keycode)
+		input_report_key(input, keycode, 1);
+
+	input_sync(input);
+	joypad->st->last_key = keycode;
+
+	return 0;
+}
+#endif
+/*----------------------------------------------------------------------------*/
+static void joypad_poll(struct input_dev *input)
+{
+	struct joypad *joypad = input_get_drvdata(input);
+
+	if (joypad->enable) {
+		joypad_adc_check(input);
+		joypad_gpio_check(input);
+		#ifdef VOLUME_ADC_KEYS
+		joypad_vol_check(input);
+		#endif
+	}
+	if (input_get_poll_interval(input) != joypad->poll_interval) {
+		mutex_lock(&joypad->lock);
+		input_set_poll_interval(input, joypad->poll_interval);
+		mutex_unlock(&joypad->lock);
+	}
+}
+
+/*----------------------------------------------------------------------------*/
+static int joypad_open(struct input_dev *input)
+{
+	struct joypad *joypad = input_get_drvdata(input);
+	int nbtn;
+
+	for (nbtn = 0; nbtn < joypad->bt_gpio_count; nbtn++) {
+		struct bt_gpio *gpio = &joypad->gpios[nbtn];
+		gpio->old_value = gpio->active_level ? 0 : 1;
+	}
+	for (nbtn = 0; nbtn < joypad->bt_adc_count; nbtn++) {
+		struct bt_adc *adc = &joypad->adcs[nbtn];
+
+		adc->old_value = joypad_adc_read(adc);
+		if (!adc->old_value) {
+			dev_err(joypad->dev, "%s : saradc channels[%d]!\n",
+				__func__, nbtn);
+			continue;
+		}
+		adc->cal = adc->old_value;
+		dev_info(joypad->dev, "%s : adc[%d] adc->cal = %d\n",
+			__func__, nbtn, adc->cal);
+	}
+	/* buttons status sync */
+	joypad_adc_check(input);
+	joypad_gpio_check(input);
+
+	/* button report enable */
+	mutex_lock(&joypad->lock);
+	joypad->enable = true;
+	mutex_unlock(&joypad->lock);
+
+	dev_info(joypad->dev, "%s : opened\n", __func__);
+
+	return 0;
+}
+
+/*----------------------------------------------------------------------------*/
+static void joypad_close(struct input_dev *input)
+{
+	struct joypad *joypad = input_get_drvdata(input);
+
+	/* button report disable */
+	mutex_lock(&joypad->lock);
+	joypad->enable = false;
+	mutex_unlock(&joypad->lock);
+
+	dev_info(joypad->dev, "%s : closed\n", __func__);
+}
+#ifdef VIBRATORS_FF
+/**
+ * gpio_vib_set - handler to start/stop vibration
+ * @vib: pointer to vibrator structure
+ * @on: state to set
+ */
+static int gpio_vib_set(struct gpio_vib *vib, bool on)
+{
+	if (on) {
+        if (vib->last_index) {
+            gpio_direction_output(vib->gpio1, 1);
+            gpio_set_value(vib->gpio1, 1);
+        } else {
+            gpio_direction_output(vib->gpio0, 1);
+            gpio_set_value(vib->gpio0, 1);
+        }
+    }
+	else {
+        if (vib->last_index) {
+            gpio_direction_output(vib->gpio1, 0);
+            gpio_set_value(vib->gpio1, 0);
+        } else {
+            gpio_direction_output(vib->gpio0, 0);
+            gpio_set_value(vib->gpio0, 0);
+        }
+    }
+
+	return 0;
+}
+
+/**
+ * vib_work_handler - worker to set vibration level
+ * @work: pointer to work_struct
+ */
+static void vib_work_handler(struct work_struct *work)
+{
+	struct gpio_vib *vib = container_of(work, struct gpio_vib, work);
+	//struct joypad *joypad = container_of(vib, struct joypad, vib);
+	
+	/*
+	 * pmic vibrator supports voltage ranges from 1.2 to 3.1V, so
+	 * scale the level to fit into these ranges.
+	 */
+    printk("%s speed = %d\n", __func__, vib->speed);
+	if (vib->speed) {
+		vib->active = true;
+	} else {
+		vib->active = false;
+	}
+
+	gpio_vib_set(vib, vib->active);
+}
+#endif
+
+/*----------------------------------------------------------------------------*/
+static int joypad_adc_setup(struct device *dev, struct joypad *joypad)
+{
+	int nbtn = 0;
+
+	joypad->adcs = devm_kzalloc(dev, joypad->bt_adc_count *
+				sizeof(struct bt_adc), GFP_KERNEL);
+
+	if (!joypad->adcs) {
+		dev_err(dev, "%s devm_kzmalloc error!", __func__);
+		return -ENOMEM;
+	}
+
+	for (nbtn = 0; nbtn < joypad->bt_adc_count; nbtn++) {
+		struct bt_adc *adc = &joypad->adcs[nbtn];
+		enum iio_chan_type type;
+
+		adc->scale = joypad->bt_adc_scale;
+		if (nbtn) {
+			adc->channel =
+				devm_iio_channel_get(dev, "joy_y");
+			adc->report_type = ABS_Y;
+			if (joypad->invert_absy)
+				adc->invert = true;
+
+			adc->max =  (joypad->bt_adc_y_range / 2) - 1;
+			adc->min = -(joypad->bt_adc_y_range / 2);
+		}
+		else {
+			adc->channel =
+				devm_iio_channel_get(dev, "joy_x");
+			adc->report_type = ABS_X;
+			if (joypad->invert_absx)
+				adc->invert = true;
+
+			adc->max =  (joypad->bt_adc_x_range / 2) - 1;
+			adc->min = -(joypad->bt_adc_x_range / 2);
+		}
+
+		if (IS_ERR(adc->channel)) {
+			dev_err(dev, "iio channel[%d] get error\n", nbtn);
+			return -EINVAL;
+		}
+		if (!adc->channel->indio_dev)
+			return -ENXIO;
+
+		if (iio_get_channel_type(adc->channel, &type))
+			return -EINVAL;
+
+		if (type != IIO_VOLTAGE) {
+			dev_err(dev, "Incompatible channel %d type %d\n",
+				nbtn, type);
+			return -EINVAL;
+		}
+	}
+	if (nbtn == 0)
+		return -EINVAL;
+
+	return	0;
+}
+
+/*----------------------------------------------------------------------------*/
+static int joypad_gpio_setup(struct device *dev, struct joypad *joypad)
+{
+	struct device_node *node, *pp;
+	int nbtn;
+
+	node = dev->of_node;
+	if (!node)
+		return -ENODEV;
+
+	joypad->gpios = devm_kzalloc(dev, joypad->bt_gpio_count *
+				sizeof(struct bt_gpio), GFP_KERNEL);
+
+	if (!joypad->gpios) {
+		dev_err(dev, "%s devm_kzmalloc error!", __func__);
+		return -ENOMEM;
+	}
+
+	nbtn = 0;
+	for_each_child_of_node(node, pp) {
+		enum of_gpio_flags flags;
+		struct bt_gpio *gpio = &joypad->gpios[nbtn++];
+		int error;
+
+		gpio->num = of_get_gpio_flags(pp, 0, &flags);
+		if (gpio->num < 0) {
+			error = gpio->num;
+			dev_err(dev, "Failed to get gpio flags, error: %d\n",
+				error);
+			return error;
+		}
+
+		/* gpio active level(key press level) */
+		gpio->active_level = (flags & OF_GPIO_ACTIVE_LOW) ? 0 : 1;
+
+		gpio->label = of_get_property(pp, "label", NULL);
+
+		if (gpio_is_valid(gpio->num)) {
+			error = devm_gpio_request_one(dev, gpio->num,
+						      GPIOF_IN, gpio->label);
+			if (error < 0) {
+				dev_err(dev,
+					"Failed to request GPIO %d, error %d\n",
+					gpio->num, error);
+				return error;
+			}
+		}
+		if (of_property_read_u32(pp, "linux,code", &gpio->linux_code)) {
+			dev_err(dev, "Button without keycode: 0x%x\n",
+				gpio->num);
+			return -EINVAL;
+		}
+		if (of_property_read_u32(pp, "linux,input-type",
+				&gpio->report_type))
+			gpio->report_type = EV_KEY;
+	}
+	if (nbtn == 0)
+		return -EINVAL;
+
+	return	0;
+}
+
+/*----------------------------------------------------------------------------*/
+#ifdef VOLUME_ADC_KEYS
+static int joypad_vol_setup(struct device *dev, struct joypad *joypad)
+{
+	struct device_node *node, *pp;
+	struct adc_keys_button *map;
+	//struct device *adckey_dev;
+	enum iio_chan_type type;
+	int i;
+	int error;
+
+	node = NULL;
+	node = of_find_matching_node(NULL, adckeys_of_match);
+
+	if(node) {
+    
+        printk("%s into ...\n", __func__);
+		//adckey_dev = container_of(node, struct device, of_node);
+		joypad->st = devm_kzalloc(dev, sizeof(*joypad->st), GFP_KERNEL);
+		
+		joypad->st->channel = devm_iio_channel_get(dev, "volume-buttons");
+		if (IS_ERR(joypad->st->channel))
+			return PTR_ERR(joypad->st->channel);
+
+		if (!joypad->st->channel->indio_dev)
+			return -ENXIO;
+
+		error = iio_get_channel_type(joypad->st->channel, &type);
+		if (error < 0)
+			return error;
+
+		if (type != IIO_VOLTAGE) {
+			dev_err(dev, "Incompatible channel type %d\n", type);
+			return -EINVAL;
+		}
+
+		if (of_property_read_u32(node, "keyup-threshold-microvolt",
+				     &joypad->st->keyup_voltage)) {
+			dev_err(dev, "Invalid or missing keyup voltage\n");
+			return -EINVAL;
+		}
+		joypad->st->keyup_voltage /= 1000;
+        printk("%s : keyup_voltage = %d\n", __func__, joypad->st->keyup_voltage);
+
+		joypad->st->num_keys = of_get_child_count(node);
+		if (joypad->st->num_keys == 0) {
+			dev_err(dev, "keymap is missing\n");
+			return -EINVAL;
+		}
+        printk("%s : adc_keys = %d\n", __func__, joypad->st->num_keys);
+
+		map = devm_kmalloc_array(dev, joypad->st->num_keys, sizeof(*map), GFP_KERNEL);
+		if (!map)
+			return -ENOMEM;
+	
+		i = 0;
+		for_each_child_of_node(node, pp) {
+			if (of_property_read_u32(pp, "press-threshold-microvolt", &map[i].voltage)) {
+				dev_err(dev, "Key with invalid or missing voltage\n");
+				return -EINVAL;
+			}
+			map[i].voltage /= 1000;
+            printk("%s : key[%d] voltage = %d\n", __func__, i, map[i].voltage);
+
+			if (of_property_read_u32(pp, "linux,code", &map[i].keycode)) {
+				dev_err(dev, "Key with invalid or missing linux,code\n");
+				return -EINVAL;
+			}
+            printk("%s : key[%d] keycode = %d\n", __func__, i, map[i].keycode);
+
+			i++;
+		}
+		joypad->st->map = map;		
+		
+	}
+	if (i == 0)
+		return -EINVAL;
+
+    printk("%s end ...\n", __func__);
+	return	0;
+}
+#endif
+/*----------------------------------------------------------------------------*/
+#ifdef VIBRATORS_FF
+static int joypad_vib_setup(struct device *dev, struct joypad *joypad)
+{
+	struct device_node *node;
+	int ret = 0;
+
+	node = NULL;
+	node = of_find_matching_node(NULL, vibrators_of_match);
+
+	if(node) {
+    
+        printk("%s into ... joypad = %p\n", __func__, joypad);
+		joypad->vib = devm_kzalloc(dev, sizeof(*joypad->vib), GFP_KERNEL);
+		
+		joypad->vib->gpio0 = of_get_named_gpio_flags(node, "vibrator0-gpio", 0, NULL);
+		if (!gpio_is_valid(joypad->vib->gpio0))
+			return -1;
+
+        printk("%s get vibrator0-gpio = %d \n", __func__, joypad->vib->gpio0);
+		ret = devm_gpio_request(dev, joypad->vib->gpio0, "vibrator0");
+		if (ret < 0)
+			return ret;
+
+		joypad->vib->gpio1 = of_get_named_gpio_flags(node, "vibrator1-gpio", 0, NULL);
+		if (!gpio_is_valid(joypad->vib->gpio1))
+			return -1;
+
+        printk("%s get vibrator1-gpio = %d \n", __func__, joypad->vib->gpio1);
+		ret = devm_gpio_request(dev, joypad->vib->gpio1, "vibrator1");
+		if (ret < 0)
+			return ret;
+
+		INIT_WORK(&joypad->vib->work, vib_work_handler);	
+		
+	}
+
+    printk("%s end ...\n", __func__);
+	return	0;
+}
+
+/**
+ * gpio_vib_play_effect - function to handle vib effects.
+ * @dev: input device pointer
+ * @data: data of effect
+ * @effect: effect to play
+ *
+ * Currently this driver supports only rumble effects.
+ */
+static int gpio_vib_play_effect(struct input_dev *dev, void *data,
+				  struct ff_effect *effect)
+{
+    __u16 strong;
+    __u16 weak;
+	//struct joypad *joypad = input_get_drvdata(dev);
+	struct joypad *joypad = data;
+
+	printk("%s joypad gpio key count = %d\n", __func__, joypad->bt_gpio_count);
+    printk("%s joypad = %p, get vibrator0-gpio = %d \n", __func__, joypad, joypad->vib->gpio0);
+    strong = effect->u.rumble.strong_magnitude;
+    weak = effect->u.rumble.weak_magnitude;
+
+    printk("%s strong = 0x%x, weak = 0x%x\n", __func__, strong, weak);
+	#if 1
+	if ((strong > 1) && ((weak == 0) || (weak == 1))) {
+		joypad->vib->speed = effect->u.rumble.strong_magnitude >> 8;
+        joypad->vib->index = weak;
+        joypad->vib->last_index = joypad->vib->index;
+    }
+    else if ((strong == 0) && ((weak == 0) || (weak == 1))) {
+		joypad->vib->speed = 0;
+    }
+    else if ((weak > 0) && ((strong == 0) || (strong == 1))) {
+		joypad->vib->speed = effect->u.rumble.weak_magnitude >> 8;
+        joypad->vib->index = strong;
+        joypad->vib->last_index = joypad->vib->index;
+    }
+    else if ((weak > 0) && ((strong == 0) || (strong == 1))) {
+		joypad->vib->speed = 0;
+    }
+
+    printk("%s speed = %d, index = %d\n", __func__, joypad->vib->speed, joypad->vib->index);
+	schedule_work(&joypad->vib->work);
+	#endif
+	return 0;
+}
+#endif
+
+/*----------------------------------------------------------------------------*/
+static int joypad_input_setup(struct device *dev, struct joypad *joypad)
+{
+	struct input_dev *input;
+	int nbtn, error;
+
+	input = devm_input_allocate_device(dev);
+	if (!input) {
+		dev_err(dev, "no memory for input device\n");
+		return -ENOMEM;
+	}
+
+	input_setup_polling(input, joypad_poll);
+	input_set_poll_interval(input, joypad->poll_interval);
+	input_set_drvdata(input, joypad);
+
+	#ifdef RIGHT_ADC_JOYSTICK
+	global_input = input;
+	#endif
+	input->name = DRV_NAME;
+	input->phys = DRV_NAME"/input0";
+	input->open = joypad_open;
+	input->close = joypad_close;
+
+	input->id.bustype = BUS_HOST;
+	input->id.vendor  = 0x0003;
+	input->id.product = 0x0003;
+	input->id.version = 0x0302;
+
+	/* IIO ADC key setup (0 mv ~ 1800 mv) * adc->scale */
+	__set_bit(EV_ABS, input->evbit);
+	for(nbtn = 0; nbtn < joypad->bt_adc_count; nbtn++) {
+		struct bt_adc *adc = &joypad->adcs[nbtn];
+		input_set_abs_params(input, adc->report_type,
+				adc->min, adc->max,
+				joypad->bt_adc_fuzz,
+				joypad->bt_adc_flat);
+		dev_info(dev,
+			"%s : SCALE = %d, ABS min = %d, max = %d,"
+			" fuzz = %d, flat = %d, deadzone = %d\n",
+			__func__, adc->scale, adc->min, adc->max,
+			joypad->bt_adc_fuzz, joypad->bt_adc_flat,
+			joypad->bt_adc_deadzone);
+	}
+	#ifdef RIGHT_ADC_JOYSTICK
+	/* Right Analog */
+	input_set_abs_params(input, ABS_RX, -900, 899, 32, 32);
+	input_set_abs_params(input, ABS_RY, -900, 899, 32, 32);
+	#endif
+
+	/* GPIO key setup */
+	__set_bit(EV_KEY, input->evbit);
+	for(nbtn = 0; nbtn < joypad->bt_gpio_count; nbtn++) {
+		struct bt_gpio *gpio = &joypad->gpios[nbtn];
+		input_set_capability(input, gpio->report_type,
+				gpio->linux_code);
+	}
+#ifdef VOLUME_ADC_KEYS
+	/* ADC key setup */
+	for (nbtn = 0; nbtn < joypad->st->num_keys; nbtn++)
+		__set_bit(joypad->st->map[nbtn].keycode, input->keybit);
+#endif
+	if (joypad->auto_repeat)
+		__set_bit(EV_REP, input->evbit);
+#ifdef VIBRATORS_FF
+	/* vibrator for ff */
+	input_set_capability(input, EV_FF, FF_RUMBLE);
+	error = input_ff_create_memless(input, joypad, gpio_vib_play_effect);
+	if (error)
+		return error;
+#endif	
+	joypad->dev = dev;
+
+	error = input_register_device(input);
+
+	if (error) {
+		dev_err(dev, "unable to register gameforce device, err=%d\n",
+			error);
+		return error;
+	}
+
+	dev_info(dev, "gameforce: Bound to input device correctly!");
+	return 0;
+}
+
+/*----------------------------------------------------------------------------*/
+static void joypad_setup_value_check(struct device *dev, struct joypad *joypad)
+{
+	/*
+		fuzz: specifies fuzz value that is used to filter noise from
+			the event stream.
+	*/
+	if (g_button_adc_fuzz)
+		joypad->bt_adc_fuzz = g_button_adc_fuzz;
+	else
+		device_property_read_u32(dev, "button-adc-fuzz",
+					&joypad->bt_adc_fuzz);
+	/*
+		flat: values that are within this value will be discarded by
+			joydev interface and reported as 0 instead.
+	*/
+	if (g_button_adc_flat)
+		joypad->bt_adc_flat = g_button_adc_flat;
+	else
+		device_property_read_u32(dev, "button-adc-flat",
+					&joypad->bt_adc_flat);
+
+	/* Joystick report value control */
+	if (g_button_adc_scale)
+		joypad->bt_adc_scale = g_button_adc_scale;
+	else
+		device_property_read_u32(dev, "button-adc-scale",
+					&joypad->bt_adc_scale);
+
+	/* Joystick deadzone value control */
+	if (g_button_adc_deadzone)
+		joypad->bt_adc_deadzone = g_button_adc_deadzone;
+	else
+		device_property_read_u32(dev, "button-adc-deadzone",
+					&joypad->bt_adc_deadzone);
+
+	if (g_button_adc_x_range)
+		joypad->bt_adc_x_range = g_button_adc_x_range;
+	else
+		device_property_read_u32(dev, "button-adc-x-range",
+					&joypad->bt_adc_x_range);
+	if (g_button_adc_y_range)
+		joypad->bt_adc_y_range = g_button_adc_y_range;
+	else
+		device_property_read_u32(dev, "button-adc-y-range",
+					&joypad->bt_adc_y_range);
+}
+
+/*----------------------------------------------------------------------------*/
+static int joypad_dt_parse(struct device *dev, struct joypad *joypad)
+{
+	int error = 0;
+
+	/* initialize value check from boot.ini */
+	joypad_setup_value_check(dev, joypad);
+
+	device_property_read_u32(dev, "button-adc-count",
+				&joypad->bt_adc_count);
+
+	device_property_read_u32(dev, "poll-interval",
+				&joypad->poll_interval);
+
+	joypad->auto_repeat = device_property_present(dev, "autorepeat");
+
+	/* change the report reference point? (ADC MAX - read value) */
+	joypad->invert_absx = device_property_present(dev, "invert-absx");
+	joypad->invert_absy = device_property_present(dev, "invert-absy");
+	dev_info(dev, "%s : invert-absx = %d, inveret-absy = %d\n",
+		__func__, joypad->invert_absx, joypad->invert_absy);
+
+	joypad->bt_gpio_count = device_get_child_node_count(dev);
+
+	if ((joypad->bt_adc_count == 0) || (joypad->bt_gpio_count == 0)) {
+		dev_err(dev, "adc key = %d, gpio key = %d error!",
+			joypad->bt_adc_count, joypad->bt_gpio_count);
+		return -EINVAL;
+	}
+
+	error = joypad_adc_setup(dev, joypad);
+	if (error)
+		return error;
+
+	error = joypad_gpio_setup(dev, joypad);
+	if (error)
+		return error;
+#ifdef VOLUME_ADC_KEYS
+	error = joypad_vol_setup(dev, joypad);
+    printk("222 %s : error = %d\n", __func__, error);
+	if (error)
+		return error;
+#endif
+#ifdef VIBRATORS_FF
+	error = joypad_vib_setup(dev, joypad);
+    printk("333 %s : error = %d\n", __func__, error);
+	if (error)
+		return error;
+#endif	
+	return error;
+}
+
+#ifdef RIGHT_ADC_JOYSTICK
+static int joypad_misc_open(struct inode *inode, struct file *file)
+{
+	printk("%s ...\n", __func__);
+
+	//file->private_data = global_input;
+	nonseekable_open(inode, file);
+
+	return 0;
+}
+
+static int joypad_misc_release(struct inode *inode, struct file *file)
+{
+	//struct input_dev *dev = file->private_data;
+
+	//input_unregister_device(dev);
+	//kfree(dev);
+
+	return 0;
+}
+
+//static ssize_t joypad_inject_events(struct input_dev *dev, const char __user *buffer, size_t count
+static ssize_t joypad_inject_events(const char __user *buffer, size_t count)
+{
+	struct input_event ev;
+	size_t bytes = 0;
+
+	if (count != 0 && count < input_event_size())
+		return -EINVAL;
+
+	while (bytes + input_event_size() <= count) {
+		/*
+		 * Note that even if some events were fetched successfully
+		 * we are still going to return EFAULT instead of partial
+		 * count to let userspace know that it got it's buffers
+		 * all wrong.
+		 */
+		if (input_event_from_user(buffer + bytes, &ev))
+			return -EFAULT;
+
+		//input_event(dev, ev.type, ev.code, ev.value);
+		input_event(global_input, ev.type, ev.code, ev.value);
+		bytes += input_event_size();
+	}
+
+	return bytes;
+}
+
+static ssize_t joypad_misc_write(struct file *file, const char __user *buffer,
+			    size_t count, loff_t *ppos)
+{
+	//struct input_dev *dev = file->private_data;
+	int retval;
+
+	if (count == 0)
+		return 0;
+
+	retval = mutex_lock_interruptible(&global_input->mutex);
+	if (retval)
+		return retval;
+
+	//retval = joypad_inject_events(dev, buffer, count);
+	retval = joypad_inject_events(buffer, count);
+
+	mutex_unlock(&global_input->mutex);
+
+	return retval;
+}
+
+static long joypad_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
+{
+	int ret = 0;
+	return ret;
+}
+
+
+static const struct file_operations joypad_fops = {
+	.owner		= THIS_MODULE,
+	.open		= joypad_misc_open,
+	.release	= joypad_misc_release,
+	.write		= joypad_misc_write,
+	.unlocked_ioctl	= joypad_misc_ioctl,
+	.llseek		= no_llseek,
+
+};
+
+
+static struct miscdevice joypad_misc_dev = {	
+	.minor		= MISC_DYNAMIC_MINOR,
+	.name		= "joypad",
+	.fops		= &joypad_fops,
+};
+#endif
+/*----------------------------------------------------------------------------*/
+static int joypad_probe(struct platform_device *pdev)
+{
+	struct joypad *joypad;
+	struct device *dev = &pdev->dev;
+	int error;
+
+	joypad = devm_kzalloc(dev, sizeof(struct joypad), GFP_KERNEL);
+	if (!joypad) {
+		dev_err(dev, "joypad devm_kzmalloc error!");
+		return -ENOMEM;
+	}
+
+	/* device tree data parse */
+	error = joypad_dt_parse(dev, joypad);
+	if (error) {
+		dev_err(dev, "dt parse error!(err = %d)\n", error);
+		return error;
+	}
+
+	mutex_init(&joypad->lock);
+	platform_set_drvdata(pdev, joypad);
+
+	error = sysfs_create_group(&pdev->dev.kobj, &joypad_attr_group);
+	if (error) {
+		dev_err(dev, "create sysfs group fail, error: %d\n",
+			error);
+		return error;
+	}
+
+	/* poll input device setup */
+	error = joypad_input_setup(dev, joypad);
+	if (error) {
+		dev_err(dev, "input setup failed!(err = %d)\n", error);
+		return error;
+	}
+#ifdef RIGHT_ADC_JOYSTICK
+	error = misc_register(&joypad_misc_dev);
+	if (error < 0)
+		printk("%s :fail to register misc device.\n", __func__);
+#endif
+	dev_info(dev, "%s : probe success\n", __func__);
+	return 0;
+}
+
+/*----------------------------------------------------------------------------*/
+static const struct of_device_id joypad_of_match[] = {
+	/*{ .compatible = "odroidgo2-joypad", },*/
+	{ .compatible = "gameforce-gamepad", },
+	{},
+};
+
+MODULE_DEVICE_TABLE(of, joypad_of_match);
+
+/*----------------------------------------------------------------------------*/
+static struct platform_driver joypad_driver = {
+	.probe = joypad_probe,
+	.driver = {
+		.name = DRV_NAME,
+		.of_match_table = of_match_ptr(joypad_of_match),
+	},
+};
+
+/*----------------------------------------------------------------------------*/
+static int __init joypad_init(void)
+{
+	return platform_driver_register(&joypad_driver);
+}
+
+/*----------------------------------------------------------------------------*/
+static void __exit joypad_exit(void)
+{
+	platform_driver_unregister(&joypad_driver);
+}
+
+/*----------------------------------------------------------------------------*/
+late_initcall(joypad_init);
+module_exit(joypad_exit);
+
+/*----------------------------------------------------------------------------*/
+MODULE_AUTHOR("Hardkernel Co.,LTD");
+MODULE_AUTHOR("Chi Gameforce");
+MODULE_AUTHOR("Romain Tisserand");
+MODULE_DESCRIPTION("Keypad driver(ADC&GPIO) for Chi Gameforce joypad");
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("platform:" DRV_NAME);
+
+/*----------------------------------------------------------------------------*/
