diff --git a/src/core/linux/SDL_udev.c b/src/core/linux/SDL_udev.c
index a22f825..da4672f 100644
--- a/src/core/linux/SDL_udev.c
+++ b/src/core/linux/SDL_udev.c
@@ -192,12 +192,76 @@ SDL_UDEV_Quit(void)
     }
 }
 
+struct joypad_udev_entry
+{
+   const char *devnode;
+   struct udev_list_entry *item;
+   struct udev_device *dev;
+};
+
+int isNumber(const char *s) {
+  int n;
+
+  if(strlen(s) == 0) {
+    return 0;
+  }
+
+  for(n=0; n<strlen(s); n++) {
+    if(!(s[n] == '0' || s[n] == '1' || s[n] == '2' || s[n] == '3' || s[n] == '4' ||
+	 s[n] == '5' || s[n] == '6' || s[n] == '7' || s[n] == '8' || s[n] == '9'))
+      return 0;
+  }
+  return 1;
+}
+
+// compare /dev/input/eventX and /dev/input/eventY where X and Y are numbers
+int strcmp_events(const char* x, const char* y) {
+
+  // find a common string
+  int n, common, is_number;
+  int a, b;
+
+  n=0;
+  while(x[n] == y[n] && x[n] != '\0' && y[n] != '\0') {
+    n++;
+  }
+  common = n;
+
+  // check if remaining string is a number
+  is_number = 1;
+  if(isNumber(x+common) == 0) is_number = 0;
+  if(isNumber(y+common) == 0) is_number = 0;
+
+  if(is_number == 1) {
+    a = atoi(x+common);
+    b = atoi(y+common);
+
+    if(a == b) return  0;
+    if(a < b)  return -1;
+    return 1;
+  } else {
+    return strcmp(x, y);
+  }
+}
+
+/* Used for sorting devnodes to appear in the correct order */
+static int sort_devnodes(const void *a, const void *b)
+{
+   const struct joypad_udev_entry *aa = a;
+   const struct joypad_udev_entry *bb = b;
+   return strcmp_events(aa->devnode, bb->devnode);
+}
+
 void
 SDL_UDEV_Scan(void)
 {
     struct udev_enumerate *enumerate = NULL;
     struct udev_list_entry *devs = NULL;
-    struct udev_list_entry *item = NULL;  
+    struct udev_list_entry *item = NULL;
+
+    unsigned sorted_count = 0;
+    struct joypad_udev_entry sorted[64];
+    int i;
     
     if (_this == NULL) {
         return;
@@ -219,11 +283,28 @@ SDL_UDEV_Scan(void)
         const char *path = _this->syms.udev_list_entry_get_name(item);
         struct udev_device *dev = _this->syms.udev_device_new_from_syspath(_this->udev, path);
         if (dev != NULL) {
-            device_event(SDL_UDEV_DEVICEADDED, dev);
-            _this->syms.udev_device_unref(dev);
+         const char* devnode = _this->syms.udev_device_get_devnode(dev);
+         if(devnode != NULL) {
+	    sorted[sorted_count].devnode = devnode;
+	    sorted[sorted_count].dev     = dev;
+	    sorted[sorted_count].item = item;
+	    sorted_count++;
+         }
         }
     }
 
+   /* Sort the udev entries by devnode name so that they are
+    * created in the proper order */
+   qsort(sorted, sorted_count,
+         sizeof(struct joypad_udev_entry), sort_devnodes);
+
+   for (i = 0; i < sorted_count; i++)
+   {
+     device_event(SDL_UDEV_DEVICEADDED, sorted[i].dev);
+     _this->syms.udev_device_unref(sorted[i].dev);
+   }
+
+
     _this->syms.udev_enumerate_unref(enumerate);
 }
 
