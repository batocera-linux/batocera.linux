diff --git a/include/SDL_joystick.h b/include/SDL_joystick.h
index b0b1c66..802263d 100644
--- a/include/SDL_joystick.h
+++ b/include/SDL_joystick.h
@@ -184,6 +184,11 @@ extern DECLSPEC int SDLCALL SDL_JoystickEventState(int state);
 extern DECLSPEC Sint16 SDLCALL SDL_JoystickGetAxis(SDL_Joystick * joystick,
                                                    int axis);
 
+extern DECLSPEC const char *SDLCALL SDL_JoystickDevicePathById(int device_index);
+extern DECLSPEC int SDLCALL SDL_JoystickButtonEventCodeById(int device_index, int button);
+extern DECLSPEC int SDLCALL SDL_JoystickAxisEventCodeById(int device_index, int axis);
+extern DECLSPEC int SDLCALL SDL_JoystickHatEventCodeById(int device_index, int hat);
+
 /**
  *  \name Hat positions
  */
diff --git a/src/dynapi/SDL_dynapi_overrides.h b/src/dynapi/SDL_dynapi_overrides.h
index 5ae7927..7c00ce8 100644
--- a/src/dynapi/SDL_dynapi_overrides.h
+++ b/src/dynapi/SDL_dynapi_overrides.h
@@ -215,6 +215,12 @@
 #define SDL_JoystickUpdate SDL_JoystickUpdate_REAL
 #define SDL_JoystickEventState SDL_JoystickEventState_REAL
 #define SDL_JoystickGetAxis SDL_JoystickGetAxis_REAL
+
+#define SDL_JoystickDevicePathById SDL_JoystickDevicePathById_REAL
+#define SDL_JoystickButtonEventCodeById SDL_JoystickButtonEventCodeById_REAL
+#define SDL_JoystickAxisEventCodeById SDL_JoystickAxisEventCodeById_REAL
+#define SDL_JoystickHatEventCodeById SDL_JoystickHatEventCodeById_REAL
+
 #define SDL_JoystickGetHat SDL_JoystickGetHat_REAL
 #define SDL_JoystickGetBall SDL_JoystickGetBall_REAL
 #define SDL_JoystickGetButton SDL_JoystickGetButton_REAL
diff --git a/src/dynapi/SDL_dynapi_procs.h b/src/dynapi/SDL_dynapi_procs.h
index 301aff3..83eda4e 100644
--- a/src/dynapi/SDL_dynapi_procs.h
+++ b/src/dynapi/SDL_dynapi_procs.h
@@ -244,6 +244,12 @@ SDL_DYNAPI_PROC(int,SDL_JoystickNumButtons,(SDL_Joystick *a),(a),return)
 SDL_DYNAPI_PROC(void,SDL_JoystickUpdate,(void),(),)
 SDL_DYNAPI_PROC(int,SDL_JoystickEventState,(int a),(a),return)
 SDL_DYNAPI_PROC(Sint16,SDL_JoystickGetAxis,(SDL_Joystick *a, int b),(a,b),return)
+
+SDL_DYNAPI_PROC(const char*,SDL_JoystickDevicePathById,(int a),(a),return)
+SDL_DYNAPI_PROC(int,SDL_JoystickButtonEventCodeById,(int a, int b),(a,b),return)
+SDL_DYNAPI_PROC(int,SDL_JoystickAxisEventCodeById,(int a, int b),(a,b),return)
+SDL_DYNAPI_PROC(int,SDL_JoystickHatEventCodeById,(int a, int b),(a,b),return)
+
 SDL_DYNAPI_PROC(Uint8,SDL_JoystickGetHat,(SDL_Joystick *a, int b),(a,b),return)
 SDL_DYNAPI_PROC(int,SDL_JoystickGetBall,(SDL_Joystick *a, int b, int *c, int *d),(a,b,c,d),return)
 SDL_DYNAPI_PROC(Uint8,SDL_JoystickGetButton,(SDL_Joystick *a, int b),(a,b),return)
diff --git a/src/joystick/SDL_joystick.c b/src/joystick/SDL_joystick.c
index 062ece3..747123d 100644
--- a/src/joystick/SDL_joystick.c
+++ b/src/joystick/SDL_joystick.c
@@ -850,5 +850,25 @@ SDL_JoystickGUID SDL_JoystickGetGUIDFromString(const char *pchGUID)
     return guid;
 }
 
+const char *
+SDL_JoystickDevicePathById(int device_index)
+{
+  return SDL_SYS_JoystickDevicePathById( device_index );
+}
+
+int SDL_JoystickButtonEventCodeById(int device_index, int button)
+{
+  return SDL_SYS_JoystickButtonEventCodeById( device_index, button );
+}
+
+int SDL_JoystickAxisEventCodeById(int device_index, int axis)
+{
+  return SDL_SYS_JoystickAxisEventCodeById( device_index, axis );
+}
+
+int SDL_JoystickHatEventCodeById(int device_index, int hat)
+{
+  return SDL_SYS_JoystickHatEventCodeById( device_index, hat );
+}
 
 /* vi: set ts=4 sw=4 expandtab: */
diff --git a/src/joystick/SDL_sysjoystick.h b/src/joystick/SDL_sysjoystick.h
index 818509d..4812d11 100644
--- a/src/joystick/SDL_sysjoystick.h
+++ b/src/joystick/SDL_sysjoystick.h
@@ -114,4 +114,9 @@ extern SDL_bool SDL_SYS_IsXInputDeviceIndex( int device_index );
 extern SDL_bool SDL_SYS_IsXInputJoystick(SDL_Joystick * joystick);
 #endif
 
+extern const char *SDL_SYS_JoystickDevicePathById(int device_index);
+extern int SDL_SYS_JoystickButtonEventCodeById(int device_index, int button);
+extern int SDL_SYS_JoystickAxisEventCodeById(int device_index, int axis);
+extern int SDL_SYS_JoystickHatEventCodeById(int device_index, int hat);
+
 /* vi: set ts=4 sw=4 expandtab: */
diff --git a/src/joystick/linux/SDL_sysjoystick.c b/src/joystick/linux/SDL_sysjoystick.c
index 9cbddda..86c99c1 100644
--- a/src/joystick/linux/SDL_sysjoystick.c
+++ b/src/joystick/linux/SDL_sysjoystick.c
@@ -476,6 +476,16 @@ ConfigJoystick(SDL_Joystick * joystick, int fd)
     unsigned long absbit[NBITS(ABS_MAX)] = { 0 };
     unsigned long relbit[NBITS(REL_MAX)] = { 0 };
 
+    for(i=0; i<KEY_MAX; i++) {
+      joystick->hwdata->key_map[i] = -1;
+    }
+    for(i=0; i<ABS_MAX; i++) {
+      joystick->hwdata->abs_map[i] = -1;
+    }
+    for(i=0; i<ABS_MAX; i++) {
+      joystick->hwdata->hat_map[i] = -1;
+    }
+    
     /* See if this device uses the new unified event API */
     if ((ioctl(fd, EVIOCGBIT(EV_KEY, sizeof(keybit)), keybit) >= 0) &&
         (ioctl(fd, EVIOCGBIT(EV_ABS, sizeof(absbit)), absbit) >= 0) &&
@@ -878,6 +888,56 @@ SDL_JoystickGUID SDL_SYS_JoystickGetGUID(SDL_Joystick * joystick)
     return joystick->hwdata->guid;
 }
 
+const char *
+SDL_SYS_JoystickDevicePathById(int device_index)
+{
+  SDL_joylist_item* joystick = JoystickByDevIndex(device_index);
+  if(joystick == NULL) return "";
+  return joystick->hwdata->fname;
+}
+
+int SDL_SYS_JoystickButtonEventCodeById(int device_index, int button)
+{
+  int i;
+  SDL_joylist_item* joystick = JoystickByDevIndex(device_index);
+  if(joystick == NULL) return -1;
+
+  for(i=0; i<KEY_MAX; i++) {
+    if(((int)joystick->hwdata->key_map[i]) == button) {
+      return i;
+    }
+  }
+  return -1;
+}
+
+int SDL_SYS_JoystickAxisEventCodeById(int device_index, int axis)
+{
+  int i;
+  SDL_joylist_item* joystick = JoystickByDevIndex(device_index);
+  if(joystick == NULL) return -1;
+
+  for(i=0; i<ABS_MAX; i++) {
+    if(((int)joystick->hwdata->abs_map[i]) == axis) {
+      return i;
+    }
+  }
+  return -1;
+}
+
+int SDL_SYS_JoystickHatEventCodeById(int device_index, int hat)
+{
+  int i;
+  SDL_joylist_item* joystick = JoystickByDevIndex(device_index);
+  if(joystick == NULL) return -1;
+
+  for(i=0; i<ABS_MAX; i++) {
+    if(((int)joystick->hwdata->hat_map[i]) == hat) {
+      return i;
+    }
+  }
+  return -1;
+}
+
 #endif /* SDL_JOYSTICK_LINUX */
 
 /* vi: set ts=4 sw=4 expandtab: */
