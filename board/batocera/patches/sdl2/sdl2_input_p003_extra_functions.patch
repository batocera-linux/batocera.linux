diff --git a/include/SDL_joystick.h b/include/SDL_joystick.h
index 0bbeafe..0a61202 100644
--- a/include/SDL_joystick.h
+++ b/include/SDL_joystick.h
@@ -488,6 +488,14 @@ extern DECLSPEC void SDLCALL SDL_JoystickClose(SDL_Joystick *joystick);
  */
 extern DECLSPEC SDL_JoystickPowerLevel SDLCALL SDL_JoystickCurrentPowerLevel(SDL_Joystick *joystick);
 
+/**
+ * Batocera specific functions
+ */
+extern DECLSPEC const char *SDLCALL SDL_JoystickDevicePathById(int device_instance_id);
+extern DECLSPEC int SDLCALL SDL_JoystickButtonEventCodeById(int device_instance_id, int button);
+extern DECLSPEC int SDLCALL SDL_JoystickAxisEventCodeById(int device_instance_id, int axis);
+extern DECLSPEC int SDLCALL SDL_JoystickHatEventCodeById(int device_instance_id, int hat);
+
 /* Ends C function definitions when using C++ */
 #ifdef __cplusplus
 }
diff --git a/src/dynapi/SDL_dynapi_overrides.h b/src/dynapi/SDL_dynapi_overrides.h
index 221a193..6223053 100644
--- a/src/dynapi/SDL_dynapi_overrides.h
+++ b/src/dynapi/SDL_dynapi_overrides.h
@@ -788,3 +788,13 @@
 #define SDL_GameControllerGetSensorData SDL_GameControllerGetSensorData_REAL
 #define SDL_wcscasecmp SDL_wcscasecmp_REAL
 #define SDL_wcsncasecmp SDL_wcsncasecmp_REAL
+
+
+/***
+ * Batocera functions
+ */
+#define SDL_JoystickDevicePathById SDL_JoystickDevicePathById_REAL
+#define SDL_JoystickButtonEventCodeById SDL_JoystickButtonEventCodeById_REAL
+#define SDL_JoystickAxisEventCodeById SDL_JoystickAxisEventCodeById_REAL
+#define SDL_JoystickHatEventCodeById SDL_JoystickHatEventCodeById_REAL
+
diff --git a/src/dynapi/SDL_dynapi_procs.h b/src/dynapi/SDL_dynapi_procs.h
index 4aee1c4..7cb9a83 100644
--- a/src/dynapi/SDL_dynapi_procs.h
+++ b/src/dynapi/SDL_dynapi_procs.h
@@ -849,3 +849,13 @@ SDL_DYNAPI_PROC(SDL_bool,SDL_GameControllerIsSensorEnabled,(SDL_GameController *
 SDL_DYNAPI_PROC(int,SDL_GameControllerGetSensorData,(SDL_GameController *a, SDL_SensorType b, float *c, int d),(a,b,c,d),return)
 SDL_DYNAPI_PROC(int,SDL_wcscasecmp,(const wchar_t *a, const wchar_t *b),(a,b),return)
 SDL_DYNAPI_PROC(int,SDL_wcsncasecmp,(const wchar_t *a, const wchar_t *b, size_t c),(a,b,c),return)
+
+
+/***
+ * Batocera functions
+ */
+SDL_DYNAPI_PROC(const char*,SDL_JoystickDevicePathById,(int a),(a),return)
+SDL_DYNAPI_PROC(int,SDL_JoystickButtonEventCodeById,(int a, int b),(a,b),return)
+SDL_DYNAPI_PROC(int,SDL_JoystickAxisEventCodeById,(int a, int b),(a,b),return)
+SDL_DYNAPI_PROC(int,SDL_JoystickHatEventCodeById,(int a, int b),(a,b),return)
+
diff --git a/src/joystick/SDL_joystick.c b/src/joystick/SDL_joystick.c
index 771846f..2a18c94 100644
--- a/src/joystick/SDL_joystick.c
+++ b/src/joystick/SDL_joystick.c
@@ -2712,4 +2712,27 @@ int SDL_PrivateJoystickSensor(SDL_Joystick *joystick, SDL_SensorType type, const
     return posted;
 }
 
+/***
+ * Batocera functions
+ */
+const char* SDL_JoystickDevicePathById(int device_instance_id)
+{
+  return SDL_SYS_JoystickDevicePathById( device_instance_id );
+}
+
+int SDL_JoystickButtonEventCodeById(int device_instance_id, int button)
+{
+  return SDL_SYS_JoystickButtonEventCodeById( device_instance_id, button );
+}
+
+int SDL_JoystickAxisEventCodeById(int device_instance_id, int axis)
+{
+  return SDL_SYS_JoystickAxisEventCodeById( device_instance_id, axis );
+}
+
+int SDL_JoystickHatEventCodeById(int device_instance_id, int hat)
+{
+  return SDL_SYS_JoystickHatEventCodeById( device_instance_id, hat );
+}
+
 /* vi: set ts=4 sw=4 expandtab: */
diff --git a/src/joystick/SDL_joystick_c.h b/src/joystick/SDL_joystick_c.h
index de330ab..cda1b18 100644
--- a/src/joystick/SDL_joystick_c.h
+++ b/src/joystick/SDL_joystick_c.h
@@ -174,6 +174,15 @@ typedef struct _SDL_GamepadMapping
 extern SDL_bool SDL_PrivateJoystickGetAutoGamepadMapping(int device_index,
                                                          SDL_GamepadMapping *out);
 
+
+/***
+ * Batocera functions
+ */
+extern const char *SDL_SYS_JoystickDevicePathById(int device_instance_id);
+extern int SDL_SYS_JoystickButtonEventCodeById(int device_instance_id, int button);
+extern int SDL_SYS_JoystickAxisEventCodeById(int device_instance_id, int axis);
+extern int SDL_SYS_JoystickHatEventCodeById(int device_instance_id, int hat);
+
 #endif /* SDL_joystick_c_h_ */
 
 /* vi: set ts=4 sw=4 expandtab: */
diff --git a/src/joystick/linux/SDL_sysjoystick.c b/src/joystick/linux/SDL_sysjoystick.c
index 817db5f..353bfa1 100644
--- a/src/joystick/linux/SDL_sysjoystick.c
+++ b/src/joystick/linux/SDL_sysjoystick.c
@@ -845,6 +845,16 @@ ConfigJoystick(SDL_Joystick *joystick, int fd)
     unsigned long ffbit[NBITS(FF_MAX)] = { 0 };
     SDL_bool use_deadzones = SDL_GetHintBoolean(SDL_HINT_LINUX_JOYSTICK_DEADZONES, SDL_FALSE);
 
+    for(i=0; i<KEY_MAX; i++) {
+      joystick->hwdata->key_map[i] = -1;
+    }
+    for(i=0; i<ABS_MAX; i++) {
+      joystick->hwdata->abs_map[i] = -1;
+    }
+    for(i=0; i<ABS_MAX; i++) {
+      joystick->hwdata->hat_map[i] = -1;
+    }
+
     /* See if this device uses the new unified event API */
     if ((ioctl(fd, EVIOCGBIT(EV_KEY, sizeof(keybit)), keybit) >= 0) &&
         (ioctl(fd, EVIOCGBIT(EV_ABS, sizeof(absbit)), absbit) >= 0) &&
@@ -972,6 +982,7 @@ LINUX_JoystickOpen(SDL_Joystick *joystick, int device_index)
     if (joystick->hwdata == NULL) {
         return SDL_OutOfMemory();
     }
+    joystick->hwdata->fname = NULL;
     joystick->hwdata->item = item;
     joystick->hwdata->guid = item->guid;
     joystick->hwdata->effect.id = -1;
@@ -1585,6 +1596,63 @@ SDL_JoystickDriver SDL_LINUX_JoystickDriver =
     LINUX_JoystickGetGamepadMapping
 };
 
+/***
+ * Batocera functions 
+ */
+const char* SDL_SYS_JoystickDevicePathById(int device_instance_id)
+{
+  SDL_joylist_item* joystick = JoystickByDevIndex(SDL_JoystickGetDeviceIndexFromInstanceID(device_instance_id));
+  if(joystick == NULL) return "";
+  if(joystick->hwdata == NULL) return "";
+  if(joystick->hwdata->fname == NULL) return "";
+  return joystick->hwdata->fname;
+}
+
+int SDL_SYS_JoystickButtonEventCodeById(int device_instance_id, int button)
+{
+  int i;
+  SDL_joylist_item* joystick = JoystickByDevIndex(SDL_JoystickGetDeviceIndexFromInstanceID(device_instance_id));
+  if(joystick == NULL) return -1;
+  if(joystick->hwdata == NULL) return -1;
+
+  for(i=0; i<KEY_MAX; i++) {
+    if(((int)joystick->hwdata->key_map[i]) == button) {
+      return i;
+    }
+  }
+  return -1;
+}
+
+int SDL_SYS_JoystickAxisEventCodeById(int device_instance_id, int axis)
+{
+  int i;
+  SDL_joylist_item* joystick = JoystickByDevIndex(SDL_JoystickGetDeviceIndexFromInstanceID(device_instance_id));
+  if(joystick == NULL) return -1;
+  if(joystick->hwdata == NULL) return -1;
+
+  for(i=0; i<ABS_MAX; i++) {
+    if(((int)joystick->hwdata->abs_map[i]) == axis) {
+      return i;
+    }
+  }
+  return -1;
+}
+
+int SDL_SYS_JoystickHatEventCodeById(int device_instance_id, int hat)
+{
+  int i;
+  SDL_joylist_item* joystick = JoystickByDevIndex(SDL_JoystickGetDeviceIndexFromInstanceID(device_instance_id));
+  if(joystick == NULL) return -1;
+  if(joystick->hwdata == NULL) return -1;
+
+  for(i=0; i<ABS_MAX; i++) {
+    if(((int)joystick->hwdata->hat_map[i]) == hat) {
+      return i;
+    }
+  }
+  return -1;
+}
+
 #endif /* SDL_JOYSTICK_LINUX */
 
 /* vi: set ts=4 sw=4 expandtab: */
diff --git a/src/joystick/linux/SDL_sysjoystick_c.h b/src/joystick/linux/SDL_sysjoystick_c.h
index dea9405..21e1772 100644
--- a/src/joystick/linux/SDL_sysjoystick_c.h
+++ b/src/joystick/linux/SDL_sysjoystick_c.h
@@ -53,6 +53,7 @@ struct joystick_hwdata
     /* Support for the Linux 2.4 unified input interface */
     Uint8 key_map[KEY_MAX];
     Uint8 abs_map[ABS_MAX];
+    Uint8 hat_map[ABS_MAX];
     SDL_bool has_key[KEY_MAX];
     SDL_bool has_abs[ABS_MAX];
 
