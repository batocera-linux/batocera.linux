#!/bin/bash
# Setup Credentials for WIFI
#
# To import credentials enter open batocera-boot.conf (this file is visible in FAT32 in windows systems)
# and remove comments and enter your credentials, now boot BATOCERA and
# activate WiFi in EmulationStation, reboot and voila wifi credentials are imported to wifi2 settings
#
# batocera-boot.conf is available in /boot and cotain following structure
# REMOVE # in batocera-boot.conf to activate import feature!
# wifi.import.key=write your key here
# wifi.import.ssid=set your wifi SSID here
#
# Triggers for activating this script
# 1. Wifi must be activated by ES
# 2. File /boot/batocera-boot.conf contains activated wifi credentials
# 3. Values of /boot/batocera-boot.conf are not equal to batocera.conf

readonly BATOCERA_CONFIGFILE="/userdata/system/batocera.conf"
readonly WIFI_KEYFILE="/boot/batocera-boot.conf"
readonly COMMENT_CHAR="#"

function get_config() {
     local val
     local key=$1
     local file=$2
     val="$(grep -E -m1 ^$COMMENT_CHAR?\s*$key $file)"
     
     # Check comment char in /boot/batocera-boot.conf, if true set value # 
     [[ "${val:0:1}" == "$COMMENT_CHAR" && "$file" == "$WIFI_KEYFILE" ]] && val="$COMMENT_CHAR"
     
     # Check comment char in /userdata/system/batocera.conf, if true remove # sign
     [[ "${val:0:1}" == "$COMMENT_CHAR" && "$file" == "$BATOCERA_CONFIGFILE" ]] && rem_config "$key" "$file" 
     val="${val#*=}"
     echo "$val"
}

function set_config() {
     local key=$1
     local value=$2
     local file=$3
     sed -i "s|^\(\s*$key\s*=\).*|\1$value|" "$file"
}

function rem_config() {
    local key=$1
    local file=$2
    sed -i "s|^$COMMENT_CHAR\(\s*$1\)|\1|" "$file"
}

[[ "$1" == "stop" ]] || exit                                                #Only start with stop parameter paresed during /etc/init.d/ shutdown
[[ "$(get_config wifi.enabled $BATOCERA_CONFIGFILE)" -eq 1 ]] || exit       #If WiFi is disabled then exit 

psk="$(get_config wifi.import.key $WIFI_KEYFILE)"
ssid="$(get_config wifi.import.ssid $WIFI_KEYFILE)"

[[ -n "$psk" && -n "$ssid" ]] || exit                                       #If keys in batocera-boot.conf are available then proceed                                               #If key in batocera-boot.conf is empty or not setted
[[ "$psk" == "$COMMENT_CHAR" || "$ssid" == "$COMMENT_CHAR" ]] && exit       #If keys in batocera-boot.conf are commented out then proceed

[[ "$(get_config wifi2.ssid $BATOCERA_CONFIGFILE)" != "$ssid" ]] || exit    #If key in batocera-boot.conf and batocera.conf are not equal
[[ "$(get_config wifi2.key $BATOCERA_CONFIGFILE)" != "$psk" ]] || exit      #If key in batocera-boot.conf and batocera.conf are not equal

set_config wifi2.key "$psk" "$BATOCERA_CONFIGFILE"                          #Set key according to /boot/batocera-boot.conf wifi.import.key
set_config wifi2.ssid "$ssid" "$BATOCERA_CONFIGFILE"                        #Set key according to /boot/batocera-boot.conf wifi.import.ssid
