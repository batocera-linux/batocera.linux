From aaec66504ff2d4be6bde44cc2436bb2634e05009 Mon Sep 17 00:00:00 2001
From: spycat88 <spycat88@users.noreply.github.com>
Date: Sun, 12 Jan 2025 20:00:59 +0000
Subject: [PATCH] Input: add sysfs attribute to disable (rumble) support to RP5
 gamepad driver

---
 drivers/input/joystick/odin2.c | 41 +++++++++++++++++++++++++++++++++-
 1 file changed, 40 insertions(+), 1 deletion(-)

diff --git a/drivers/input/joystick/odin2.c b/drivers/input/joystick/odin2.c
index 7fa3109ccd7b..ec34725e8eaa 100644
--- a/drivers/input/joystick/odin2.c
+++ b/drivers/input/joystick/odin2.c
@@ -19,6 +19,7 @@
 #include <linux/of.h>
 #include <linux/serdev.h>
 #include <linux/slab.h>
+#include <linux/platform_device.h>
 #include <uapi/linux/sched/types.h>
 
 #define DRIVER_NAME "odin2-gamepad"
@@ -58,8 +59,12 @@ struct gamepad_device {
 	struct gpio_desc *enable_gpio;
 	struct gpio_desc *reset_gpio;
 	struct input_dev *dev_input;
+	struct platform_device *platform_dev;
 };
 
+static bool rumble_enable = true;
+module_param(rumble_enable, bool, 0660);
+
 static u8 gamepad_data_checksum(const u8 *data, size_t count)
 {
 	const u8 *ptr = data;
@@ -186,10 +191,35 @@ extern int qcom_spmi_haptics_rumble(unsigned int strong_magnitude, unsigned int
 
 static int retroid_rumble_play(struct input_dev *dev, void *data, struct ff_effect *effect)
 {
+	if (!rumble_enable)
+		return 0;
+
 	return qcom_spmi_haptics_rumble(effect->u.rumble.strong_magnitude,
 					effect->u.rumble.weak_magnitude);
 }
 
+static ssize_t rumble_enable_show(struct device *dev, struct device_attribute *attr,
+				  char *buf)
+{
+	return sprintf(buf, "%d\n", rumble_enable);
+}
+
+static ssize_t rumble_enable_store(struct device *dev, struct device_attribute *attr,
+				   const char *buf, size_t count)
+{
+	int ret;
+	bool val;
+
+	ret = kstrtobool(buf, &val);
+	if (ret)
+		return ret;
+
+	rumble_enable = val;
+	return count;
+}
+
+static DEVICE_ATTR_RW(rumble_enable);
+
 static int gamepad_mcu_uart_probe(struct serdev_device *serdev)
 {
 	struct device *dev = &serdev->dev;
@@ -287,7 +317,6 @@ static int gamepad_mcu_uart_probe(struct serdev_device *serdev)
 	input_set_abs_params(gamepad_dev->dev_input, ABS_Z, 0, 1830, 0, 30);
 	input_set_abs_params(gamepad_dev->dev_input, ABS_RZ, 0, 1830, 0, 30);
 
-		/*__set_bit(EV_FF, gamepad_dev->dev_input->evbit);*/
 		input_set_capability(gamepad_dev->dev_input, EV_FF, FF_RUMBLE);
 		input_ff_create_memless(gamepad_dev->dev_input, NULL, retroid_rumble_play);
 
@@ -295,6 +324,16 @@ static int gamepad_mcu_uart_probe(struct serdev_device *serdev)
 	if (ret)
 		return dev_err_probe(dev, ret, "Could not register input device\n");
 
+	gamepad_dev->platform_dev = platform_device_register_simple(DRIVER_NAME, -1, NULL, 0);
+	if (IS_ERR(gamepad_dev->platform_dev)) {
+		ret = PTR_ERR(gamepad_dev->platform_dev);
+		dev_warn(dev, "Failed to register platform device: %d\n", ret);
+	} else {
+		ret = device_create_file(&gamepad_dev->platform_dev->dev, &dev_attr_rumble_enable);
+		if (ret)
+			dev_warn(dev, "Failed to create rumble_enable sysfs on platform device: %d\n", ret);
+	}
+
 	serdev_device_set_client_ops(serdev, &gamepad_mcu_uart_client_ops);
 
 	gamepad_send_init_sequence(serdev);
-- 
2.34.1

