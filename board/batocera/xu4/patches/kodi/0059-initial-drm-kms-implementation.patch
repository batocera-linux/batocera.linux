From 4c62ace5dfee0ee234ab81d720b9898faa09dbb9 Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Mon, 24 Apr 2017 14:38:07 +0200
Subject: [PATCH 59/62] initial drm/kms implementation

Signed-off-by: memeka <mihailescu2m@gmail.com>
---
 xbmc/windowing/gbm/CMakeLists.txt              |  14 +
 xbmc/windowing/gbm/GBMUtils.cpp                | 518 +++++++++++++++++++++++++
 xbmc/windowing/gbm/GBMUtils.h                  |  69 ++++
 xbmc/windowing/gbm/GLContextEGL.cpp            | 186 +++++++++
 xbmc/windowing/gbm/GLContextEGL.h              |  27 ++
 xbmc/windowing/gbm/WinSystemGbm.cpp            | 129 ++++++
 xbmc/windowing/gbm/WinSystemGbm.h              |  39 ++
 xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp | 100 +++++
 xbmc/windowing/gbm/WinSystemGbmGLESContext.h   |  35 ++
 9 files changed, 1117 insertions(+)
 create mode 100644 xbmc/windowing/gbm/CMakeLists.txt
 create mode 100644 xbmc/windowing/gbm/GBMUtils.cpp
 create mode 100644 xbmc/windowing/gbm/GBMUtils.h
 create mode 100644 xbmc/windowing/gbm/GLContextEGL.cpp
 create mode 100644 xbmc/windowing/gbm/GLContextEGL.h
 create mode 100644 xbmc/windowing/gbm/WinSystemGbm.cpp
 create mode 100644 xbmc/windowing/gbm/WinSystemGbm.h
 create mode 100644 xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp
 create mode 100644 xbmc/windowing/gbm/WinSystemGbmGLESContext.h

diff --git a/xbmc/windowing/gbm/CMakeLists.txt b/xbmc/windowing/gbm/CMakeLists.txt
new file mode 100644
index 0000000..103e9d4
--- /dev/null
+++ b/xbmc/windowing/gbm/CMakeLists.txt
@@ -0,0 +1,14 @@
+set(SOURCES GLContextEGL.cpp
+            WinSystemGbm.cpp
+            GBMUtils.cpp)
+
+set(HEADERS GLContextEGL.h
+            WinSystemGbm.h
+            GBMUtils.h)
+
+if(OPENGLES_FOUND)
+  list(APPEND SOURCES WinSystemGbmGLESContext.cpp)
+  list(APPEND HEADERS WinSystemGbmGLESContext.h)
+endif()
+
+core_add_library(windowing_Gbm)
diff --git a/xbmc/windowing/gbm/GBMUtils.cpp b/xbmc/windowing/gbm/GBMUtils.cpp
new file mode 100644
index 0000000..f816e25
--- /dev/null
+++ b/xbmc/windowing/gbm/GBMUtils.cpp
@@ -0,0 +1,518 @@
+#include <errno.h>
+#include <fcntl.h>
+#include <poll.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <stdint.h>
+#include <string.h>
+#include <drm/drm_mode.h>
+#include <EGL/egl.h>
+#include <unistd.h>
+
+#include "WinSystemGbmGLESContext.h"
+#include "guilib/gui3d.h"
+#include "utils/log.h"
+#include "settings/Settings.h"
+
+#include "GBMUtils.h"
+
+static struct drm *m_drm = new drm;
+static struct drm_fb *m_drm_fb = new drm_fb;
+
+static struct gbm_bo *m_bo = nullptr;
+static struct gbm_bo *m_next_bo = nullptr;
+
+static drmModeResPtr m_drm_resources = nullptr;
+static drmModeConnectorPtr m_drm_connector = nullptr;
+static drmModeEncoderPtr m_drm_encoder = nullptr;
+static drmModeCrtcPtr m_orig_crtc = nullptr;
+
+static struct pollfd m_drm_fds;
+static drmEventContext m_drm_evctx;
+static int flip_happening = 0;
+
+bool CGBMUtils::InitGbm (RESOLUTION_INFO res)
+{
+  GetMode(res);
+
+  m_drm->gbm->width = m_drm->mode->hdisplay;
+  m_drm->gbm->height = m_drm->mode->vdisplay;
+
+  m_drm->gbm->surface = gbm_surface_create(m_drm->gbm->dev,
+					   m_drm->gbm->width,
+					   m_drm->gbm->height,
+					   GBM_FORMAT_ARGB8888,
+					   GBM_BO_USE_SCANOUT | GBM_BO_USE_RENDERING);
+
+  if (!m_drm->gbm->surface)
+  {
+    CLog::Log(LOGERROR, "CGBMUtils::%s - failed to create surface", __FUNCTION__);
+    return false;
+  }
+
+  CLog::Log(LOGDEBUG, "CGBMUtils::%s - created surface with size %dx%d",
+	    __FUNCTION__,
+	    m_drm->gbm->width,
+	    m_drm->gbm->height);
+
+  return true;
+}
+
+void CGBMUtils::DestroyGbm()
+{
+  if (m_drm->gbm->surface)
+  {
+    gbm_surface_destroy(m_drm->gbm->surface);
+  }
+
+  m_drm->gbm->surface = nullptr;
+}
+
+bool CGBMUtils::SetVideoMode(RESOLUTION_INFO res)
+{
+  GetMode(res);
+
+  gbm_surface_release_buffer(m_drm->gbm->surface, m_bo);
+
+  m_bo = gbm_surface_lock_front_buffer(m_drm->gbm->surface);
+  m_drm_fb = DrmFbGetFromBo(m_bo);
+
+  auto ret = drmModeSetCrtc(m_drm->fd,
+			    m_drm->crtc_id,
+			    m_drm_fb->fb_id,
+			    0,
+			    0,
+			    &m_drm->connector_id,
+			    1,
+			    m_drm->mode);
+
+  if (ret == -1)
+  {
+    CLog::Log(LOGERROR, "CGBMUtils::%s - failed to set crtc mode: %dx%d%s @ %d Hz",
+	      __FUNCTION__,
+	      m_drm->mode->hdisplay,
+	      m_drm->mode->vdisplay,
+	      m_drm->mode->flags & DRM_MODE_FLAG_INTERLACE ? "i" : "",
+	      m_drm->mode->vrefresh);
+
+    return false;
+  }
+
+  CLog::Log(LOGDEBUG, "CGBMUtils::%s - set crtc mode: %dx%d%s @ %d Hz",
+	    __FUNCTION__,
+	    m_drm->mode->hdisplay,
+	    m_drm->mode->vdisplay,
+	    m_drm->mode->flags & DRM_MODE_FLAG_INTERLACE ? "i" : "",
+	    m_drm->mode->vrefresh);
+
+  return true;
+}
+
+bool CGBMUtils::GetMode(RESOLUTION_INFO res)
+{
+  m_drm->mode = &m_drm_connector->modes[atoi(res.strId.c_str())];
+
+  CLog::Log(LOGDEBUG, "CGBMUtils::%s - found crtc mode: %dx%d%s @ %d Hz",
+	    __FUNCTION__,
+	    m_drm->mode->hdisplay,
+	    m_drm->mode->vdisplay,
+	    m_drm->mode->flags & DRM_MODE_FLAG_INTERLACE ? "i" : "",
+	    m_drm->mode->vrefresh);
+
+  return true;
+}
+
+void CGBMUtils::DrmFbDestroyCallback (struct gbm_bo *bo, void *data)
+{
+  struct drm_fb *fb = static_cast<drm_fb *>(data);
+
+  if (fb->fb_id)
+  {
+    drmModeRmFB (m_drm->fd, fb->fb_id);
+  }
+
+  delete (fb);
+}
+
+drm_fb * CGBMUtils::DrmFbGetFromBo (struct gbm_bo *bo)
+{
+  {
+    struct drm_fb *fb = static_cast<drm_fb *>(gbm_bo_get_user_data(bo));
+    if (fb)
+    {
+      return fb;
+    }
+  }
+
+  struct drm_fb *fb = new drm_fb;
+  fb->bo = bo;
+
+  uint32_t width = gbm_bo_get_width (bo);
+  uint32_t height = gbm_bo_get_height (bo);
+  uint32_t stride = gbm_bo_get_stride (bo);
+  uint32_t handle = gbm_bo_get_handle (bo).u32;
+
+  auto ret = drmModeAddFB(m_drm->fd,
+			  width,
+			  height,
+			  24,
+			  32,
+			  stride,
+			  handle,
+			  &fb->fb_id);
+
+  if (ret)
+  {
+    delete (fb);
+    CLog::Log(LOGDEBUG, "CGBMUtils::%s - failed to add framebuffer", __FUNCTION__);
+    return nullptr;
+  }
+
+  gbm_bo_set_user_data (bo, fb, DrmFbDestroyCallback);
+
+  return fb;
+}
+
+void CGBMUtils::PageFlipHandler(int fd, unsigned int frame,
+		  unsigned int sec, unsigned int usec, void *data)
+{
+  (void)fd, (void)frame, (void)sec, (void)usec;
+
+  int *flip_happening = static_cast<int *>(data);
+  *flip_happening = 0;
+}
+
+bool CGBMUtils::WaitingForFlip()
+{
+  if (!flip_happening)
+  {
+    return false;
+  }
+
+  m_drm_fds.revents = 0;
+
+  while (flip_happening)
+  {
+    auto ret = poll(&m_drm_fds, 1, -1);
+
+    if (ret < 0)
+    {
+      break;
+    }
+
+    if (m_drm_fds.revents & (POLLHUP | POLLERR))
+    {
+      break;
+    }
+
+    if (m_drm_fds.revents & POLLIN)
+    {
+      drmHandleEvent(m_drm->fd, &m_drm_evctx);
+    }
+  }
+
+  gbm_surface_release_buffer(m_drm->gbm->surface, m_bo);
+  m_bo = m_next_bo;
+
+  return false;
+}
+
+bool CGBMUtils::QueueFlip()
+{
+  m_next_bo = gbm_surface_lock_front_buffer(m_drm->gbm->surface);
+  m_drm_fb = DrmFbGetFromBo(m_next_bo);
+
+  auto ret = drmModePageFlip(m_drm->fd,
+			     m_drm->crtc_id,
+			     m_drm_fb->fb_id,
+			     DRM_MODE_PAGE_FLIP_EVENT,
+			     &flip_happening);
+
+  if (ret == -1)
+  {
+    CLog::Log(LOGDEBUG, "CGBMUtils::%s - failed to queue DRM page flip", __FUNCTION__);
+    return false;
+  }
+
+  return true;
+}
+
+void CGBMUtils::FlipPage()
+{
+  if (WaitingForFlip())
+  {
+    return;
+  }
+
+  flip_happening = QueueFlip();
+
+  if (g_Windowing.NoOfBuffers() >= 3 && gbm_surface_has_free_buffers(m_drm->gbm->surface))
+  {
+    return;
+  }
+
+  WaitingForFlip();
+}
+
+bool CGBMUtils::GetResources()
+{
+  m_drm_resources = drmModeGetResources (m_drm->fd);
+  if (!m_drm_resources)
+  {
+    return false;
+  }
+
+  return true;
+}
+
+bool CGBMUtils::GetConnector()
+{
+  for (auto i = 0; i < m_drm_resources->count_connectors; i++)
+  {
+    m_drm_connector = drmModeGetConnector (m_drm->fd, m_drm_resources->connectors[i]);
+    if (m_drm_connector->connection == DRM_MODE_CONNECTED)
+    {
+      CLog::Log(LOGDEBUG, "CGBMUtils::%s - found connector: %d", __FUNCTION__, m_drm_connector->connector_type);
+      break;
+    }
+    drmModeFreeConnector (m_drm_connector);
+    m_drm_connector = nullptr;
+  }
+
+  if (!m_drm_connector)
+  {
+    return false;
+  }
+
+  return true;
+}
+
+bool CGBMUtils::GetEncoder()
+{
+  for (auto i = 0; i < m_drm_resources->count_encoders; i++)
+  {
+    m_drm_encoder = drmModeGetEncoder(m_drm->fd, m_drm_resources->encoders[i]);
+    if (m_drm_encoder->encoder_id == m_drm_connector->encoder_id)
+    {
+      CLog::Log(LOGDEBUG, "CGBMUtils::%s - found encoder: %d", __FUNCTION__, m_drm_encoder->encoder_type);
+      break;
+    }
+    drmModeFreeEncoder(m_drm_encoder);
+    m_drm_encoder = nullptr;
+  }
+
+  if (!m_drm_encoder)
+  {
+    return false;
+  }
+
+  return true;
+}
+
+bool CGBMUtils::GetPreferredMode()
+{
+  for (auto i = 0; i < m_drm_connector->count_modes; i++)
+  {
+    drmModeModeInfo *current_mode = &m_drm_connector->modes[i];
+
+    if (current_mode->type & DRM_MODE_TYPE_PREFERRED)
+    {
+      m_drm->mode = current_mode;
+      CLog::Log(LOGDEBUG, "CGBMUtils::%s - found preferred mode: %dx%d%s @ %d Hz", __FUNCTION__, m_drm->mode->hdisplay, m_drm->mode->vdisplay, m_drm->mode->flags & DRM_MODE_FLAG_INTERLACE ? "i" : "", m_drm->mode->vrefresh);
+    }
+  }
+
+  if (!m_drm->mode)
+  {
+    CLog::Log(LOGDEBUG, "CGBMUtils::%s - failed to find preferred mode", __FUNCTION__);
+    return false;
+  }
+
+  return true;
+}
+
+drm * CGBMUtils::InitDrm()
+{
+  const char *device = "/dev/dri/card0";
+
+  m_drm->fd = open (device, O_RDWR);
+
+  if (m_drm->fd < 0)
+  {
+    return nullptr;
+  }
+
+  if (!GetResources())
+  {
+    return nullptr;
+  }
+
+  if (!GetConnector())
+  {
+    return nullptr;
+  }
+
+  if (!GetEncoder())
+  {
+    return nullptr;
+  }
+  else
+  {
+    m_drm->crtc_id = m_drm_encoder->crtc_id;
+  }
+
+  if (!GetPreferredMode())
+  {
+    return nullptr;
+  }
+
+  for (auto i = 0; i < m_drm_resources->count_crtcs; i++)
+  {
+    if (m_drm_resources->crtcs[i] == m_drm->crtc_id)
+    {
+      m_drm->crtc_index = i;
+      break;
+    }
+  }
+
+  drmModeFreeResources(m_drm_resources);
+
+  drmSetMaster(m_drm->fd);
+
+  m_drm->gbm = new gbm;
+  m_drm->gbm->dev = gbm_create_device (m_drm->fd);
+  m_drm->gbm->surface = nullptr;
+
+  m_drm_fds.fd = m_drm->fd;
+  m_drm_fds.events = POLLIN;
+
+  m_drm_evctx.version = DRM_EVENT_CONTEXT_VERSION;
+  m_drm_evctx.page_flip_handler = PageFlipHandler;
+
+  m_drm->connector_id = m_drm_connector->connector_id;
+  m_orig_crtc = drmModeGetCrtc(m_drm->fd, m_drm->crtc_id);
+
+  return m_drm;
+}
+
+bool CGBMUtils::RestoreOriginalMode()
+{
+  if (!m_orig_crtc)
+  {
+     return false;
+  }
+
+  auto ret = drmModeSetCrtc(m_drm->fd,
+			    m_orig_crtc->crtc_id,
+			    m_orig_crtc->buffer_id,
+			    m_orig_crtc->x,
+			    m_orig_crtc->y,
+			    &m_drm->connector_id,
+			    1,
+			    &m_orig_crtc->mode);
+
+  if (ret)
+  {
+    CLog::Log(LOGERROR, "CGBMUtils::%s - failed to set original crtc mode", __FUNCTION__);
+    return false;
+  }
+
+  CLog::Log(LOGDEBUG, "CGBMUtils::%s - set original crtc mode", __FUNCTION__);
+
+  drmModeFreeCrtc(m_orig_crtc);
+  m_orig_crtc = nullptr;
+
+  return true;
+}
+
+void CGBMUtils::DestroyDrm()
+{
+  RestoreOriginalMode();
+
+  if (m_drm->gbm->surface)
+  {
+     gbm_surface_destroy(m_drm->gbm->surface);
+  }
+
+  if (m_drm->gbm->dev)
+  {
+     gbm_device_destroy(m_drm->gbm->dev);
+  }
+
+  if (m_drm_encoder)
+  {
+     drmModeFreeEncoder(m_drm_encoder);
+  }
+
+  if (m_drm_connector)
+  {
+     drmModeFreeConnector(m_drm_connector);
+  }
+
+  if (m_drm_resources)
+  {
+     drmModeFreeResources(m_drm_resources);
+  }
+
+  drmDropMaster(m_drm->fd);
+  close(m_drm->fd);
+
+  m_drm_encoder = nullptr;
+  m_drm_connector = nullptr;
+  m_drm_resources = nullptr;
+
+  m_drm->connector = nullptr;
+  m_drm->connector_id = 0;
+  m_drm->crtc = nullptr;
+  m_drm->crtc_id = 0;
+  m_drm->crtc_index = 0;
+  m_drm->fd = 0;
+  m_drm->gbm = nullptr;
+  m_drm->mode = nullptr;
+
+  m_bo = nullptr;
+  m_next_bo = nullptr;
+}
+
+bool CGBMUtils::GetModes(std::vector<RESOLUTION_INFO> &resolutions)
+{
+  for (auto i = 0; i < m_drm_connector->count_modes; i++)
+  {
+    RESOLUTION_INFO res;
+    res.iScreen = 0;
+    res.iWidth = m_drm_connector->modes[i].hdisplay;
+    res.iHeight = m_drm_connector->modes[i].vdisplay;
+    res.iScreenWidth = m_drm_connector->modes[i].hdisplay;
+    res.iScreenHeight = m_drm_connector->modes[i].vdisplay;
+    res.fRefreshRate = m_drm_connector->modes[i].vrefresh;
+    res.iSubtitles = static_cast<int>(0.965 * res.iHeight);
+    res.fPixelRatio = 1.0f;
+    res.bFullScreen = true;
+    res.strMode = m_drm_connector->modes[i].name;
+    res.strId = std::to_string(i);
+
+    if (m_drm_connector->modes[i].flags & DRM_MODE_FLAG_3D_MASK)
+    {
+      if (m_drm_connector->modes[i].flags & DRM_MODE_FLAG_3D_TOP_AND_BOTTOM)
+      {
+	res.dwFlags = D3DPRESENTFLAG_MODE3DTB;
+      }
+      else if (m_drm_connector->modes[i].flags & DRM_MODE_FLAG_3D_SIDE_BY_SIDE_HALF)
+      {
+	res.dwFlags = D3DPRESENTFLAG_MODE3DSBS;
+      }
+    }
+    else if (m_drm_connector->modes[i].flags & DRM_MODE_FLAG_INTERLACE)
+    {
+      res.dwFlags = D3DPRESENTFLAG_INTERLACED;
+    }
+    else
+    {
+      res.dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+    }
+
+    resolutions.push_back(res);
+  }
+
+  return resolutions.size() > 0;
+}
diff --git a/xbmc/windowing/gbm/GBMUtils.h b/xbmc/windowing/gbm/GBMUtils.h
new file mode 100644
index 0000000..3e1e043
--- /dev/null
+++ b/xbmc/windowing/gbm/GBMUtils.h
@@ -0,0 +1,69 @@
+#pragma once
+
+#include <xf86drm.h>
+#include <xf86drmMode.h>
+#include <gbm.h>
+#include <vector>
+
+#include "guilib/Resolution.h"
+
+struct gbm {
+    struct gbm_device *dev;
+    struct gbm_surface *surface;
+    int width, height;
+};
+
+struct crtc {
+    drmModeCrtc *crtc;
+    drmModeObjectProperties *props;
+    drmModePropertyRes **props_info;
+};
+
+struct connector {
+    drmModeConnector *connector;
+    drmModeObjectProperties *props;
+    drmModePropertyRes **props_info;
+};
+
+struct drm {
+    int fd;
+
+    struct gbm *gbm;
+
+    struct crtc *crtc;
+    struct connector *connector;
+    int crtc_index;
+
+    drmModeModeInfo *mode;
+    uint32_t crtc_id;
+    uint32_t connector_id;
+};
+
+struct drm_fb {
+    struct gbm_bo *bo;
+    uint32_t fb_id;
+};
+
+class CGBMUtils
+{
+public:
+  static drm * InitDrm();
+  static bool InitGbm(RESOLUTION_INFO res);
+  static void DestroyGbm();
+  static bool SetVideoMode(RESOLUTION_INFO res);
+  static void FlipPage();
+  static void DestroyDrm();
+  static bool GetModes(std::vector<RESOLUTION_INFO> &resolutions);
+private:
+  static bool GetMode(RESOLUTION_INFO res);
+  static bool GetResources();
+  static bool GetConnector();
+  static bool GetEncoder();
+  static bool GetPreferredMode();
+  static bool RestoreOriginalMode();
+  static bool WaitingForFlip();
+  static bool QueueFlip();
+  static void PageFlipHandler(int fd, unsigned int frame, unsigned int sec, unsigned int usec, void *data);
+  static void DrmFbDestroyCallback(struct gbm_bo *bo, void *data);
+  static drm_fb * DrmFbGetFromBo(struct gbm_bo *bo);
+};
diff --git a/xbmc/windowing/gbm/GLContextEGL.cpp b/xbmc/windowing/gbm/GLContextEGL.cpp
new file mode 100644
index 0000000..e7c8a74
--- /dev/null
+++ b/xbmc/windowing/gbm/GLContextEGL.cpp
@@ -0,0 +1,186 @@
+#include "GLContextEGL.h"
+
+#include <EGL/eglext.h>
+#include "guilib/IDirtyRegionSolver.h"
+#include "settings/AdvancedSettings.h"
+#include "utils/log.h"
+
+CGLContextEGL::CGLContextEGL() :
+  m_eglDisplay(EGL_NO_DISPLAY),
+  m_eglSurface(EGL_NO_SURFACE),
+  m_eglContext(EGL_NO_CONTEXT),
+  m_eglConfig(0)
+{
+}
+
+CGLContextEGL::~CGLContextEGL()
+{
+  Destroy();
+}
+
+bool CGLContextEGL::CreateDisplay(gbm_device* display,
+                                  EGLint renderable_type,
+                                  EGLint rendering_api)
+{
+  EGLint neglconfigs = 0;
+  int major, minor;
+
+  EGLint attribs[] =
+  {
+    EGL_RED_SIZE,        8,
+    EGL_GREEN_SIZE,      8,
+    EGL_BLUE_SIZE,       8,
+    EGL_ALPHA_SIZE,      8,
+    EGL_DEPTH_SIZE,     16,
+    EGL_STENCIL_SIZE,    0,
+    EGL_SAMPLE_BUFFERS,  0,
+    EGL_SAMPLES,         0,
+    EGL_SURFACE_TYPE,    EGL_WINDOW_BIT,
+    EGL_RENDERABLE_TYPE, renderable_type,
+    EGL_NONE
+  };
+
+#ifdef EGL_EXT_platform_base
+  if (m_eglDisplay == EGL_NO_DISPLAY)
+  {
+    PFNEGLGETPLATFORMDISPLAYEXTPROC getPlatformDisplayEXT = (PFNEGLGETPLATFORMDISPLAYEXTPROC)eglGetProcAddress("eglGetPlatformDisplayEXT");
+    if (getPlatformDisplayEXT)
+    {
+      m_eglDisplay = getPlatformDisplayEXT(EGL_PLATFORM_GBM_KHR, (EGLNativeDisplayType)display, NULL);
+    }
+  }
+#endif
+
+  if (m_eglDisplay == EGL_NO_DISPLAY)
+  {
+    m_eglDisplay = eglGetDisplay((EGLNativeDisplayType)display);
+  }
+
+  if (m_eglDisplay == EGL_NO_DISPLAY)
+  {
+    CLog::Log(LOGERROR, "failed to get EGL display");
+    return false;
+  }
+
+  if (!eglInitialize(m_eglDisplay, &major, &minor))
+  {
+    CLog::Log(LOGERROR, "failed to initialize EGL display");
+    return false;
+  }
+
+  eglBindAPI(rendering_api);
+
+  if (!eglChooseConfig(m_eglDisplay, attribs,
+                       &m_eglConfig, 1, &neglconfigs))
+  {
+    CLog::Log(LOGERROR, "Failed to query number of EGL configs");
+    return false;
+  }
+
+  if (neglconfigs <= 0)
+  {
+    CLog::Log(LOGERROR, "No suitable EGL configs found");
+    return false;
+  }
+
+  return true;
+}
+
+bool CGLContextEGL::CreateContext()
+{
+  int client_version = 2;
+
+  const EGLint context_attribs[] = {
+    EGL_CONTEXT_CLIENT_VERSION, client_version, EGL_NONE
+  };
+
+  if (m_eglContext == EGL_NO_CONTEXT)
+  {
+  m_eglContext = eglCreateContext(m_eglDisplay, m_eglConfig,
+                                  EGL_NO_CONTEXT, context_attribs);
+  }
+
+  if (m_eglContext == EGL_NO_CONTEXT)
+  {
+    CLog::Log(LOGERROR, "failed to create EGL context");
+    return false;
+  }
+
+  return true;
+}
+
+bool CGLContextEGL::BindContext()
+{
+  if (!eglMakeCurrent(m_eglDisplay, m_eglSurface,
+                      m_eglSurface, m_eglContext))
+  {
+    CLog::Log(LOGERROR, "Failed to make context current %p %p %p",
+                         m_eglDisplay, m_eglSurface, m_eglContext);
+    return false;
+  }
+
+  return true;
+}
+
+bool CGLContextEGL::CreateSurface(gbm_surface* surface)
+{
+  EGLNativeWindowType egl_nwin = (EGLNativeWindowType)surface;
+
+  m_eglSurface = eglCreateWindowSurface(m_eglDisplay,
+                                        m_eglConfig,
+                                        egl_nwin, nullptr);
+
+  if (m_eglSurface == EGL_NO_SURFACE)
+  {
+    CLog::Log(LOGERROR, "failed to create EGL window surface %d", eglGetError());
+    return false;
+  }
+
+  return true;
+}
+
+void CGLContextEGL::Destroy()
+{
+  if (m_eglContext != EGL_NO_CONTEXT)
+  {
+    eglDestroyContext(m_eglDisplay, m_eglContext);
+    eglMakeCurrent(m_eglDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);
+    m_eglContext = EGL_NO_CONTEXT;
+  }
+
+  if (m_eglSurface != EGL_NO_SURFACE)
+  {
+    eglDestroySurface(m_eglDisplay, m_eglSurface);
+    m_eglSurface = EGL_NO_SURFACE;
+  }
+
+  if (m_eglDisplay != EGL_NO_DISPLAY)
+  {
+    eglTerminate(m_eglDisplay);
+    m_eglDisplay = EGL_NO_DISPLAY;
+  }
+}
+
+void CGLContextEGL::Detach()
+{
+  if (m_eglContext != EGL_NO_CONTEXT)
+  {
+    eglMakeCurrent(m_eglDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);
+  }
+
+  if (m_eglSurface != EGL_NO_SURFACE)
+  {
+    eglDestroySurface(m_eglDisplay, m_eglSurface);
+    m_eglSurface = EGL_NO_SURFACE;
+  }
+}
+
+void CGLContextEGL::SwapBuffers()
+{
+  if (m_eglDisplay == EGL_NO_DISPLAY || m_eglSurface == EGL_NO_SURFACE)
+  {
+    return;
+  }
+
+  eglSwapBuffers(m_eglDisplay, m_eglSurface);
+}
diff --git a/xbmc/windowing/gbm/GLContextEGL.h b/xbmc/windowing/gbm/GLContextEGL.h
new file mode 100644
index 0000000..2d1e739
--- /dev/null
+++ b/xbmc/windowing/gbm/GLContextEGL.h
@@ -0,0 +1,27 @@
+#pragma once
+
+#include "EGL/egl.h"
+#include "gbm.h"
+
+class CGLContextEGL
+{
+public:
+  CGLContextEGL();
+  virtual ~CGLContextEGL();
+
+  bool CreateDisplay(gbm_device* connection,
+                     EGLint renderable_type,
+                     EGLint rendering_api);
+
+  bool CreateSurface(gbm_surface* surface);
+  bool CreateContext();
+  bool BindContext();
+  void Destroy();
+  void Detach();
+  void SwapBuffers();
+
+  EGLDisplay m_eglDisplay;
+  EGLSurface m_eglSurface;
+  EGLContext m_eglContext;
+  EGLConfig m_eglConfig;
+};
diff --git a/xbmc/windowing/gbm/WinSystemGbm.cpp b/xbmc/windowing/gbm/WinSystemGbm.cpp
new file mode 100644
index 0000000..08a9aa7
--- /dev/null
+++ b/xbmc/windowing/gbm/WinSystemGbm.cpp
@@ -0,0 +1,129 @@
+#include "WinSystemGbm.h"
+
+#include <string.h>
+
+#include "guilib/GraphicContext.h"
+#include "settings/DisplaySettings.h"
+#include "utils/log.h"
+
+CWinSystemGbm::CWinSystemGbm() :
+  m_drm(nullptr)
+{
+  m_eWindowSystem = WINDOW_SYSTEM_GBM;
+}
+
+bool CWinSystemGbm::InitWindowSystem()
+{
+  m_drm = CGBMUtils::InitDrm();
+
+  if (!m_drm)
+  {
+    CLog::Log(LOGERROR, "CWinSystemGbm::%s - failed to initialize DRM", __FUNCTION__);
+    return false;
+  }
+
+  CLog::Log(LOGDEBUG, "CWinSystemGbm::%s - initialized DRM", __FUNCTION__);
+  return CWinSystemBase::InitWindowSystem();
+}
+
+bool CWinSystemGbm::DestroyWindowSystem()
+{
+  CGBMUtils::DestroyDrm();
+  m_drm = nullptr;
+
+  CLog::Log(LOGDEBUG, "CWinSystemGbm::%s - deinitialized DRM", __FUNCTION__);
+  return true;
+}
+
+bool CWinSystemGbm::CreateNewWindow(const std::string& name,
+                                    bool fullScreen,
+                                    RESOLUTION_INFO& res,
+                                    PHANDLE_EVENT_FUNC userFunction)
+{
+  if (!CGBMUtils::InitGbm(res))
+  {
+    CLog::Log(LOGERROR, "CWinSystemGbm::%s - failed to initialize GBM", __FUNCTION__);
+    return false;
+  }
+
+  CLog::Log(LOGDEBUG, "CWinSystemGbm::%s - initialized GBM", __FUNCTION__);
+  return true;
+}
+
+bool CWinSystemGbm::DestroyWindow()
+{
+  CGBMUtils::DestroyGbm();
+
+  CLog::Log(LOGDEBUG, "CWinSystemGbm::%s - deinitialized GBM", __FUNCTION__);
+  return true;
+}
+
+void CWinSystemGbm::UpdateResolutions()
+{
+  CWinSystemBase::UpdateResolutions();
+
+  UpdateDesktopResolution(CDisplaySettings::GetInstance().GetResolutionInfo(RES_DESKTOP),
+			  0,
+			  m_drm->mode->hdisplay,
+			  m_drm->mode->vdisplay,
+			  m_drm->mode->vrefresh);
+
+  std::vector<RESOLUTION_INFO> resolutions;
+
+  if (!CGBMUtils::GetModes(resolutions) || resolutions.empty())
+  {
+    CLog::Log(LOGWARNING, "CWinSystemGbm::%s - Failed to get resolutions", __FUNCTION__);
+  }
+  else
+  {
+    for (auto i = 0; i < resolutions.size(); i++)
+    {
+      g_graphicsContext.ResetOverscan(resolutions[i]);
+      CDisplaySettings::GetInstance().AddResolutionInfo(resolutions[i]);
+
+      CLog::Log(LOGNOTICE, "Found resolution for display %d with %dx%d%s @ %f Hz",
+		resolutions[i].iScreen,
+		resolutions[i].iScreenWidth,
+		resolutions[i].iScreenHeight,
+		resolutions[i].dwFlags & D3DPRESENTFLAG_INTERLACED ? "i" : "",
+		resolutions[i].fRefreshRate);
+    }
+  }
+
+  CDisplaySettings::GetInstance().ApplyCalibrations();
+}
+
+bool CWinSystemGbm::ResizeWindow(int newWidth, int newHeight, int newLeft, int newTop)
+{
+  return true;
+}
+
+bool CWinSystemGbm::SetFullScreen(bool fullScreen, RESOLUTION_INFO& res, bool blankOtherDisplays)
+{
+  auto ret = CGBMUtils::SetVideoMode(res);
+
+  if (!ret)
+  {
+    return false;
+  }
+
+  return true;
+}
+
+bool CWinSystemGbm::Hide()
+{
+  return false;
+}
+
+bool CWinSystemGbm::Show(bool raise)
+{
+  return true;
+}
+
+void CWinSystemGbm::Register(IDispResource * /*resource*/)
+{
+}
+
+void CWinSystemGbm::Unregister(IDispResource * /*resource*/)
+{
+}
diff --git a/xbmc/windowing/gbm/WinSystemGbm.h b/xbmc/windowing/gbm/WinSystemGbm.h
new file mode 100644
index 0000000..85d5a1d
--- /dev/null
+++ b/xbmc/windowing/gbm/WinSystemGbm.h
@@ -0,0 +1,39 @@
+#pragma once
+
+#include <gbm.h>
+
+#include "threads/CriticalSection.h"
+#include "windowing/WinSystem.h"
+#include "GBMUtils.h"
+
+class IDispResource;
+
+class CWinSystemGbm : public CWinSystemBase
+{
+public:
+  CWinSystemGbm();
+  virtual ~CWinSystemGbm() = default;
+
+  bool InitWindowSystem() override;
+  bool DestroyWindowSystem() override;
+
+  bool CreateNewWindow(const std::string& name,
+                       bool fullScreen,
+                       RESOLUTION_INFO& res,
+                       PHANDLE_EVENT_FUNC userFunction) override;
+
+  bool DestroyWindow() override;
+
+  bool ResizeWindow(int newWidth, int newHeight, int newLeft, int newTop) override;
+  bool SetFullScreen(bool fullScreen, RESOLUTION_INFO& res, bool blankOtherDisplays) override;
+
+  void UpdateResolutions() override;
+
+  bool Hide() override;
+  bool Show(bool raise = true) override;
+  virtual void Register(IDispResource *resource);
+  virtual void Unregister(IDispResource *resource);
+
+protected:
+  drm* m_drm;
+};
diff --git a/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp b/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp
new file mode 100644
index 0000000..3178763
--- /dev/null
+++ b/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp
@@ -0,0 +1,100 @@
+#include "WinSystemGbmGLESContext.h"
+#include "utils/log.h"
+
+bool CWinSystemGbmGLESContext::InitWindowSystem()
+{
+  if (!CWinSystemGbm::InitWindowSystem())
+  {
+    return false;
+  }
+
+  if (!m_pGLContext.CreateDisplay(m_drm->gbm->dev,
+                                  EGL_OPENGL_ES2_BIT,
+                                  EGL_OPENGL_ES_API))
+  {
+    return false;
+  }
+
+  return true;
+}
+
+bool CWinSystemGbmGLESContext::CreateNewWindow(const std::string& name,
+                                               bool fullScreen,
+                                               RESOLUTION_INFO& res,
+                                               PHANDLE_EVENT_FUNC userFunction)
+{
+  m_pGLContext.Detach();
+
+  if (!CWinSystemGbm::DestroyWindow())
+  {
+    return false;
+  }
+
+  if (!CWinSystemGbm::CreateNewWindow(name, fullScreen, res, userFunction))
+  {
+    return false;
+  }
+
+  if (!m_pGLContext.CreateSurface(m_drm->gbm->surface))
+  {
+    return false;
+  }
+
+  if (!m_pGLContext.CreateContext())
+  {
+    return false;
+  }
+
+  if (!m_pGLContext.BindContext())
+  {
+    return false;
+  }
+
+  return true;
+}
+
+bool CWinSystemGbmGLESContext::SetFullScreen(bool fullScreen, RESOLUTION_INFO& res, bool blankOtherDisplays)
+{
+  if (res.iWidth != m_drm->mode->hdisplay ||
+      res.iHeight != m_drm->mode->vdisplay)
+  {
+    CLog::Log(LOGDEBUG, "CWinSystemGbmGLESContext::%s - resolution changed, creating a new window", __FUNCTION__);
+    CreateNewWindow("", fullScreen, res, nullptr);
+  }
+
+  m_pGLContext.SwapBuffers();
+
+  CWinSystemGbm::SetFullScreen(fullScreen, res, blankOtherDisplays);
+  CRenderSystemGLES::ResetRenderSystem(res.iWidth, res.iHeight, fullScreen, res.fRefreshRate);
+
+  return true;
+}
+
+void CWinSystemGbmGLESContext::PresentRenderImpl(bool rendered)
+{
+  if (rendered)
+  {
+    m_pGLContext.SwapBuffers();
+    CGBMUtils::FlipPage();
+  }
+}
+
+EGLDisplay CWinSystemGbmGLESContext::GetEGLDisplay() const
+{
+  return m_pGLContext.m_eglDisplay;
+}
+
+EGLSurface CWinSystemGbmGLESContext::GetEGLSurface() const
+{
+  return m_pGLContext.m_eglSurface;
+}
+
+EGLContext CWinSystemGbmGLESContext::GetEGLContext() const
+{
+  return m_pGLContext.m_eglContext;
+}
+
+EGLConfig  CWinSystemGbmGLESContext::GetEGLConfig() const
+{
+  return m_pGLContext.m_eglConfig;
+}
diff --git a/xbmc/windowing/gbm/WinSystemGbmGLESContext.h b/xbmc/windowing/gbm/WinSystemGbmGLESContext.h
new file mode 100644
index 0000000..3913cde
--- /dev/null
+++ b/xbmc/windowing/gbm/WinSystemGbmGLESContext.h
@@ -0,0 +1,35 @@
+#pragma once
+
+#include "GLContextEGL.h"
+#include "rendering/gles/RenderSystemGLES.h"
+#include "utils/GlobalsHandling.h"
+#include "WinSystemGbm.h"
+
+class CWinSystemGbmGLESContext : public CWinSystemGbm, public CRenderSystemGLES
+{
+public:
+  CWinSystemGbmGLESContext() = default;
+  virtual ~CWinSystemGbmGLESContext() = default;
+
+  bool InitWindowSystem() override;
+  bool CreateNewWindow(const std::string& name,
+                       bool fullScreen,
+                       RESOLUTION_INFO& res,
+                       PHANDLE_EVENT_FUNC userFunction) override;
+
+  bool SetFullScreen(bool fullScreen, RESOLUTION_INFO& res, bool blankOtherDisplays) override;
+  EGLDisplay GetEGLDisplay() const;
+  EGLSurface GetEGLSurface() const;
+  EGLContext GetEGLContext() const;
+  EGLConfig  GetEGLConfig() const;
+protected:
+  void SetVSyncImpl(bool enable) override { return; };
+  void PresentRenderImpl(bool rendered) override;
+
+private:
+  CGLContextEGL m_pGLContext;
+
+};
+
+XBMC_GLOBAL_REF(CWinSystemGbmGLESContext, g_Windowing);
+#define g_Windowing XBMC_GLOBAL_USE(CWinSystemGbmGLESContext)
-- 
2.7.4

