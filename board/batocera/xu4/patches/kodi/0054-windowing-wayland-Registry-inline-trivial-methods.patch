From fb4c2d7c7037c265409d84ae64679abc259ac685 Mon Sep 17 00:00:00 2001
From: Max Kellermann <max.kellermann@gmail.com>
Date: Mon, 24 Apr 2017 14:38:09 +0200
Subject: [PATCH 54/62] windowing/wayland/Registry: inline trivial methods

Signed-off-by: memeka <mihailescu2m@gmail.com>
---
 xbmc/windowing/wayland/Registry.cpp | 25 -------------------------
 xbmc/windowing/wayland/Registry.h   | 17 ++++++++++++++---
 2 files changed, 14 insertions(+), 28 deletions(-)

diff --git a/xbmc/windowing/wayland/Registry.cpp b/xbmc/windowing/wayland/Registry.cpp
index ead9e1f..c9caa2a 100644
--- a/xbmc/windowing/wayland/Registry.cpp
+++ b/xbmc/windowing/wayland/Registry.cpp
@@ -17,7 +17,6 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <wayland-client.h>
 
 #include "Registry.h"
 
@@ -29,13 +28,6 @@ const struct wl_registry_listener xw::Registry::m_listener =
   Registry::HandleRemoveGlobalCallback
 };
 
-/* Only one observer may be registered at a time */
-void
-xw::ExtraWaylandGlobals::SetHandler(const GlobalHandler &handler)
-{
-  m_handler = handler;
-}
-
 void
 xw::ExtraWaylandGlobals::NewGlobal(struct wl_registry *registry,
                                    uint32_t name,
@@ -77,23 +69,6 @@ xw::Registry::Registry(struct wl_display *display,
                            reinterpret_cast<void *>(this));
 }
 
-xw::Registry::~Registry()
-{
-  wl_registry_destroy(m_registry);
-}
-
-/* Once a global becomes available, we immediately bind to it here
- * and then notify the injected listener interface that the global
- * is available on a named object. This allows that interface to
- * respond to the arrival of the new global how it wishes */
-void *
-xw::Registry::BindInternal(uint32_t name,
-                           const struct wl_interface *interface,
-                           uint32_t version)
-{
-  return wl_registry_bind(m_registry, name, interface, version);
-}
-
 void
 xw::Registry::HandleGlobal(uint32_t name,
                            const char *interface,
diff --git a/xbmc/windowing/wayland/Registry.h b/xbmc/windowing/wayland/Registry.h
index 30abe3f..a2482b8 100644
--- a/xbmc/windowing/wayland/Registry.h
+++ b/xbmc/windowing/wayland/Registry.h
@@ -41,7 +41,10 @@ public:
                              const char *,
                              uint32_t)> GlobalHandler;
   
-  void SetHandler(const GlobalHandler &);
+  void SetHandler(const GlobalHandler &handler) {
+    m_handler = handler;
+  }
+
   void NewGlobal(struct wl_registry *,
                  uint32_t,
                  const char *,
@@ -72,7 +75,9 @@ public:
 
   Registry(struct wl_display   *display,
            IWaylandRegistration &registration);
-  ~Registry();
+  ~Registry() {
+    wl_registry_destroy(m_registry);
+  }
 
   Registry(const Registry &) = delete;
   Registry &operator=(const Registry &) = delete;
@@ -99,9 +104,15 @@ private:
   static void HandleRemoveGlobalCallback(void *, struct wl_registry *,
                                          uint32_t name);
 
+  /* Once a global becomes available, we immediately bind to it here
+   * and then notify the injected listener interface that the global
+   * is available on a named object. This allows that interface to
+   * respond to the arrival of the new global how it wishes */
   void *BindInternal(uint32_t name,
                      const struct wl_interface *interface,
-                     uint32_t version);
+                     uint32_t version) {
+    return wl_registry_bind(m_registry, name, interface, version);
+  }
 
   struct wl_registry *m_registry;
   IWaylandRegistration &m_registration;
-- 
2.7.4

