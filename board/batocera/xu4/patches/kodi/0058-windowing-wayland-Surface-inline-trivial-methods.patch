From 9ba85e82ce699de81338bbb5e52be3b6c476d0e2 Mon Sep 17 00:00:00 2001
From: Max Kellermann <max.kellermann@gmail.com>
Date: Mon, 24 Apr 2017 14:38:09 +0200
Subject: [PATCH 58/62] windowing/wayland/Surface: inline trivial methods

Signed-off-by: memeka <mihailescu2m@gmail.com>
---
 xbmc/windowing/wayland/Surface.cpp | 36 ------------------------------------
 xbmc/windowing/wayland/Surface.h   | 32 +++++++++++++++++++++++---------
 2 files changed, 23 insertions(+), 45 deletions(-)

diff --git a/xbmc/windowing/wayland/Surface.cpp b/xbmc/windowing/wayland/Surface.cpp
index a5db51f..59a6b8c 100644
--- a/xbmc/windowing/wayland/Surface.cpp
+++ b/xbmc/windowing/wayland/Surface.cpp
@@ -17,7 +17,6 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <wayland-client.h>
 
 #include "Surface.h"
 
@@ -35,12 +34,6 @@ xw::WaylandSurfaceListener::GetInstance()
 }
 
 void
-xw::WaylandSurfaceListener::SetHandler(const Handler &handler)
-{
-  m_handler = handler;
-}
-
-void
 xw::WaylandSurfaceListener::SurfaceCreated(xw::Surface &surface)
 {
   if (m_handler)
@@ -52,32 +45,3 @@ xw::Surface::Surface(struct wl_surface *surface) :
 {
   WaylandSurfaceListener::GetInstance().SurfaceCreated(*this);
 }
-
-xw::Surface::~Surface()
-{
-  wl_surface_destroy(m_surface);
-}
-
-struct wl_surface *
-xw::Surface::GetWlSurface()
-{
-  return m_surface;
-}
-
-struct wl_callback *
-xw::Surface::CreateFrameCallback()
-{
-  return wl_surface_frame(m_surface);
-}
-
-void
-xw::Surface::SetOpaqueRegion(struct wl_region *region)
-{
-  wl_surface_set_opaque_region(m_surface, region);
-}
-
-void
-xw::Surface::Commit()
-{
-  wl_surface_commit(m_surface);
-}
diff --git a/xbmc/windowing/wayland/Surface.h b/xbmc/windowing/wayland/Surface.h
index 195bb97..2918ceb 100644
--- a/xbmc/windowing/wayland/Surface.h
+++ b/xbmc/windowing/wayland/Surface.h
@@ -22,9 +22,7 @@
 #include <functional>
 #include <memory>
 
-struct wl_surface;
-struct wl_callback;
-struct wl_region;
+#include <wayland-client.h>
 
 namespace xbmc
 {
@@ -35,15 +33,28 @@ class Surface
 public:
 
   explicit Surface(struct wl_surface *surface);
-  ~Surface();
+  ~Surface() {
+    wl_surface_destroy(m_surface);
+  }
 
   Surface(const Surface &) = delete;
   Surface &operator=(const Surface &) = delete;
 
-  struct wl_surface * GetWlSurface();
-  struct wl_callback * CreateFrameCallback();
-  void SetOpaqueRegion(struct wl_region *region);
-  void Commit();
+  struct wl_surface * GetWlSurface() {
+    return m_surface;
+  }
+
+  struct wl_callback * CreateFrameCallback() {
+    return wl_surface_frame(m_surface);
+  }
+
+  void SetOpaqueRegion(struct wl_region *region) {
+    wl_surface_set_opaque_region(m_surface, region);
+  }
+
+  void Commit() {
+    wl_surface_commit(m_surface);
+  }
 
 private:
 
@@ -61,7 +72,10 @@ public:
 
   typedef std::function<void(Surface &)> Handler;
   
-  void SetHandler(const Handler &);
+  void SetHandler(const Handler &handler) {
+    m_handler = handler;
+  }
+
   void SurfaceCreated(Surface &);
 
   static WaylandSurfaceListener & GetInstance();
-- 
2.7.4

