From 1fa62d96945024a5b2f9cf34dc721b2e9bcc82bf Mon Sep 17 00:00:00 2001
From: Max Kellermann <max@duempel.org>
Date: Mon, 24 Apr 2017 14:38:07 +0200
Subject: [PATCH 34/62] wayland/Keyboard, input/XKBCommonKeymap: eliminate
 boost::scope_exit

Replace with light reimplementation, with no dependencies.

Boost removal was requested on https://github.com/xbmc/xbmc/pull/8980

Fixes https://github.com/MaxKellermann/xbmc/issues/3

Signed-off-by: memeka <mihailescu2m@gmail.com>
---
 xbmc/input/linux/XKBCommonKeymap.cpp |  6 +--
 xbmc/utils/ScopeExit.hxx             | 87 ++++++++++++++++++++++++++++++++++++
 xbmc/windowing/wayland/Keyboard.cpp  | 14 +++---
 3 files changed, 97 insertions(+), 10 deletions(-)
 create mode 100644 xbmc/utils/ScopeExit.hxx

diff --git a/xbmc/input/linux/XKBCommonKeymap.cpp b/xbmc/input/linux/XKBCommonKeymap.cpp
index 79959f5..d9f42f1 100644
--- a/xbmc/input/linux/XKBCommonKeymap.cpp
+++ b/xbmc/input/linux/XKBCommonKeymap.cpp
@@ -21,7 +21,7 @@
 #include <iostream>
 #include <stdexcept>
 
-#include <boost/scope_exit.hpp>
+#include "utils/ScopeExit.hxx"
 
 #include <sys/mman.h>
 
@@ -85,11 +85,11 @@ CXKBKeymap::ReceiveXKBKeymapFromSharedMemory(IDllXKBCommon &xkbCommonLibrary, st
 
   /* In every exit path, the keymap string memory region must be
    * unmapped */
-  BOOST_SCOPE_EXIT((keymapString)(size))
+  AtScopeExit(keymapString, size)
   {
     munmap(const_cast<void *>(static_cast<const void *>(keymapString)),
                               size);
-  } BOOST_SCOPE_EXIT_END
+  };
 
   enum xkb_keymap_compile_flags flags =
     static_cast<enum xkb_keymap_compile_flags>(0);
diff --git a/xbmc/utils/ScopeExit.hxx b/xbmc/utils/ScopeExit.hxx
new file mode 100644
index 0000000..c6c9d9c
--- /dev/null
+++ b/xbmc/utils/ScopeExit.hxx
@@ -0,0 +1,87 @@
+/*
+ * Copyright (C) 2015 Max Kellermann <max@duempel.org>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * - Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *
+ * - Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the
+ * distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * FOUNDATION OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef SCOPE_EXIT_HXX
+#define SCOPE_EXIT_HXX
+
+#include <utility>
+
+/**
+ * Internal class.  Do not use directly.
+ */
+template<typename F>
+class ScopeExitGuard : F {
+	bool enabled = true;
+
+public:
+	explicit ScopeExitGuard(F &&f):F(std::forward<F>(f)) {}
+
+	ScopeExitGuard(ScopeExitGuard &&src)
+		:F(std::move(src)) {
+		src.enabled = false;
+	}
+
+	~ScopeExitGuard() {
+		if (enabled)
+			F::operator()();
+	}
+
+	ScopeExitGuard(const ScopeExitGuard &) = delete;
+	ScopeExitGuard &operator=(const ScopeExitGuard &) = delete;
+};
+
+/**
+ * Internal class.  Do not use directly.
+ */
+struct ScopeExitTag {
+	/* this operator is a trick so we don't need to close
+	   parantheses at the end of the expression AtScopeExit()
+	   call */
+	template<typename F>
+	ScopeExitGuard<F> operator+(F &&f) {
+		return ScopeExitGuard<F>(std::forward<F>(f));
+	}
+};
+
+#define ScopeExitCat(a, b) a ## b
+#define ScopeExitName(line) ScopeExitCat(at_scope_exit_, line)
+
+/**
+ * Call the block after this macro at the end of the current scope.
+ * Parameters are lambda captures.
+ *
+ * This is exception-safe, however the given code block must not throw
+ * exceptions.
+ *
+ * This attempts to be a better boost/scope_exit.hpp, without all of
+ * Boost's compile-time and runtime bloat.
+ */
+#define AtScopeExit(...) auto ScopeExitName(__LINE__) = ScopeExitTag() + [__VA_ARGS__]()
+
+#endif
diff --git a/xbmc/windowing/wayland/Keyboard.cpp b/xbmc/windowing/wayland/Keyboard.cpp
index 1ed76c0..1580640 100644
--- a/xbmc/windowing/wayland/Keyboard.cpp
+++ b/xbmc/windowing/wayland/Keyboard.cpp
@@ -21,7 +21,7 @@
 #include <iostream>
 #include <stdexcept>
 
-#include <boost/scope_exit.hpp>
+#include "utils/ScopeExit.hxx"
 
 #include <wayland-client.h>
 
@@ -152,10 +152,9 @@ void xw::Keyboard::HandleKeymap(uint32_t format,
                                 uint32_t size)
 {
   /* The file descriptor must always be closed */
-  BOOST_SCOPE_EXIT((fd))
-  {
+  AtScopeExit(fd) {
     close(fd);
-  } BOOST_SCOPE_EXIT_END
+  };
 
   /* We don't understand anything other than xkbv1. If we get some
    * other keyboard, then we can't process keyboard events reliably
@@ -172,11 +171,12 @@ void xw::Keyboard::HandleKeymap(uint32_t format,
                                                  fd,
                                                  size);
 
-  BOOST_SCOPE_EXIT((&m_xkbCommonLibrary)(&successfullyCreatedKeyboard)(keymap))
+  auto &xkbCommonLibrary = m_xkbCommonLibrary;
+  AtScopeExit(&xkbCommonLibrary, &successfullyCreatedKeyboard, keymap)
   {
     if (!successfullyCreatedKeyboard)
-      m_xkbCommonLibrary.xkb_keymap_unref(keymap);
-  } BOOST_SCOPE_EXIT_END
+      xkbCommonLibrary.xkb_keymap_unref(keymap);
+  };
 
   m_keymap.reset(new CXKBKeymap(m_xkbCommonLibrary,
                                 keymap));
-- 
2.7.4

