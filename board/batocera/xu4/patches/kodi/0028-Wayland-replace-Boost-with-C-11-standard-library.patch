From 852147512ad13c3120d40f4281c0c1baf7fa44b8 Mon Sep 17 00:00:00 2001
From: Max Kellermann <max@duempel.org>
Date: Mon, 24 Apr 2017 14:38:07 +0200
Subject: [PATCH 28/62] Wayland: replace Boost with C++11 standard library

Signed-off-by: memeka <mihailescu2m@gmail.com>
---
 xbmc/windowing/WinEventsWayland.cpp                |  8 ++--
 xbmc/windowing/egl/EGLNativeTypeWayland.cpp        | 14 ++-----
 xbmc/windowing/egl/EGLNativeTypeWayland.h          |  6 +--
 xbmc/windowing/egl/wayland/Callback.cpp            |  3 --
 xbmc/windowing/egl/wayland/Callback.h              | 11 +++---
 xbmc/windowing/egl/wayland/Compositor.h            |  8 ++--
 xbmc/windowing/egl/wayland/Display.cpp             |  6 +--
 xbmc/windowing/egl/wayland/Display.h               | 15 ++++----
 xbmc/windowing/egl/wayland/OpenGLSurface.h         |  7 ++--
 xbmc/windowing/egl/wayland/Output.h                |  8 ++--
 xbmc/windowing/egl/wayland/Region.h                |  7 ++--
 xbmc/windowing/egl/wayland/Registry.cpp            |  4 +-
 xbmc/windowing/egl/wayland/Registry.h              | 22 +++++------
 xbmc/windowing/egl/wayland/Shell.h                 |  7 ++--
 xbmc/windowing/egl/wayland/ShellSurface.h          |  8 ++--
 xbmc/windowing/egl/wayland/Surface.cpp             |  4 +-
 xbmc/windowing/egl/wayland/Surface.h               | 15 ++++----
 xbmc/windowing/egl/wayland/WaylandLibraries.h      | 17 +++++---
 xbmc/windowing/egl/wayland/XBMCConnection.cpp      | 45 ++++++++++------------
 xbmc/windowing/egl/wayland/XBMCConnection.h        |  5 +--
 xbmc/windowing/egl/wayland/XBMCSurface.cpp         | 29 +++++++-------
 xbmc/windowing/egl/wayland/XBMCSurface.h           |  4 +-
 .../tests/wayland/TestEGLNativeTypeWayland.cpp     | 19 ++++-----
 .../wayland/TestXBMCWaylandInputAcceptance.cpp     | 42 ++++++++++----------
 xbmc/windowing/tests/wayland/TmpEnv.h              |  7 ++--
 xbmc/windowing/tests/wayland/WestonProcess.cpp     |  1 -
 xbmc/windowing/tests/wayland/WestonProcess.h       |  8 ++--
 xbmc/windowing/tests/wayland/WestonTest.cpp        | 24 +++++++-----
 xbmc/windowing/tests/wayland/WestonTest.h          |  3 +-
 xbmc/windowing/tests/wayland/XBMCWayland.h         |  8 ++--
 .../tests/wayland/XBMCWaylandTestExtension.cpp     | 41 +++++++++++---------
 xbmc/windowing/wayland/EventLoop.cpp               | 22 +++++------
 xbmc/windowing/wayland/EventLoop.h                 |  5 +--
 xbmc/windowing/wayland/EventQueueStrategy.h        | 13 ++++---
 xbmc/windowing/wayland/InputFactory.cpp            |  4 --
 xbmc/windowing/wayland/InputFactory.h              |  9 +++--
 xbmc/windowing/wayland/Keyboard.cpp                | 12 +++---
 xbmc/windowing/wayland/Keyboard.h                  | 28 ++++++++------
 xbmc/windowing/wayland/KeyboardProcessor.cpp       | 10 +----
 xbmc/windowing/wayland/KeyboardProcessor.h         |  1 -
 xbmc/windowing/wayland/Pointer.h                   |  2 -
 xbmc/windowing/wayland/PollThread.cpp              |  5 +--
 xbmc/windowing/wayland/PollThread.h                |  7 ++--
 xbmc/windowing/wayland/Seat.h                      |  8 ++--
 xbmc/windowing/wayland/TimeoutManager.h            |  8 ++--
 .../wayland/Wayland11EventQueueStrategy.cpp        | 17 ++++----
 .../wayland/Wayland11EventQueueStrategy.h          |  2 -
 .../wayland/Wayland12EventQueueStrategy.cpp        |  8 ++--
 .../wayland/Wayland12EventQueueStrategy.h          |  2 -
 49 files changed, 274 insertions(+), 295 deletions(-)

diff --git a/xbmc/windowing/WinEventsWayland.cpp b/xbmc/windowing/WinEventsWayland.cpp
index d46870c..6913be6 100644
--- a/xbmc/windowing/WinEventsWayland.cpp
+++ b/xbmc/windowing/WinEventsWayland.cpp
@@ -21,8 +21,6 @@
 
 #if defined (HAVE_WAYLAND)
 
-#include <boost/scoped_ptr.hpp>
-
 #include "Application.h"
 #include "xbmc/windowing/WindowingFactory.h"
 #include "WinEventsWayland.h"
@@ -31,6 +29,8 @@
 #include "wayland/InputFactory.h"
 #include "wayland/EventLoop.h"
 
+#include <memory>
+
 namespace xwe = xbmc::wayland::events;
 
 namespace
@@ -46,8 +46,8 @@ public:
 };
 
 XBMCListener g_listener;
-boost::scoped_ptr <xbmc::InputFactory> g_inputInstance;
-boost::scoped_ptr <xwe::Loop> g_eventLoop;
+std::unique_ptr<xbmc::InputFactory> g_inputInstance;
+std::unique_ptr<xwe::Loop> g_eventLoop;
 }
 
 void XBMCListener::OnEvent(XBMC_Event &e)
diff --git a/xbmc/windowing/egl/EGLNativeTypeWayland.cpp b/xbmc/windowing/egl/EGLNativeTypeWayland.cpp
index ef45bb1..06a3188 100644
--- a/xbmc/windowing/egl/EGLNativeTypeWayland.cpp
+++ b/xbmc/windowing/egl/EGLNativeTypeWayland.cpp
@@ -27,12 +27,6 @@
 #include <iostream>
 #include <stdexcept>
 
-#include <boost/noncopyable.hpp>
-#include <boost/function.hpp>
-#include <boost/bind.hpp>
-#include <boost/scoped_ptr.hpp>
-#include <boost/shared_ptr.hpp>
-
 #include <cstdlib>
 
 #include <wayland-client.h>
@@ -63,9 +57,9 @@ class CEGLNativeTypeWayland::Private
 {
 public:
 
-  boost::scoped_ptr<xw::Libraries> m_libraries;
-  boost::scoped_ptr<xw::XBMCConnection> m_connection;
-  boost::scoped_ptr<xw::XBMCSurface> m_surface;
+  std::unique_ptr<xw::Libraries> m_libraries;
+  std::unique_ptr<xw::XBMCConnection> m_connection;
+  std::unique_ptr<xw::XBMCSurface> m_surface;
 
   bool LoadWaylandLibraries();
   void UnloadWaylandLibraries();
@@ -274,7 +268,7 @@ bool CEGLNativeTypeWayland::GetNativeWindow(XBNativeDisplayType **nativeWindow)
 }
 
 /* DestroyNativeDisplay and DestroyNativeWindow simply just call
- * reset on the relevant scoped_ptr. This will effectively destroy
+ * reset on the relevant unique_ptr. This will effectively destroy
  * the encapsulating objects which cleans up all of the relevant
  * connections and surfaces */
 bool CEGLNativeTypeWayland::DestroyNativeDisplay()
diff --git a/xbmc/windowing/egl/EGLNativeTypeWayland.h b/xbmc/windowing/egl/EGLNativeTypeWayland.h
index 344d4be..fd45c6a 100644
--- a/xbmc/windowing/egl/EGLNativeTypeWayland.h
+++ b/xbmc/windowing/egl/EGLNativeTypeWayland.h
@@ -20,11 +20,11 @@
  *
  */
 
-#include <boost/scoped_ptr.hpp>
-
 #include "system_egl.h"
 #include "EGLNativeType.h"
 
+#include <memory>
+
 class CEGLNativeTypeWayland : public CEGLNativeType
 {
 public:
@@ -54,5 +54,5 @@ private:
 
   class Private;
 
-  boost::scoped_ptr <Private> priv;
+  std::unique_ptr<Private> priv;
 };
diff --git a/xbmc/windowing/egl/wayland/Callback.cpp b/xbmc/windowing/egl/wayland/Callback.cpp
index 45d0bef..0055d17 100644
--- a/xbmc/windowing/egl/wayland/Callback.cpp
+++ b/xbmc/windowing/egl/wayland/Callback.cpp
@@ -19,9 +19,6 @@
  */
 #include <wayland-client.h>
 
-#include <boost/function.hpp>
-#include <boost/bind.hpp>
-
 #include "windowing/DllWaylandClient.h"
 #include "windowing/WaylandProtocol.h"
 #include "Callback.h"
diff --git a/xbmc/windowing/egl/wayland/Callback.h b/xbmc/windowing/egl/wayland/Callback.h
index 6ae6df2..00fba8a 100644
--- a/xbmc/windowing/egl/wayland/Callback.h
+++ b/xbmc/windowing/egl/wayland/Callback.h
@@ -19,8 +19,7 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <boost/noncopyable.hpp>
-#include <boost/function.hpp>
+#include <functional>
 
 #include <wayland-client.h>
 
@@ -35,18 +34,20 @@ namespace wayland
  * in time. A custom closure can be provided as func to be called
  * whenever this callback is fired
  */
-class Callback :
-  boost::noncopyable
+class Callback
 {
 public:
 
-  typedef boost::function<void(uint32_t)> Func;
+  typedef std::function<void(uint32_t)> Func;
 
   Callback(IDllWaylandClient &clientLibrary,
            struct wl_callback *callback,
            const Func &func);
   ~Callback();
 
+  Callback(const Callback &) = delete;
+  Callback &operator=(const Callback &) = delete;
+
   struct wl_callback * GetWlCallback();
 
   static const struct wl_callback_listener m_listener;
diff --git a/xbmc/windowing/egl/wayland/Compositor.h b/xbmc/windowing/egl/wayland/Compositor.h
index 93d2e8d..20be414 100644
--- a/xbmc/windowing/egl/wayland/Compositor.h
+++ b/xbmc/windowing/egl/wayland/Compositor.h
@@ -19,8 +19,6 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <boost/noncopyable.hpp>
-
 struct wl_compositor;
 struct wl_surface;
 struct wl_region;
@@ -31,8 +29,7 @@ namespace xbmc
 {
 namespace wayland
 {
-class Compositor :
-  boost::noncopyable
+class Compositor
 {
 public:
 
@@ -40,6 +37,9 @@ public:
              struct wl_compositor *compositor);
   ~Compositor();
 
+  Compositor(const Compositor &) = delete;
+  Compositor &operator=(const Compositor &) = delete;
+
   struct wl_compositor * GetWlCompositor();
   
   /* Creates a "surface" on the compositor. This is not a renderable
diff --git a/xbmc/windowing/egl/wayland/Display.cpp b/xbmc/windowing/egl/wayland/Display.cpp
index 52f7c1f..bd6076a 100644
--- a/xbmc/windowing/egl/wayland/Display.cpp
+++ b/xbmc/windowing/egl/wayland/Display.cpp
@@ -21,8 +21,6 @@
 #include <iostream>
 #include <stdexcept>
 
-#include <boost/function.hpp>
-
 #include <cstdlib>
 
 #include <wayland-client.h>
@@ -42,7 +40,7 @@ xw::WaylandDisplayListener::SetHandler(const Handler &handler)
 void
 xw::WaylandDisplayListener::DisplayAvailable(Display &display)
 {
-  if (!m_handler.empty())
+  if (m_handler)
     m_handler(display);
 }
 
@@ -55,7 +53,7 @@ xw::WaylandDisplayListener::GetInstance()
   return *m_instance;
 }
 
-boost::scoped_ptr<xw::WaylandDisplayListener> xw::WaylandDisplayListener::m_instance;
+std::unique_ptr<xw::WaylandDisplayListener> xw::WaylandDisplayListener::m_instance;
 
 xw::Display::Display(IDllWaylandClient &clientLibrary) :
   m_clientLibrary(clientLibrary),
diff --git a/xbmc/windowing/egl/wayland/Display.h b/xbmc/windowing/egl/wayland/Display.h
index 882d90c..987e811 100644
--- a/xbmc/windowing/egl/wayland/Display.h
+++ b/xbmc/windowing/egl/wayland/Display.h
@@ -19,9 +19,8 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <boost/noncopyable.hpp>
-#include <boost/function.hpp>
-#include <boost/scoped_ptr.hpp>
+#include <functional>
+#include <memory>
 
 class IDllWaylandClient;
 
@@ -34,14 +33,16 @@ namespace xbmc
 {
 namespace wayland
 {
-class Display :
-  boost::noncopyable
+class Display
 {
   public:
 
     Display(IDllWaylandClient &clientLibrary);
     ~Display();
 
+    Display(const Display &) = delete;
+    Display &operator=(const Display &) = delete;
+
     struct wl_display * GetWlDisplay();
     EGLNativeDisplayType* GetEGLNativeDisplay();
     struct wl_callback * Sync();
@@ -59,7 +60,7 @@ class WaylandDisplayListener
 {
 public:
 
-  typedef boost::function<void(Display &)> Handler;
+  typedef std::function<void(Display &)> Handler;
   
   void SetHandler(const Handler &);
   void DisplayAvailable(Display &);
@@ -69,7 +70,7 @@ private:
 
   Handler m_handler;
   
-  static boost::scoped_ptr<WaylandDisplayListener> m_instance;
+  static std::unique_ptr<WaylandDisplayListener> m_instance;
 };
 }
 }
diff --git a/xbmc/windowing/egl/wayland/OpenGLSurface.h b/xbmc/windowing/egl/wayland/OpenGLSurface.h
index 288dbbf..58c880a 100644
--- a/xbmc/windowing/egl/wayland/OpenGLSurface.h
+++ b/xbmc/windowing/egl/wayland/OpenGLSurface.h
@@ -19,7 +19,6 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <boost/noncopyable.hpp>
 
 class IDllWaylandEGL;
 
@@ -32,8 +31,7 @@ namespace xbmc
 {
 namespace wayland
 {
-class OpenGLSurface :
-  boost::noncopyable
+class OpenGLSurface
 {
 public:
 
@@ -43,6 +41,9 @@ public:
                 int32_t height);
   ~OpenGLSurface();
 
+  OpenGLSurface(const OpenGLSurface &) = delete;
+  OpenGLSurface &operator=(const OpenGLSurface &) = delete;
+
   struct wl_egl_window * GetWlEglWindow();
   EGLNativeWindowType * GetEGLNativeWindow();
   void Resize(int width, int height);
diff --git a/xbmc/windowing/egl/wayland/Output.h b/xbmc/windowing/egl/wayland/Output.h
index 9743b68..b143c98 100644
--- a/xbmc/windowing/egl/wayland/Output.h
+++ b/xbmc/windowing/egl/wayland/Output.h
@@ -21,8 +21,6 @@
  */
 #include <vector>
 
-#include <boost/noncopyable.hpp>
-
 #include <wayland-client.h>
 
 class IDllWaylandClient;
@@ -31,8 +29,7 @@ namespace xbmc
 {
 namespace wayland
 {
-struct Output :
-  boost::noncopyable
+struct Output
 {
 public:
 
@@ -40,6 +37,9 @@ public:
          struct wl_output *);
   ~Output();
 
+  Output(const Output &) = delete;
+  Output &operator=(const Output &) = delete;
+
   struct ModeGeometry
   {
     int32_t width;
diff --git a/xbmc/windowing/egl/wayland/Region.h b/xbmc/windowing/egl/wayland/Region.h
index d9ec149..60629c6 100644
--- a/xbmc/windowing/egl/wayland/Region.h
+++ b/xbmc/windowing/egl/wayland/Region.h
@@ -19,7 +19,6 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <boost/noncopyable.hpp>
 
 class IDllWaylandClient;
 
@@ -29,14 +28,16 @@ namespace xbmc
 {
 namespace wayland
 {
-class Region :
-  boost::noncopyable
+class Region
 {
 public:
 
   Region(IDllWaylandClient &clientLibrary,
          struct wl_region *);
   ~Region();
+
+  Region(const Region &) = delete;
+  Region &operator=(const Region &) = delete;
   
   struct wl_region * GetWlRegion();
 
diff --git a/xbmc/windowing/egl/wayland/Registry.cpp b/xbmc/windowing/egl/wayland/Registry.cpp
index 2a433f3..322d883 100644
--- a/xbmc/windowing/egl/wayland/Registry.cpp
+++ b/xbmc/windowing/egl/wayland/Registry.cpp
@@ -44,7 +44,7 @@ xw::ExtraWaylandGlobals::NewGlobal(struct wl_registry *registry,
                                    const char *interface,
                                    uint32_t version)
 {
-  if (!m_handler.empty())
+  if (m_handler)
     m_handler(registry, name, interface, version);
 }
 
@@ -57,7 +57,7 @@ xw::ExtraWaylandGlobals::GetInstance()
   return *m_instance;
 }
 
-boost::scoped_ptr<xw::ExtraWaylandGlobals> xw::ExtraWaylandGlobals::m_instance;
+std::unique_ptr<xw::ExtraWaylandGlobals> xw::ExtraWaylandGlobals::m_instance;
 
 /* We inject an IWaylandRegistration here which is a virtual
  * class which a callback for the global objects
diff --git a/xbmc/windowing/egl/wayland/Registry.h b/xbmc/windowing/egl/wayland/Registry.h
index 61ce455..8af1a85 100644
--- a/xbmc/windowing/egl/wayland/Registry.h
+++ b/xbmc/windowing/egl/wayland/Registry.h
@@ -20,10 +20,8 @@
  *
  */
 #include <string>
-
-#include <boost/noncopyable.hpp>
-#include <boost/function.hpp>
-#include <boost/scoped_ptr.hpp>
+#include <memory>
+#include <functional>
 
 #include <wayland-client.h>
 
@@ -42,10 +40,10 @@ class ExtraWaylandGlobals
 {
 public:
 
-  typedef boost::function<void(struct wl_registry *,
-                               uint32_t,
-                               const char *,
-                               uint32_t)> GlobalHandler;
+  typedef std::function<void(struct wl_registry *,
+                             uint32_t,
+                             const char *,
+                             uint32_t)> GlobalHandler;
   
   void SetHandler(const GlobalHandler &);
   void NewGlobal(struct wl_registry *,
@@ -58,7 +56,7 @@ private:
 
   GlobalHandler m_handler;
   
-  static boost::scoped_ptr<ExtraWaylandGlobals> m_instance;
+  static std::unique_ptr<ExtraWaylandGlobals> m_instance;
 };
 
 class IWaylandRegistration
@@ -72,8 +70,7 @@ public:
                                           uint32_t) = 0;
 };
 
-class Registry :
-  boost::noncopyable
+class Registry
 {
 public:
 
@@ -82,6 +79,9 @@ public:
            IWaylandRegistration &registration);
   ~Registry();
 
+  Registry(const Registry &) = delete;
+  Registry &operator=(const Registry &) = delete;
+
   struct wl_registry * GetWlRegistry();
   
   template<typename Create>
diff --git a/xbmc/windowing/egl/wayland/Shell.h b/xbmc/windowing/egl/wayland/Shell.h
index 4e5c19c..8cc7911 100644
--- a/xbmc/windowing/egl/wayland/Shell.h
+++ b/xbmc/windowing/egl/wayland/Shell.h
@@ -19,7 +19,6 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <boost/noncopyable.hpp>
 
 class IDllWaylandClient;
 
@@ -31,8 +30,7 @@ namespace xbmc
 {
 namespace wayland
 {
-class Shell :
-  boost::noncopyable
+class Shell
 {
 public:
 
@@ -40,6 +38,9 @@ public:
         struct wl_shell *shell);
   ~Shell();
 
+  Shell(const Shell &) = delete;
+  Shell &operator=(const Shell &) = delete;
+
   struct wl_shell * GetWlShell();
   struct wl_shell_surface * CreateShellSurface(struct wl_surface *);
 
diff --git a/xbmc/windowing/egl/wayland/ShellSurface.h b/xbmc/windowing/egl/wayland/ShellSurface.h
index eeadd41..48acbac 100644
--- a/xbmc/windowing/egl/wayland/ShellSurface.h
+++ b/xbmc/windowing/egl/wayland/ShellSurface.h
@@ -21,16 +21,13 @@
  */
 #include <wayland-client.h>
 
-#include <boost/noncopyable.hpp>
-
 class IDllWaylandClient;
 
 namespace xbmc
 {
 namespace wayland
 {
-class ShellSurface :
-  boost::noncopyable
+class ShellSurface
 {
 public:
 
@@ -38,6 +35,9 @@ public:
                struct wl_shell_surface *shellSurface);
   ~ShellSurface();
 
+  ShellSurface(const ShellSurface &) = delete;
+  ShellSurface &operator=(const ShellSurface &) = delete;
+
   struct wl_shell_surface * GetWlShellSurface();
   void SetFullscreen(enum wl_shell_surface_fullscreen_method method,
                      uint32_t framerate,
diff --git a/xbmc/windowing/egl/wayland/Surface.cpp b/xbmc/windowing/egl/wayland/Surface.cpp
index 9e787c7..9082d30 100644
--- a/xbmc/windowing/egl/wayland/Surface.cpp
+++ b/xbmc/windowing/egl/wayland/Surface.cpp
@@ -25,7 +25,7 @@
 
 namespace xw = xbmc::wayland;
 
-boost::scoped_ptr<xw::WaylandSurfaceListener> xw::WaylandSurfaceListener::m_instance;
+std::unique_ptr<xw::WaylandSurfaceListener> xw::WaylandSurfaceListener::m_instance;
 
 xw::WaylandSurfaceListener &
 xw::WaylandSurfaceListener::GetInstance()
@@ -45,7 +45,7 @@ xw::WaylandSurfaceListener::SetHandler(const Handler &handler)
 void
 xw::WaylandSurfaceListener::SurfaceCreated(xw::Surface &surface)
 {
-  if (!m_handler.empty())
+  if (m_handler)
     m_handler(surface);
 }
 
diff --git a/xbmc/windowing/egl/wayland/Surface.h b/xbmc/windowing/egl/wayland/Surface.h
index 358978d..090b015 100644
--- a/xbmc/windowing/egl/wayland/Surface.h
+++ b/xbmc/windowing/egl/wayland/Surface.h
@@ -19,9 +19,8 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <boost/function.hpp>
-#include <boost/noncopyable.hpp>
-#include <boost/scoped_ptr.hpp>
+#include <functional>
+#include <memory>
 
 struct wl_surface;
 struct wl_callback;
@@ -33,8 +32,7 @@ namespace xbmc
 {
 namespace wayland
 {
-class Surface :
-  boost::noncopyable
+class Surface
 {
 public:
 
@@ -42,6 +40,9 @@ public:
           struct wl_surface *surface);
   ~Surface();
 
+  Surface(const Surface &) = delete;
+  Surface &operator=(const Surface &) = delete;
+
   struct wl_surface * GetWlSurface();
   struct wl_callback * CreateFrameCallback();
   void SetOpaqueRegion(struct wl_region *region);
@@ -62,7 +63,7 @@ class WaylandSurfaceListener
 {
 public:
 
-  typedef boost::function<void(Surface &)> Handler;
+  typedef std::function<void(Surface &)> Handler;
   
   void SetHandler(const Handler &);
   void SurfaceCreated(Surface &);
@@ -72,7 +73,7 @@ private:
 
   Handler m_handler;
   
-  static boost::scoped_ptr<WaylandSurfaceListener> m_instance;
+  static std::unique_ptr<WaylandSurfaceListener> m_instance;
 };
 }
 }
diff --git a/xbmc/windowing/egl/wayland/WaylandLibraries.h b/xbmc/windowing/egl/wayland/WaylandLibraries.h
index 3c7193d..d4ac7ee 100644
--- a/xbmc/windowing/egl/wayland/WaylandLibraries.h
+++ b/xbmc/windowing/egl/wayland/WaylandLibraries.h
@@ -19,8 +19,6 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <boost/noncopyable.hpp>
-
 #include "windowing/DllWaylandClient.h"
 #include "windowing/DllWaylandEgl.h"
 #include "windowing/DllXKBCommon.h"
@@ -30,13 +28,16 @@ namespace xbmc
 namespace wayland
 {
 template <class DllInterface, class Dll>
-class AutoloadDll :
-  boost::noncopyable
+class AutoloadDll
 {
   public:
 
     AutoloadDll();
     ~AutoloadDll();
+
+    AutoloadDll(const AutoloadDll &) = delete;
+    AutoloadDll &operator=(const AutoloadDll &) = delete;
+
     DllInterface & Get();
 
   private:
@@ -44,11 +45,15 @@ class AutoloadDll :
     Dll m_dll;
 };
 
-class Libraries :
-  boost::noncopyable
+class Libraries
 {
 public:
 
+  Libraries() = default;
+
+  Libraries(const Libraries &) = delete;
+  Libraries &operator=(const Libraries &) = delete;
+
   IDllWaylandClient & ClientLibrary();
   IDllWaylandEGL & EGLLibrary();
   IDllXKBCommon & XKBCommonLibrary();
diff --git a/xbmc/windowing/egl/wayland/XBMCConnection.cpp b/xbmc/windowing/egl/wayland/XBMCConnection.cpp
index 7b1b467..a6b823a 100644
--- a/xbmc/windowing/egl/wayland/XBMCConnection.cpp
+++ b/xbmc/windowing/egl/wayland/XBMCConnection.cpp
@@ -21,12 +21,8 @@
 #include <sstream>
 #include <stdexcept>
 #include <queue>
-
-#include <boost/array.hpp>
-#include <boost/bind.hpp>
-#include <boost/function.hpp>
-#include <boost/scoped_ptr.hpp>
-#include <boost/shared_ptr.hpp>
+#include <functional>
+#include <cstring>
 
 #include <wayland-client.h>
 
@@ -89,7 +85,7 @@ class GlobalInterface :
 {
 public:
 
-  typedef boost::function<void(uint32_t version)> AvailabilityHook;
+  typedef std::function<void(uint32_t version)> AvailabilityHook;
 
 protected:
 
@@ -167,8 +163,8 @@ class StoredGlobalInterface :
 {
 public:
 
-  typedef boost::function<Implementation * (WaylandImplementation *)> Factory;
-  typedef std::vector<boost::shared_ptr<Implementation> > Implementations;
+  typedef std::function<Implementation * (WaylandImplementation *)> Factory;
+  typedef std::vector<std::shared_ptr<Implementation> > Implementations;
   
   /* Factory must be capable of returning a new Implementation *
    * corresponding to a WaylandImplementation *. This is usually
@@ -262,7 +258,7 @@ private:
   /* Synchronization logic - these variables should not be touched
    * outside the scope of WaitForSynchronize() */
   bool synchronized;
-  boost::scoped_ptr<Callback> synchronizeCallback;
+  std::unique_ptr<Callback> synchronizeCallback;
   
   bool OnGlobalInterfaceAvailable(uint32_t name,
                                   const char *interface,
@@ -270,15 +266,15 @@ private:
 
   void InjectSeat();
 
-  boost::scoped_ptr<wayland::Display> m_display;
-  boost::scoped_ptr<wayland::Registry> m_registry;
+  std::unique_ptr<wayland::Display> m_display;
+  std::unique_ptr<wayland::Registry> m_registry;
   
   StoredGlobalInterface<wayland::Compositor, struct wl_compositor> m_compositor;
   StoredGlobalInterface<wayland::Shell, struct wl_shell> m_shell;
   WaylandGlobalObject<struct wl_seat> m_seat;
   StoredGlobalInterface<wayland::Output, struct wl_output> m_outputs;
   
-  boost::scoped_ptr<events::IEventQueueStrategy> m_eventQueue;
+  std::unique_ptr<events::IEventQueueStrategy> m_eventQueue;
 };
 }
 }
@@ -294,7 +290,7 @@ xw::GlobalInterface::OnObjectAvailable(uint32_t name,
   m_availableNames.push(name);
   m_version = version;
   
-  if (!m_hook.empty())
+  if (m_hook)
     m_hook(m_version);
 }
 
@@ -356,7 +352,7 @@ xw::StoredGlobalInterface<Implementation, WaylandImplementation>::Get(Registry &
   
   while (proxy)
   {
-    boost::shared_ptr<Implementation> instance(m_factory(proxy));
+    std::shared_ptr<Implementation> instance(m_factory(proxy));
     m_implementations.push_back(instance);
     proxy = m_waylandObject.FetchPending(registry);
   }
@@ -518,16 +514,17 @@ xw::XBMCConnection::Private::Private(IDllWaylandClient &clientLibrary,
   m_registry(new xw::Registry(clientLibrary,
                               m_display->GetWlDisplay(),
                               *this)),
-  m_compositor(boost::bind(CreateCompositor, _1, &m_clientLibrary),
+  m_compositor(std::bind(CreateCompositor, std::placeholders::_1,
+                         &m_clientLibrary),
                RequestedCompositorVersion,
                clientLibrary.Get_wl_compositor_interface()),
-  m_shell(boost::bind(CreateShell, _1, &m_clientLibrary),
+  m_shell(std::bind(CreateShell, std::placeholders::_1, &m_clientLibrary),
           RequestedShellVersion,
           clientLibrary.Get_wl_shell_interface()),
   m_seat(RequestedSeatVersion,
          clientLibrary.Get_wl_seat_interface(),
-         boost::bind(&Private::InjectSeat, this)),
-  m_outputs(boost::bind(CreateOutput, _1, &m_clientLibrary),
+         std::bind(&Private::InjectSeat, this)),
+  m_outputs(std::bind(CreateOutput, std::placeholders::_1, &m_clientLibrary),
             RequestedOutputVersion,
             clientLibrary.Get_wl_output_interface()),
   m_eventQueue(EventQueueForClientVersion(m_clientLibrary,
@@ -569,7 +566,7 @@ xw::XBMCConnection::XBMCConnection(IDllWaylandClient &clientLibrary,
 }
 
 /* A defined destructor is required such that
- * boost::scoped_ptr<Private>::~scoped_ptr is generated here */
+ * std::unique_ptr<Private>::~unique_ptr is generated here */
 xw::XBMCConnection::~XBMCConnection()
 {
 }
@@ -619,9 +616,9 @@ xw::XBMCConnection::Private::OnGlobalInterfaceAvailable(uint32_t name,
                                                         const char *interface,
                                                         uint32_t version)
 {
-  /* A boost::array is effectively immutable so we can leave out
+  /* A std::array is effectively immutable so we can leave out
    * const here */
-  typedef boost::array<RemoteGlobalInterface::Constructor, 4> ConstructorArray;
+  typedef std::array<RemoteGlobalInterface::Constructor, 4> ConstructorArray;
 
   
   /* Not static, as the pointers here may change in cases where
@@ -657,8 +654,8 @@ xw::XBMCConnection::Private::OnGlobalInterfaceAvailable(uint32_t name,
 
 void xw::XBMCConnection::Private::WaitForSynchronize()
 {
-  boost::function<void(uint32_t)> func(boost::bind(&Private::Synchronize,
-                                                   this));
+  std::function<void(uint32_t)> func(std::bind(&Private::Synchronize,
+                                               this));
   
   synchronized = false;
   synchronizeCallback.reset(new xw::Callback(m_clientLibrary,
diff --git a/xbmc/windowing/egl/wayland/XBMCConnection.h b/xbmc/windowing/egl/wayland/XBMCConnection.h
index 4e1477a..ca6dccb 100644
--- a/xbmc/windowing/egl/wayland/XBMCConnection.h
+++ b/xbmc/windowing/egl/wayland/XBMCConnection.h
@@ -19,8 +19,7 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <boost/noncopyable.hpp>
-#include <boost/scoped_ptr.hpp>
+#include <memory>
 
 class IDllWaylandClient;
 class IDllXKBCommon;
@@ -87,7 +86,7 @@ public:
 private:
 
   class Private;
-  boost::scoped_ptr<Private> priv;
+  std::unique_ptr<Private> priv;
 };
 }
 }
diff --git a/xbmc/windowing/egl/wayland/XBMCSurface.cpp b/xbmc/windowing/egl/wayland/XBMCSurface.cpp
index 18f565f..cdcab3d 100644
--- a/xbmc/windowing/egl/wayland/XBMCSurface.cpp
+++ b/xbmc/windowing/egl/wayland/XBMCSurface.cpp
@@ -19,11 +19,8 @@
  */
 #include <sstream>
 #include <stdexcept>
-
-#include <boost/bind.hpp>
-#include <boost/function.hpp>
-#include <boost/scoped_ptr.hpp>
-#include <boost/shared_ptr.hpp>
+#include <functional>
+#include <memory>
 
 #include <wayland-client.h>
 
@@ -58,7 +55,7 @@ public:
           uint32_t width,
           uint32_t height);
 
-  typedef boost::function<struct wl_region * ()> RegionFactory;
+  typedef std::function<struct wl_region * ()> RegionFactory;
 
   IDllWaylandClient &m_clientLibrary;
   IDllWaylandEGL &m_eglLibrary;
@@ -70,10 +67,10 @@ public:
    * a region later */ 
   RegionFactory m_regionFactory;
 
-  boost::scoped_ptr<Surface> m_surface;
-  boost::scoped_ptr<ShellSurface> m_shellSurface;
-  boost::scoped_ptr<OpenGLSurface> m_glSurface;
-  boost::scoped_ptr<Callback> m_frameCallback;
+  std::unique_ptr<Surface> m_surface;
+  std::unique_ptr<ShellSurface> m_shellSurface;
+  std::unique_ptr<OpenGLSurface> m_glSurface;
+  std::unique_ptr<Callback> m_frameCallback;
   
   void OnFrameCallback(uint32_t);
   void AddFrameCallback();
@@ -103,8 +100,8 @@ xw::XBMCSurface::Private::Private(IDllWaylandClient &clientLibrary,
   m_clientLibrary(clientLibrary),
   m_eglLibrary(eglLibrary),
   m_eventInjector(eventInjector),
-  m_regionFactory(boost::bind(&Compositor::CreateRegion,
-                              &compositor)),
+  m_regionFactory(std::bind(&Compositor::CreateRegion,
+                            &compositor)),
   m_surface(new xw::Surface(m_clientLibrary,
                             compositor.CreateSurface())),
   m_shellSurface(new xw::ShellSurface(m_clientLibrary,
@@ -160,7 +157,7 @@ xw::XBMCSurface::XBMCSurface(IDllWaylandClient &clientLibrary,
 }
 
 /* A defined destructor is required such that
- * boost::scoped_ptr<Private>::~scoped_ptr is generated here */
+ * std::unique_ptr<Private>::~unique_ptr is generated here */
 xw::XBMCSurface::~XBMCSurface()
 {
 }
@@ -212,7 +209,7 @@ void xw::XBMCSurface::Private::AddFrameCallback()
 {
   m_frameCallback.reset(new xw::Callback(m_clientLibrary,
                                          m_surface->CreateFrameCallback(),
-                                         boost::bind(&Private::OnFrameCallback,
-                                                     this,
-                                                     _1)));
+                                         std::bind(&Private::OnFrameCallback,
+                                                   this,
+                                                   std::placeholders::_1)));
 }
diff --git a/xbmc/windowing/egl/wayland/XBMCSurface.h b/xbmc/windowing/egl/wayland/XBMCSurface.h
index c7d6531..a9228d6 100644
--- a/xbmc/windowing/egl/wayland/XBMCSurface.h
+++ b/xbmc/windowing/egl/wayland/XBMCSurface.h
@@ -19,8 +19,6 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <boost/function.hpp>
-#include <boost/noncopyable.hpp>
 
 class IDllWaylandClient;
 class IDllWaylandEGL;
@@ -68,7 +66,7 @@ public:
 private:
 
   class Private;
-  boost::scoped_ptr<Private> priv;
+  std::unique_ptr<Private> priv;
 };
 }
 }
diff --git a/xbmc/windowing/tests/wayland/TestEGLNativeTypeWayland.cpp b/xbmc/windowing/tests/wayland/TestEGLNativeTypeWayland.cpp
index 84a904e..c0c88c1 100644
--- a/xbmc/windowing/tests/wayland/TestEGLNativeTypeWayland.cpp
+++ b/xbmc/windowing/tests/wayland/TestEGLNativeTypeWayland.cpp
@@ -23,8 +23,7 @@
 
 #include <string>
 #include <vector>
-
-#include <boost/bind.hpp>
+#include <functional>
 
 #include <gtest/gtest.h>
 
@@ -125,12 +124,12 @@ private:
 ConnectedEGLNativeTypeWaylandWestonTest::ConnectedEGLNativeTypeWaylandWestonTest()
 {
   xw::WaylandDisplayListener &displayListener(xw::WaylandDisplayListener::GetInstance());
-  displayListener.SetHandler(boost::bind(&ConnectedEGLNativeTypeWaylandWestonTest::DisplayAvailable,
-                                         this, _1));
+  displayListener.SetHandler(std::bind(&ConnectedEGLNativeTypeWaylandWestonTest::DisplayAvailable,
+                                       this, std::placeholders::_1));
 
   xw::WaylandSurfaceListener &surfaceListener(xw::WaylandSurfaceListener::GetInstance());
-  surfaceListener.SetHandler(boost::bind(&ConnectedEGLNativeTypeWaylandWestonTest::SurfaceCreated,
-                                         this, _1));
+  surfaceListener.SetHandler(std::bind(&ConnectedEGLNativeTypeWaylandWestonTest::SurfaceCreated,
+                                       this, std::placeholders::_1));
 }
 
 ConnectedEGLNativeTypeWaylandWestonTest::~ConnectedEGLNativeTypeWaylandWestonTest()
@@ -207,14 +206,16 @@ protected:
               const char *interface,
               uint32_t version);
   
-  boost::scoped_ptr<xtw::XBMCWayland> m_xbmcWayland;
+  std::unique_ptr<xtw::XBMCWayland> m_xbmcWayland;
 };
 
 AssistedEGLNativeTypeWaylandTest::AssistedEGLNativeTypeWaylandTest()
 {
   xw::ExtraWaylandGlobals &extra(xw::ExtraWaylandGlobals::GetInstance());
-  extra.SetHandler(boost::bind(&AssistedEGLNativeTypeWaylandTest::Global,
-                               this, _1, _2, _3, _4));
+  extra.SetHandler(std::bind(&AssistedEGLNativeTypeWaylandTest::Global,
+                             this, std::placeholders::_1,
+                             std::placeholders::_2, std::placeholders::_3,
+                             std::placeholders::_4));
 }
 
 AssistedEGLNativeTypeWaylandTest::~AssistedEGLNativeTypeWaylandTest()
diff --git a/xbmc/windowing/tests/wayland/TestXBMCWaylandInputAcceptance.cpp b/xbmc/windowing/tests/wayland/TestXBMCWaylandInputAcceptance.cpp
index 4f66ead..3e60565 100644
--- a/xbmc/windowing/tests/wayland/TestXBMCWaylandInputAcceptance.cpp
+++ b/xbmc/windowing/tests/wayland/TestXBMCWaylandInputAcceptance.cpp
@@ -20,10 +20,8 @@
 #define WL_EGL_PLATFORM
 
 #include <stdexcept>
-
-#include <boost/bind.hpp>
-#include <boost/scoped_ptr.hpp>
-#include <boost/shared_ptr.hpp>
+#include <memory>
+#include <functional>
 
 #include <gtest/gtest.h>
 
@@ -125,23 +123,23 @@ protected:
   StubCursorManager cursors;
   StubEventListener listener;
 
-  boost::shared_ptr<struct xkb_context> xkbContext;
-  boost::scoped_ptr<CXKBKeymap> keymap;
+  std::shared_ptr<struct xkb_context> xkbContext;
+  std::unique_ptr<CXKBKeymap> keymap;
 
-  boost::scoped_ptr<xw::Display> display;
-  boost::scoped_ptr<xwe::IEventQueueStrategy> queue;
-  boost::scoped_ptr<xw::Registry> registry;
+  std::unique_ptr<xw::Display> display;
+  std::unique_ptr<xwe::IEventQueueStrategy> queue;
+  std::unique_ptr<xw::Registry> registry;
 
-  boost::scoped_ptr<xwe::Loop> loop;
-  boost::scoped_ptr<xbmc::InputFactory> input;
+  std::unique_ptr<xwe::Loop> loop;
+  std::unique_ptr<xbmc::InputFactory> input;
 
-  boost::scoped_ptr<xw::Compositor> compositor;
-  boost::scoped_ptr<xw::Shell> shell;
-  boost::scoped_ptr<xtw::XBMCWayland> xbmcWayland;
+  std::unique_ptr<xw::Compositor> compositor;
+  std::unique_ptr<xw::Shell> shell;
+  std::unique_ptr<xtw::XBMCWayland> xbmcWayland;
 
-  boost::scoped_ptr<xw::Surface> surface;
-  boost::scoped_ptr<xw::ShellSurface> shellSurface;
-  boost::scoped_ptr<xw::OpenGLSurface> openGLSurface;
+  std::unique_ptr<xw::Surface> surface;
+  std::unique_ptr<xw::ShellSurface> shellSurface;
+  std::unique_ptr<xw::OpenGLSurface> openGLSurface;
 
   virtual xwe::IEventQueueStrategy * CreateEventQueue() = 0;
 
@@ -158,7 +156,7 @@ private:
 
   bool synchronized;
   void Synchronize();
-  boost::scoped_ptr<xw::Callback> syncCallback;
+  std::unique_ptr<xw::Callback> syncCallback;
   
   TmpEnv m_waylandDisplayEnv;
 };
@@ -178,8 +176,8 @@ void InputEventsWestonTest::SetUp()
   xkbCommonLibrary.Load();
   
   xkbContext.reset(CXKBKeymap::CreateXKBContext(xkbCommonLibrary),
-                   boost::bind(&IDllXKBCommon::xkb_context_unref,
-                               &xkbCommonLibrary, _1));
+                   std::bind(&IDllXKBCommon::xkb_context_unref,
+                             &xkbCommonLibrary, std::placeholders::_1));
   keymap.reset(new CXKBKeymap(
                  xkbCommonLibrary, 
                  CXKBKeymap::CreateXKBKeymapFromNames(xkbCommonLibrary,
@@ -285,8 +283,8 @@ void InputEventsWestonTest::WaitForSynchronize()
   synchronized = false;
   syncCallback.reset(new xw::Callback(clientLibrary,
                                       display->Sync(),
-                                      boost::bind(&InputEventsWestonTest::Synchronize,
-                                                  this)));
+                                      std::bind(&InputEventsWestonTest::Synchronize,
+                                                this)));
   
   while (!synchronized)
     loop->Dispatch();
diff --git a/xbmc/windowing/tests/wayland/TmpEnv.h b/xbmc/windowing/tests/wayland/TmpEnv.h
index 7f67af4..9463208 100644
--- a/xbmc/windowing/tests/wayland/TmpEnv.h
+++ b/xbmc/windowing/tests/wayland/TmpEnv.h
@@ -19,16 +19,17 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <boost/noncopyable.hpp>
 
-class TmpEnv :
-  boost::noncopyable
+class TmpEnv
 {
 public:
 
   TmpEnv(const char *env, const char *val);
   ~TmpEnv();
 
+  TmpEnv(const TmpEnv &) = delete;
+  TmpEnv &operator=(const TmpEnv &) = delete;
+
 private:
 
   const char *m_env;
diff --git a/xbmc/windowing/tests/wayland/WestonProcess.cpp b/xbmc/windowing/tests/wayland/WestonProcess.cpp
index abc5071..945c9de 100644
--- a/xbmc/windowing/tests/wayland/WestonProcess.cpp
+++ b/xbmc/windowing/tests/wayland/WestonProcess.cpp
@@ -20,7 +20,6 @@
 #include <sstream>
 #include <stdexcept>
 
-#include <boost/noncopyable.hpp>
 #include <boost/tokenizer.hpp>
 
 #include <unistd.h>
diff --git a/xbmc/windowing/tests/wayland/WestonProcess.h b/xbmc/windowing/tests/wayland/WestonProcess.h
index 6d923cf..de9a640 100644
--- a/xbmc/windowing/tests/wayland/WestonProcess.h
+++ b/xbmc/windowing/tests/wayland/WestonProcess.h
@@ -21,8 +21,6 @@
  */
 #include "system.h"
 
-#include <boost/noncopyable.hpp>
-
 #ifdef UNICODE
   typedef std::wstring westring;
 #else
@@ -35,8 +33,7 @@ namespace xbmc
 {
 namespace test
 {
-class Process :
-  boost::noncopyable
+class Process
 {
 public:
 
@@ -44,6 +41,9 @@ public:
           const westring &socket);
   ~Process();
 
+  Process(const Process &) = delete;
+  Process &operator=(const Process &) = delete;
+
   void WaitForSignal(int signal, int timeout);
   void WaitForStatus(int status, int timeout);
 
diff --git a/xbmc/windowing/tests/wayland/WestonTest.cpp b/xbmc/windowing/tests/wayland/WestonTest.cpp
index d962a58..22ac775 100644
--- a/xbmc/windowing/tests/wayland/WestonTest.cpp
+++ b/xbmc/windowing/tests/wayland/WestonTest.cpp
@@ -19,8 +19,7 @@
  */
 #include <sstream>
 #include <stdexcept>
-
-#include <boost/array.hpp>
+#include <array>
 
 #include <signal.h>
 
@@ -35,13 +34,15 @@ namespace xt = xbmc::test;
 
 namespace
 {
-class TempFileWrapper :
-  boost::noncopyable
+class TempFileWrapper
 {
 public:
 
   TempFileWrapper(const westring &suffix);
   ~TempFileWrapper();
+
+  TempFileWrapper(const TempFileWrapper &) = delete;
+  TempFileWrapper &operator=(const TempFileWrapper &) = delete;
   
   void FetchDirectory(westring &directory);
   void FetchFilename(westring &name);
@@ -75,13 +76,15 @@ void TempFileWrapper::FetchFilename(westring &name)
   name = path.substr(directory.size());
 }
 
-class SavedTempSocket :
-  boost::noncopyable
+class SavedTempSocket
 {
 public:
 
   SavedTempSocket();
 
+  SavedTempSocket(const SavedTempSocket &) = delete;
+  SavedTempSocket &operator=(const SavedTempSocket &) = delete;
+
   const westring & FetchFilename();
   const westring & FetchDirectory();
 
@@ -111,14 +114,17 @@ SavedTempSocket::FetchDirectory()
 }
 
 template <typename Iterator>
-class SignalGuard :
-  boost::noncopyable
+class SignalGuard
 {
 public:
 
   SignalGuard(const Iterator &begin,
               const Iterator &end);
   ~SignalGuard();
+
+  SignalGuard(const SignalGuard &) = delete;
+  SignalGuard &operator=(const SignalGuard &) = delete;
+
 private:
 
   sigset_t mask;
@@ -150,7 +156,7 @@ SignalGuard<Iterator>::~SignalGuard()
     CLog::Log(LOGERROR, "Failed to unblock signals");
 }
 
-typedef boost::array<int, 4> SigArray;
+typedef std::array<int, 4> SigArray;
 SigArray BlockedSignals =
 {
   {
diff --git a/xbmc/windowing/tests/wayland/WestonTest.h b/xbmc/windowing/tests/wayland/WestonTest.h
index 5e5548c..91544f5 100644
--- a/xbmc/windowing/tests/wayland/WestonTest.h
+++ b/xbmc/windowing/tests/wayland/WestonTest.h
@@ -19,7 +19,6 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <boost/scoped_ptr.hpp>
 
 #include <gtest/gtest.h>
 
@@ -46,5 +45,5 @@ public:
 private:
 
   class Private;
-  boost::scoped_ptr<Private> priv;
+  std::unique_ptr<Private> priv;
 };
diff --git a/xbmc/windowing/tests/wayland/XBMCWayland.h b/xbmc/windowing/tests/wayland/XBMCWayland.h
index 1a5545f..42a1651 100644
--- a/xbmc/windowing/tests/wayland/XBMCWayland.h
+++ b/xbmc/windowing/tests/wayland/XBMCWayland.h
@@ -21,8 +21,6 @@
  */
 #if defined(HAVE_WAYLAND_XBMC_PROTO)
 
-#include <boost/noncopyable.hpp>
-
 struct wl_surface;
 struct xbmc_wayland;
 
@@ -32,14 +30,16 @@ namespace test
 {
 namespace wayland
 {
-class XBMCWayland :
-  boost::noncopyable
+class XBMCWayland
 {
 public:
 
   XBMCWayland(struct xbmc_wayland *xbmcWayland);
   ~XBMCWayland();
 
+  XBMCWayland(const XBMCWayland &) = delete;
+  XBMCWayland &operator=(const XBMCWayland &) = delete;
+
   struct wl_surface * MostRecentSurface();
 
   void AddMode(int width,
diff --git a/xbmc/windowing/tests/wayland/XBMCWaylandTestExtension.cpp b/xbmc/windowing/tests/wayland/XBMCWaylandTestExtension.cpp
index 90c665a..a1007ee 100644
--- a/xbmc/windowing/tests/wayland/XBMCWaylandTestExtension.cpp
+++ b/xbmc/windowing/tests/wayland/XBMCWaylandTestExtension.cpp
@@ -21,11 +21,7 @@
 
 #include <sstream>
 #include <vector>
-
-#include <boost/scoped_ptr.hpp>
-#include <boost/noncopyable.hpp>
-#include <boost/function.hpp>
-#include <boost/bind.hpp>
+#include <functional>
 
 #include <unistd.h>
 #include <signal.h>
@@ -48,14 +44,17 @@ namespace test
 {
 namespace wayland
 {
-class Listener :
-  boost::noncopyable
+class Listener
 {
 public:
 
-  typedef boost::function<void()> Delegate;
+  typedef std::function<void()> Delegate;
 
   Listener(const Delegate &);
+
+  Listener(const Listener &) = delete;
+  Listener &operator=(const Listener &) = delete;
+
   void BindTo(struct wl_signal *);
 
 private:
@@ -71,19 +70,21 @@ private:
 
 namespace weston
 {
-class Compositor :
-  boost::noncopyable
+class Compositor
 {
 public:
 
   Compositor(struct weston_compositor *);
   ~Compositor();
 
+  Compositor(const Compositor &) = delete;
+  Compositor &operator=(const Compositor &) = delete;
+
   struct wl_display * Display();
 
   struct weston_surface * TopSurface();
   struct weston_mode * LastMode();
-  void OnEachMode(const boost::function<void(struct weston_mode *)> &);
+  void OnEachMode(const std::function<void(struct weston_mode *)> &);
   struct wl_resource * PointerResource(struct wl_client *client);
   struct wl_resource * KeyboardResource(struct wl_client *client);
   struct weston_surface * Surface(struct wl_resource *client);
@@ -104,12 +105,14 @@ private:
 
 namespace wayland
 {
-class XBMCWayland :
-  boost::noncopyable
+class XBMCWayland
 {
 public:
 
   ~XBMCWayland();
+
+  XBMCWayland(const XBMCWayland &) = delete;
+  XBMCWayland &operator=(const XBMCWayland &) = delete;
   
   struct wl_resource * GetResource();
 
@@ -400,10 +403,10 @@ xtw::XBMCWayland::AddMode(struct wl_client *client,
   
   /* Clear flags from all other outputs that may have the same flags
    * as this one */
-  m_compositor.OnEachMode(boost::bind(ClearFlagsOnOtherModes,
-                                      _1,
-                                      flags,
-                                      &m_additionalModes.back()));
+  m_compositor.OnEachMode(std::bind(ClearFlagsOnOtherModes,
+                                    std::placeholders::_1,
+                                    flags,
+                                    &m_additionalModes.back()));
 }
 
 namespace
@@ -561,7 +564,7 @@ xtwc::Compositor::Compositor(struct weston_compositor *c) :
   m_readySource(wl_event_loop_add_timer(wl_display_get_event_loop(Display()),
                                         Compositor::Ready,
                                         this)),
-  m_destroyListener(boost::bind(Compositor::Unload, this))
+  m_destroyListener(std::bind(Compositor::Unload, this))
 {
   /* Dispatch ASAP */
   wl_event_source_timer_update(m_readySource, 1);
@@ -683,7 +686,7 @@ xtwc::Compositor::TopSurface()
 }
 
 void
-xtwc::Compositor::OnEachMode(const boost::function<void(struct weston_mode *)> &action)
+xtwc::Compositor::OnEachMode(const std::function<void(struct weston_mode *)> &action)
 {
   struct weston_output *output = FirstOutput();
   struct weston_mode *mode;
diff --git a/xbmc/windowing/wayland/EventLoop.cpp b/xbmc/windowing/wayland/EventLoop.cpp
index 5b5ea2a..6f338b5 100644
--- a/xbmc/windowing/wayland/EventLoop.cpp
+++ b/xbmc/windowing/wayland/EventLoop.cpp
@@ -19,9 +19,7 @@
  */
 #include <algorithm>
 #include <vector>
-
-#include <boost/bind.hpp>
-#include <boost/function.hpp>
+#include <functional>
 
 #include "utils/Stopwatch.h"
 
@@ -40,20 +38,20 @@ namespace xwe = xbmc::wayland::events;
  * strategy in place.  */
 void xwe::Loop::OnEvent(XBMC_Event &e)
 {
-  m_eventQueue.PushAction(boost::bind(&IEventListener::OnEvent,
-                                      &m_queueListener, e));
+  m_eventQueue.PushAction(std::bind(&IEventListener::OnEvent,
+                                    &m_queueListener, e));
 }
 
 void xwe::Loop::OnFocused()
 {
-  m_eventQueue.PushAction(boost::bind(&IEventListener::OnFocused,
-                                      &m_queueListener));
+  m_eventQueue.PushAction(std::bind(&IEventListener::OnFocused,
+                                    &m_queueListener));
 }
 
 void xwe::Loop::OnUnfocused()
 {
-  m_eventQueue.PushAction(boost::bind(&IEventListener::OnUnfocused,
-                                      &m_queueListener));
+  m_eventQueue.PushAction(std::bind(&IEventListener::OnUnfocused,
+                                    &m_queueListener));
 }
 
 xwe::Loop::Loop(IEventListener &queueListener,
@@ -110,9 +108,9 @@ void xwe::Loop::DispatchTimers()
    * trigger any remaining ones. If a timeout is triggered, then its
    * remaining time will return to the original timeout value */
   std::for_each(m_callbackQueue.begin(), m_callbackQueue.end (),
-                boost::bind(SubtractTimeoutAndTrigger,
-                            _1,
-                            static_cast<int>(elapsedMs)));
+                std::bind(SubtractTimeoutAndTrigger,
+                          std::placeholders::_1,
+                          static_cast<int>(elapsedMs)));
   /* Timeout times may have changed so that the timeouts are no longer
    * in order. Sort them so that they are. If they are unsorted,
    * the ordering of two timeouts, one which was added just before
diff --git a/xbmc/windowing/wayland/EventLoop.h b/xbmc/windowing/wayland/EventLoop.h
index 9664358..eb4a731 100644
--- a/xbmc/windowing/wayland/EventLoop.h
+++ b/xbmc/windowing/wayland/EventLoop.h
@@ -20,8 +20,7 @@
  *
  */
 #include <vector>
-
-#include <boost/weak_ptr.hpp>
+#include <memory>
 
 #include "utils/Stopwatch.h"
 
@@ -59,7 +58,7 @@ public:
   
   struct CallbackTracker
   {
-    typedef boost::weak_ptr <Callback> CallbackObserver;
+    typedef std::weak_ptr <Callback> CallbackObserver;
     
     CallbackTracker(uint32_t time,
                     uint32_t initial,
diff --git a/xbmc/windowing/wayland/EventQueueStrategy.h b/xbmc/windowing/wayland/EventQueueStrategy.h
index c98b353..ec12f11 100644
--- a/xbmc/windowing/wayland/EventQueueStrategy.h
+++ b/xbmc/windowing/wayland/EventQueueStrategy.h
@@ -19,8 +19,7 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <boost/function.hpp>
-#include <boost/noncopyable.hpp>
+#include <functional>
 
 namespace xbmc
 {
@@ -28,14 +27,16 @@ namespace wayland
 {
 namespace events
 {
-class IEventQueueStrategy :
-  boost::noncopyable
+class IEventQueueStrategy
 {
 public:
-
+  IEventQueueStrategy() = default;
   virtual ~IEventQueueStrategy() {}
 
-  typedef boost::function<void()> Action;
+  IEventQueueStrategy(const IEventQueueStrategy &) = delete;
+  IEventQueueStrategy &operator=(const IEventQueueStrategy &) = delete;
+
+  typedef std::function<void()> Action;
 
   virtual void PushAction(const Action &event) = 0;
   virtual void DispatchEventsFromMain() = 0;
diff --git a/xbmc/windowing/wayland/InputFactory.cpp b/xbmc/windowing/wayland/InputFactory.cpp
index 4d9988c..c0f4a47 100644
--- a/xbmc/windowing/wayland/InputFactory.cpp
+++ b/xbmc/windowing/wayland/InputFactory.cpp
@@ -17,10 +17,6 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <boost/bind.hpp>
-#include <boost/function.hpp>
-#include <boost/scoped_ptr.hpp>
-
 #include "EventListener.h"
 #include "Keyboard.h"
 #include "Pointer.h"
diff --git a/xbmc/windowing/wayland/InputFactory.h b/xbmc/windowing/wayland/InputFactory.h
index 3f6d174..e46c39c 100644
--- a/xbmc/windowing/wayland/InputFactory.h
+++ b/xbmc/windowing/wayland/InputFactory.h
@@ -19,7 +19,6 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <boost/scoped_ptr.hpp>
 
 #include "CursorManager.h"
 #include "Seat.h"
@@ -28,6 +27,8 @@
 #include "Keyboard.h"
 #include "KeyboardProcessor.h"
 
+#include <memory>
+
 class IDllWaylandClient;
 class IDllXKBCommon;
 
@@ -75,8 +76,8 @@ private:
   PointerProcessor m_pointerProcessor;
   KeyboardProcessor m_keyboardProcessor;
 
-  boost::scoped_ptr<wayland::Seat> m_seat;
-  boost::scoped_ptr<wayland::Pointer> m_pointer;
-  boost::scoped_ptr<wayland::Keyboard> m_keyboard;
+  std::unique_ptr<wayland::Seat> m_seat;
+  std::unique_ptr<wayland::Pointer> m_pointer;
+  std::unique_ptr<wayland::Keyboard> m_keyboard;
 };
 }
diff --git a/xbmc/windowing/wayland/Keyboard.cpp b/xbmc/windowing/wayland/Keyboard.cpp
index 1321c67..6c59da2 100644
--- a/xbmc/windowing/wayland/Keyboard.cpp
+++ b/xbmc/windowing/wayland/Keyboard.cpp
@@ -21,8 +21,6 @@
 #include <iostream>
 #include <stdexcept>
 
-#include <boost/bind.hpp>
-#include <boost/function.hpp>
 #include <boost/scope_exit.hpp>
 
 #include <wayland-client.h>
@@ -53,6 +51,12 @@ void DestroyXKBCommonContext(struct xkb_context *context,
 }
 }
 
+void
+xw::Keyboard::XkbContextDeleter::operator()(struct xkb_context *c)
+{
+  DestroyXKBCommonContext(c, m_xkbCommonLibrary);
+}
+
 xw::Keyboard::Keyboard(IDllWaylandClient &clientLibrary,
                        IDllXKBCommon &xkbCommonLibrary,
                        struct wl_keyboard *keyboard,
@@ -60,9 +64,7 @@ xw::Keyboard::Keyboard(IDllWaylandClient &clientLibrary,
   m_clientLibrary(clientLibrary),
   m_xkbCommonLibrary(xkbCommonLibrary),
   m_xkbCommonContext(CXKBKeymap::CreateXKBContext(m_xkbCommonLibrary),
-                     boost::bind(DestroyXKBCommonContext,
-                                 _1,
-                                 boost::ref(m_xkbCommonLibrary))),
+                     XkbContextDeleter(xkbCommonLibrary)),
   m_keyboard(keyboard),
   m_reciever(receiver)
 {
diff --git a/xbmc/windowing/wayland/Keyboard.h b/xbmc/windowing/wayland/Keyboard.h
index 44cb59f..bcc65fc 100644
--- a/xbmc/windowing/wayland/Keyboard.h
+++ b/xbmc/windowing/wayland/Keyboard.h
@@ -19,12 +19,10 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <boost/scoped_ptr.hpp>
-#include <boost/shared_ptr.hpp>
-#include <boost/noncopyable.hpp>
-
 #include <wayland-client.h>
 
+#include <memory>
+
 #include "input/linux/Keymap.h"
 
 class IDllWaylandClient;
@@ -74,8 +72,7 @@ public:
  * that interface should ascertain the intended keymap before processing
  * any other events.
  */
-class Keyboard :
-  public boost::noncopyable
+class Keyboard
 {
 public:
 
@@ -85,6 +82,9 @@ public:
            IKeyboardReceiver &);
   ~Keyboard();
 
+  Keyboard(const Keyboard &) = delete;
+  Keyboard &operator=(const Keyboard &) = delete;
+
   struct wl_keyboard * GetWlKeyboard();
 
   static void HandleKeymapCallback(void *,
@@ -139,18 +139,24 @@ private:
 
   IDllWaylandClient &m_clientLibrary;
   IDllXKBCommon &m_xkbCommonLibrary;
+
+  struct XkbContextDeleter {
+    IDllXKBCommon &m_xkbCommonLibrary;
+
+    constexpr explicit XkbContextDeleter(IDllXKBCommon &xkbCommonLibrary)
+      :m_xkbCommonLibrary(xkbCommonLibrary) {}
+
+    void operator()(struct xkb_context *c);
+  };
   
-  /* boost::scoped_ptr does not permit custom deleters
-   * and std::auto_ptr is deprecated, so we are using
-   * boost::shared_ptr instead */
-  boost::shared_ptr<struct xkb_context> m_xkbCommonContext;
+  std::unique_ptr<struct xkb_context, XkbContextDeleter> m_xkbCommonContext;
   struct wl_keyboard *m_keyboard;
   IKeyboardReceiver &m_reciever;
 
   /* Keyboard owns the keymap object, but it might inject observing
    * references elsewhere in order to assist those objects in their
    * processing */
-  boost::scoped_ptr<ILinuxKeymap> m_keymap;
+  std::unique_ptr<ILinuxKeymap> m_keymap;
 };
 }
 }
diff --git a/xbmc/windowing/wayland/KeyboardProcessor.cpp b/xbmc/windowing/wayland/KeyboardProcessor.cpp
index 0f01b2e..76a1380 100644
--- a/xbmc/windowing/wayland/KeyboardProcessor.cpp
+++ b/xbmc/windowing/wayland/KeyboardProcessor.cpp
@@ -18,13 +18,7 @@
  *
  */
 #include <algorithm>
-#include <sstream>
-#include <vector>
-
-#include <boost/bind.hpp>
-#include <boost/function.hpp>
-#include <boost/scoped_ptr.hpp>
-#include <boost/shared_ptr.hpp>
+#include <functional>
 
 #include <wayland-client.h>
 #include <xkbcommon/xkbcommon.h>
@@ -165,7 +159,7 @@ xbmc::KeyboardProcessor::Key(uint32_t serial,
   if (keyEventType == XBMC_KEYDOWN)
   {
     m_repeatCallback =
-      m_timeouts.RepeatAfterMs(boost::bind (
+      m_timeouts.RepeatAfterMs(std::bind (
                                  &KeyboardProcessor::RepeatCallback,
                                  this,
                                  key,
diff --git a/xbmc/windowing/wayland/KeyboardProcessor.h b/xbmc/windowing/wayland/KeyboardProcessor.h
index 3a6af53..1a81a95 100644
--- a/xbmc/windowing/wayland/KeyboardProcessor.h
+++ b/xbmc/windowing/wayland/KeyboardProcessor.h
@@ -19,7 +19,6 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <boost/scoped_ptr.hpp>
 
 #include "input/linux/Keymap.h"
 #include "Keyboard.h"
diff --git a/xbmc/windowing/wayland/Pointer.h b/xbmc/windowing/wayland/Pointer.h
index b617d54..161580f 100644
--- a/xbmc/windowing/wayland/Pointer.h
+++ b/xbmc/windowing/wayland/Pointer.h
@@ -19,8 +19,6 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <boost/noncopyable.hpp>
-
 #include <wayland-client.h>
 
 class IDllWaylandClient;
diff --git a/xbmc/windowing/wayland/PollThread.cpp b/xbmc/windowing/wayland/PollThread.cpp
index 70732fc..e874593 100644
--- a/xbmc/windowing/wayland/PollThread.cpp
+++ b/xbmc/windowing/wayland/PollThread.cpp
@@ -20,10 +20,6 @@
 #include <sstream>
 #include <stdexcept>
 
-#include <boost/bind.hpp>
-#include <boost/function.hpp>
-#include <boost/noncopyable.hpp>
-
 #ifndef _GNU_SOURCE
 #define _GNU_SOURCE
 #endif
@@ -31,6 +27,7 @@
 #include <unistd.h>
 #include <fcntl.h>
 #include <sys/poll.h>
+#include <string.h>
 
 #include "utils/log.h"
 
diff --git a/xbmc/windowing/wayland/PollThread.h b/xbmc/windowing/wayland/PollThread.h
index 07ca2d2..de87990 100644
--- a/xbmc/windowing/wayland/PollThread.h
+++ b/xbmc/windowing/wayland/PollThread.h
@@ -19,11 +19,10 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <boost/function.hpp>
-#include <boost/noncopyable.hpp>
-
 #include "threads/Thread.h"
 
+#include <functional>
+
 namespace xbmc
 {
 namespace wayland
@@ -44,7 +43,7 @@ class PollThread :
 {
 public:
 
-  typedef boost::function<void()> Dispatch;
+  typedef std::function<void()> Dispatch;
 
   PollThread(const Dispatch &dispatch,
              const Dispatch &beforePoll,
diff --git a/xbmc/windowing/wayland/Seat.h b/xbmc/windowing/wayland/Seat.h
index 49ae3aa..e74da00 100644
--- a/xbmc/windowing/wayland/Seat.h
+++ b/xbmc/windowing/wayland/Seat.h
@@ -19,8 +19,6 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <boost/noncopyable.hpp>
-
 #include <wayland-client.h>
 
 class IDllWaylandClient;
@@ -42,8 +40,7 @@ public:
   virtual void RemoveKeyboard() = 0;
 };
 
-class Seat :
-  public boost::noncopyable
+class Seat
 {
 public:
 
@@ -52,6 +49,9 @@ public:
        IInputReceiver &);
   ~Seat();
 
+  Seat(const Seat &) = delete;
+  Seat &operator=(const Seat &) = delete;
+
   struct wl_seat * GetWlSeat();
 
   static void HandleCapabilitiesCallback(void *,
diff --git a/xbmc/windowing/wayland/TimeoutManager.h b/xbmc/windowing/wayland/TimeoutManager.h
index c1dea95..16cb834 100644
--- a/xbmc/windowing/wayland/TimeoutManager.h
+++ b/xbmc/windowing/wayland/TimeoutManager.h
@@ -19,8 +19,8 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <boost/function.hpp>
-#include <boost/shared_ptr.hpp>
+#include <memory>
+#include <functional>
 
 namespace xbmc
 {
@@ -34,8 +34,8 @@ class ITimeoutManager
 {
 public:
   
-  typedef boost::function<void()> Callback;
-  typedef boost::shared_ptr <Callback> CallbackPtr;
+  typedef std::function<void()> Callback;
+  typedef std::shared_ptr <Callback> CallbackPtr;
   
   virtual ~ITimeoutManager() {}
   virtual CallbackPtr RepeatAfterMs (const Callback &callback,
diff --git a/xbmc/windowing/wayland/Wayland11EventQueueStrategy.cpp b/xbmc/windowing/wayland/Wayland11EventQueueStrategy.cpp
index c2bd327..b1f2078 100644
--- a/xbmc/windowing/wayland/Wayland11EventQueueStrategy.cpp
+++ b/xbmc/windowing/wayland/Wayland11EventQueueStrategy.cpp
@@ -18,10 +18,7 @@
  *
  */
 #include <algorithm>
-
-#include <boost/bind.hpp>
-#include <boost/function.hpp>
-#include <boost/noncopyable.hpp>
+#include <functional>
 
 #ifndef _GNU_SOURCE
 #define _GNU_SOURCE
@@ -78,12 +75,12 @@ xw11::EventQueueStrategy::EventQueueStrategy(IDllWaylandClient &clientLibrary,
                                              struct wl_display *display) :
   m_clientLibrary(clientLibrary),
   m_display(display),
-  m_thread(boost::bind(ReadAndDispatch,
-                       boost::ref(m_clientLibrary),
-                       m_display),
-           boost::bind(DispatchPendingEvents,
-                       boost::ref(m_clientLibrary),
-                       m_display),
+  m_thread(std::bind(ReadAndDispatch,
+                     std::ref(m_clientLibrary),
+                     m_display),
+           std::bind(DispatchPendingEvents,
+                     std::ref(m_clientLibrary),
+                     m_display),
            m_clientLibrary.wl_display_get_fd(m_display))
 {
 }
diff --git a/xbmc/windowing/wayland/Wayland11EventQueueStrategy.h b/xbmc/windowing/wayland/Wayland11EventQueueStrategy.h
index e6c3945..18914de 100644
--- a/xbmc/windowing/wayland/Wayland11EventQueueStrategy.h
+++ b/xbmc/windowing/wayland/Wayland11EventQueueStrategy.h
@@ -21,8 +21,6 @@
  */
 #include <queue>
 
-#include <boost/noncopyable.hpp>
-
 #include "threads/CriticalSection.h"
 #include "EventQueueStrategy.h"
 #include "PollThread.h"
diff --git a/xbmc/windowing/wayland/Wayland12EventQueueStrategy.cpp b/xbmc/windowing/wayland/Wayland12EventQueueStrategy.cpp
index 93cf18c..57bafb4 100644
--- a/xbmc/windowing/wayland/Wayland12EventQueueStrategy.cpp
+++ b/xbmc/windowing/wayland/Wayland12EventQueueStrategy.cpp
@@ -17,9 +17,7 @@
  *  <http://www.gnu.org/licenses/>.
  *
  */
-#include <boost/bind.hpp>
-#include <boost/function.hpp>
-#include <boost/noncopyable.hpp>
+#include <functional>
 
 #ifndef _GNU_SOURCE
 #define _GNU_SOURCE
@@ -56,8 +54,8 @@ xw12::EventQueueStrategy::EventQueueStrategy(IDllWaylandClient &clientLibrary,
                                              struct wl_display *display) :
   m_clientLibrary(clientLibrary),
   m_display(display),
-  m_thread(boost::bind(Read, boost::ref(m_clientLibrary), display),
-           boost::bind(Nothing),
+  m_thread(std::bind(Read, std::ref(m_clientLibrary), display),
+           std::bind(Nothing),
            m_clientLibrary.wl_display_get_fd(m_display))
 {
 }
diff --git a/xbmc/windowing/wayland/Wayland12EventQueueStrategy.h b/xbmc/windowing/wayland/Wayland12EventQueueStrategy.h
index 584e011..32836ff 100644
--- a/xbmc/windowing/wayland/Wayland12EventQueueStrategy.h
+++ b/xbmc/windowing/wayland/Wayland12EventQueueStrategy.h
@@ -21,8 +21,6 @@
  */
 #include <queue>
 
-#include <boost/noncopyable.hpp>
-
 #include "EventQueueStrategy.h"
 #include "PollThread.h"
 
-- 
2.7.4

