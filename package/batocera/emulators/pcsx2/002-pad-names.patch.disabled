diff --git a/plugins/onepad_legacy/Linux/ini.cpp b/plugins/onepad_legacy/Linux/ini.cpp
index 3431abf..a39d287 100644
--- a/plugins/onepad_legacy/Linux/ini.cpp
+++ b/plugins/onepad_legacy/Linux/ini.cpp
@@ -136,6 +136,11 @@ void SaveConfig()
     fprintf(f, "ff_intensity = %d\n", conf->get_ff_intensity());
 
     for (int pad = 0; pad < GAMEPAD_NUMBER; pad++) {
+      if(s_vgamePad.size() > pad) {
+      fprintf(f, "[%d][%s] = %s\n", pad, "name", s_vgamePad[pad]->GetName().c_str());
+      } else {
+	fprintf(f, "[%d][%s] = %s\n", pad, "name", "");
+      }
         for (int key = 0; key < MAX_KEYS; key++) {
             fprintf(f, "[%d][%d] = 0x%x\n", pad, key, get_key(pad, key));
         }
@@ -153,6 +158,7 @@ void LoadConfig()
 {
     FILE *f;
     char str[256];
+    char buf[256];
     bool have_user_setting = false;
 
     if (!conf)
@@ -169,6 +175,7 @@ void LoadConfig()
     }
 
     u32 value;
+    char strvalue[128];
     if (fscanf(f, "log = %u\n", &value) == 0)
         goto error;
     conf->log = value;
@@ -188,6 +195,11 @@ void LoadConfig()
     conf->set_ff_intensity(value);
 
     for (int pad = 0; pad < GAMEPAD_NUMBER; pad++) {
+        // name
+        fgets(buf, sizeof buf, f);
+	sprintf(str, "[%d][%s] = %%[^\n]", pad, "name");
+	sscanf(buf, str, strvalue);
+        set_name(pad, strvalue);
         for (int key = 0; key < MAX_KEYS; key++) {
             sprintf(str, "[%d][%d] = 0x%%x\n", pad, key);
             u32 temp = 0;
diff --git a/plugins/onepad_legacy/SDL/joystick.cpp b/plugins/onepad_legacy/SDL/joystick.cpp
index 12d9cba..e1f1e00 100644
--- a/plugins/onepad_legacy/SDL/joystick.cpp
+++ b/plugins/onepad_legacy/SDL/joystick.cpp
@@ -27,6 +27,7 @@
 //////////////////////////
 
 static u32 s_bSDLInit = false;
+static int padSet[GAMEPAD_NUMBER];
 
 void JoystickInfo::UpdateReleaseState()
 {
@@ -74,6 +75,10 @@ void JoystickInfo::EnumerateJoysticks(vector<GamePad *> &vjoysticks)
 
     vjoysticks.resize(SDL_NumJoysticks());
 
+    for(int i=0; i<GAMEPAD_NUMBER; i++) {
+      padSet[i] = 0;
+    }
+    
     for (int i = 0; i < (int)vjoysticks.size(); ++i) {
         vjoysticks[i] = new JoystickInfo();
         vjoysticks[i]->Init(i);
@@ -169,12 +174,64 @@ void JoystickInfo::Destroy()
     }
 }
 
+SDL_Joystick* JoystickInfo::FindPadAny() {
+  SDL_Joystick* curjoy;
+
+  for (int i = 0; i < SDL_NumJoysticks(); ++i) {
+    if(padSet[i] == 1) {
+      continue; // pad already found
+    }
+
+    curjoy = SDL_JoystickOpen(i);
+    if(curjoy == NULL) {
+      continue;
+    }
+
+    return curjoy;
+  }
+  return NULL;
+}
+
+SDL_Joystick* JoystickInfo::FindPad(int id) {
+  const char* curdevname;
+  SDL_Joystick* curjoy;
+
+  for (int i = 0; i < SDL_NumJoysticks(); ++i) {
+    if(padSet[i] == 1) {
+      continue; // pad already found
+    }
+
+    curjoy = SDL_JoystickOpen(i);
+    if(curjoy == NULL) {
+      continue;
+    }
+
+#if SDL_MAJOR_VERSION >= 2
+    curdevname = SDL_JoystickName(curjoy);
+#else
+    curdevname = SDL_JoystickName(i);
+#endif
+    if(strcmp(curdevname, conf->pad_options[id].name) == 0) {
+      padSet[i] = 1;
+      return curjoy;
+    } else {
+      SDL_JoystickClose(curjoy);
+    }
+  }
+  return NULL;
+}
+
 bool JoystickInfo::Init(int id)
 {
     Destroy();
     _id = id;
 
-    joy = SDL_JoystickOpen(id);
+    // find the pad id
+    joy = FindPad(id);
+    if(joy == NULL) {
+      joy = FindPadAny(); // find any fallback pad
+    }
+    
     if (joy == NULL) {
         PAD_LOG("failed to open joystick %d\n", id);
         return false;
diff --git a/plugins/onepad_legacy/SDL/joystick.h b/plugins/onepad_legacy/SDL/joystick.h
index fe76c38..0aef272 100644
--- a/plugins/onepad_legacy/SDL/joystick.h
+++ b/plugins/onepad_legacy/SDL/joystick.h
@@ -86,6 +86,9 @@ private:
     }
     void GenerateDefaultEffect();
 
+    SDL_Joystick* FindPad(int id);
+    SDL_Joystick* FindPadAny();
+
     SDL_Joystick *joy;
 #if SDL_MAJOR_VERSION >= 2
     SDL_Haptic *haptic;
diff --git a/plugins/onepad_legacy/controller.cpp b/plugins/onepad_legacy/controller.cpp
index 09badfb..348a19d 100644
--- a/plugins/onepad_legacy/controller.cpp
+++ b/plugins/onepad_legacy/controller.cpp
@@ -48,6 +48,16 @@ __forceinline int get_key(int pad, int index)
     return conf->keys[pad][index];
 }
 
+__forceinline void set_name(int pad, const char* name)
+{
+  strcpy(conf->pad_options[pad].name, name);
+}
+
+__forceinline char* get_name(int pad)
+{
+  return conf->pad_options[pad].name;
+}
+
 __forceinline KeyType type_of_joykey(int pad, int index)
 {
     int key = get_key(pad, index);
diff --git a/plugins/onepad_legacy/controller.h b/plugins/onepad_legacy/controller.h
index 4c35a29..ccf2716 100644
--- a/plugins/onepad_legacy/controller.h
+++ b/plugins/onepad_legacy/controller.h
@@ -34,6 +34,8 @@ extern void set_keyboad_key(int pad, int keysym, int index);
 extern int get_keyboard_key(int pad, int keysym);
 extern void set_key(int pad, int index, int value);
 extern int get_key(int pad, int index);
+extern void set_name(int pad, const char* name);
+extern char* get_name(int pad);
 extern bool IsAnalogKey(int index);
 
 extern KeyType type_of_joykey(int pad, int index);
@@ -59,6 +61,7 @@ public:
     {
         struct
         {
+	    char name[128];
             u16 forcefeedback : 1;
             u16 reverse_lx : 1;
             u16 reverse_ly : 1;
