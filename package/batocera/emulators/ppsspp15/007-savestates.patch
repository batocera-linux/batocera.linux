diff --git a/Core/SaveState.cpp b/Core/SaveState.cpp
index 4d11a62..d818829 100644
--- a/Core/SaveState.cpp
+++ b/Core/SaveState.cpp
@@ -376,13 +376,8 @@ namespace SaveState
 		}
 		fullDiscId = StringFromFormat("%s_%s", discId.c_str(), discVer.c_str());
 
-		std::string temp = StringFromFormat("ms0:/PSP/PPSSPP_STATE/%s_%d.%s", fullDiscId.c_str(), slot, extension);
-		std::string hostPath;
-		if (pspFileSystem.GetHostPath(temp, hostPath)) {
-			return hostPath;
-		} else {
-			return "";
-		}
+		std::string filename = StringFromFormat("%s_%d.%s", fullDiscId.c_str(), slot, extension);
+		return GetSysDirectory(DIRECTORY_SAVESTATE) + filename;
 	}
 
 	int GetCurrentSlot()
@@ -717,9 +712,6 @@ namespace SaveState
 
 	void Init()
 	{
-		// Make sure there's a directory for save slots
-		pspFileSystem.MkDir("ms0:/PSP/PPSSPP_STATE");
-
 		std::lock_guard<std::mutex> guard(mutex);
 		rewindStates.Clear();
 
diff --git a/Core/System.cpp b/Core/System.cpp
index 1030d91..bd7e0c6 100644
--- a/Core/System.cpp
+++ b/Core/System.cpp
@@ -590,7 +590,7 @@ std::string GetSysDirectory(PSPDirectories directoryType) {
 	case DIRECTORY_DUMP:
 		return g_Config.memStickDirectory + "PSP/SYSTEM/DUMP/";
 	case DIRECTORY_SAVESTATE:
-		return g_Config.memStickDirectory + "PSP/PPSSPP_STATE/";
+		return "/userdata/saves/psp/";
 	case DIRECTORY_CACHE:
 		return g_Config.memStickDirectory + "PSP/SYSTEM/CACHE/";
 	case DIRECTORY_TEXTURES:
@@ -691,12 +691,7 @@ void InitSysDirectories() {
 	File::CreateDir(g_Config.memStickDirectory + "PSP/COMMON");
 	File::CreateDir(g_Config.memStickDirectory + "PSP/GAME");
 	File::CreateDir(g_Config.memStickDirectory + "PSP/SAVEDATA");
-	File::CreateDir(g_Config.memStickDirectory + "PSP/PPSSPP_STATE");
-#ifdef ANDROID
-	// Avoid media scanners in PPSSPP_STATE directory
-	File::CreateEmptyFile(g_Config.memStickDirectory + "PSP/PPSSPP_STATE/.nomedia");
-#endif
-
+	
 	if (g_Config.currentDirectory.empty()) {
 		g_Config.currentDirectory = GetSysDirectory(DIRECTORY_GAME);
 	}
