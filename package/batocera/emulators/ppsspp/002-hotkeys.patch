diff --git a/Core/SaveState.cpp b/Core/SaveState.cpp
index 30889f8..519eb27 100644
--- a/Core/SaveState.cpp
+++ b/Core/SaveState.cpp
@@ -411,6 +411,11 @@ namespace SaveState
 		g_Config.iCurrentStateSlot = (g_Config.iCurrentStateSlot + 1) % NUM_SLOTS;
 	}
 
+	void PreviousSlot()
+	{
+		g_Config.iCurrentStateSlot = (g_Config.iCurrentStateSlot - 1 + NUM_SLOTS) % NUM_SLOTS;
+	}
+
 	void LoadSlot(const std::string &gameFilename, int slot, Callback callback, void *cbUserData)
 	{
 		std::string fn = GenerateSaveSlotFilename(gameFilename, slot, STATE_EXTENSION);
diff --git a/Core/SaveState.h b/Core/SaveState.h
index 64c4dbe..d7326d6 100644
--- a/Core/SaveState.h
+++ b/Core/SaveState.h
@@ -36,6 +36,7 @@ namespace SaveState
 
 	// Cycle through the 5 savestate slots
 	void NextSlot();
+	void PreviousSlot();
 	void SaveSlot(const std::string &gameFilename, int slot, Callback callback, void *cbUserData = 0);
 	void LoadSlot(const std::string &gameFilename, int slot, Callback callback, void *cbUserData = 0);
 	bool UndoSaveSlot(const std::string &gameFilename, int slot);
diff --git a/UI/EmuScreen.cpp b/UI/EmuScreen.cpp
index 3e1b322..19aa874 100644
--- a/UI/EmuScreen.cpp
+++ b/UI/EmuScreen.cpp
@@ -89,6 +89,8 @@ static bool frameStep_;
 static int lastNumFlips;
 static bool startDumping;
 
+static int batocera_hotkey = 0;
+
 static void __EmuScreenVblank()
 {
 	auto sy = GetI18NCategory("System");
@@ -479,7 +481,8 @@ void EmuScreen::onVKeyDown(int virtualKeyCode) {
 		break;
 
 	case VIRTKEY_PAUSE:
-		pauseTrigger_ = true;
+		batocera_hotkey = 1;
+		//pauseTrigger_ = true;
 		break;
 
 	case VIRTKEY_FRAME_ADVANCE:
@@ -606,6 +609,9 @@ void EmuScreen::onVKeyUp(int virtualKeyCode) {
 		setVKeyAnalogX(CTRL_STICK_RIGHT, VIRTKEY_AXIS_RIGHT_X_MIN, VIRTKEY_AXIS_RIGHT_X_MAX);
 		setVKeyAnalogY(CTRL_STICK_RIGHT, VIRTKEY_AXIS_RIGHT_Y_MIN, VIRTKEY_AXIS_RIGHT_Y_MAX);
 		break;
+	
+	case VIRTKEY_PAUSE:
+	  batocera_hotkey = 0;
 
 	default:
 		break;
@@ -729,6 +735,53 @@ void EmuScreen::pspKey(int pspKeyCode, int flags) {
 			__CtrlButtonDown(pspKeyCode);
 		if (flags & KEY_UP)
 			__CtrlButtonUp(pspKeyCode);
+
+		/* batocera hotkeys */
+		int buttons = __CtrlPeekButtons();
+		if(batocera_hotkey == 1 || (buttons & CTRL_SELECT) == CTRL_SELECT) {
+
+		  if((buttons & CTRL_CROSS) == CTRL_CROSS) {
+		    batocera_hotkey = 0;        // disable, because in case of menu, the down is not got
+		    __CtrlButtonUp(CTRL_CROSS); // disable, because in case of menu, the down is not got
+		    pauseTrigger_ = true;
+		  }
+
+		  if((buttons & CTRL_START) == CTRL_START) {
+		     System_SendMessage("event", "exitprogram");
+		     // Request the framework to exit cleanly.
+		     System_SendMessage("finish", "");
+		     // However, let's make sure the config was saved, since it may not have been.
+		     g_Config.Save("EmuScreen::pspKey");
+		  }
+
+		  if((buttons & CTRL_LEFT) == CTRL_LEFT) {
+		    if (SaveState::CanRewind()) {
+		      SaveState::Rewind(&AfterSaveStateAction);
+		    } else {
+		      auto sc = GetI18NCategory("Screen");
+		      osm.Show(sc->T("norewind", "No rewind save states available"), 2.0);
+		    }
+		  }
+
+		  if((buttons & CTRL_SQUARE) == CTRL_SQUARE) {
+		    SaveState::SaveSlot(gamePath_, g_Config.iCurrentStateSlot, &AfterSaveStateAction);
+		  }
+
+		  if((buttons & CTRL_TRIANGLE) == CTRL_TRIANGLE) {
+		    SaveState::LoadSlot(gamePath_, g_Config.iCurrentStateSlot, &AfterSaveStateAction);
+		  }
+
+		  if((buttons & CTRL_UP) == CTRL_UP) {
+		    SaveState::NextSlot();
+		    NativeMessageReceived("savestate_displayslot", "");
+		  }
+
+		  if((buttons & CTRL_DOWN) == CTRL_DOWN) {
+		    SaveState::PreviousSlot();
+		    NativeMessageReceived("savestate_displayslot", "");
+		  }
+		}
+
 	}
 }
 
