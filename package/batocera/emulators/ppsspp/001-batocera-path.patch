diff --git a/Core/Config.cpp b/Core/Config.cpp
index d8d9e11a44..a333bfac92 100644
--- a/Core/Config.cpp
+++ b/Core/Config.cpp
@@ -1280,9 +1280,9 @@ void Config::Reload() {
 // really think of any other legit uses).
 void Config::UpdateIniLocation(const char *iniFileName, const char *controllerIniFilename) {
 	const bool useIniFilename = iniFileName != nullptr && strlen(iniFileName) > 0;
-	iniFilename_ = FindConfigFile(useIniFilename ? iniFileName : "ppsspp.ini");
+	iniFilename_ = "/userdata/system/configs/ppsspp/PSP/SYSTEM/ppsspp.ini";
 	const bool useControllerIniFilename = controllerIniFilename != nullptr && strlen(controllerIniFilename) > 0;
-	controllerIniFilename_ = FindConfigFile(useControllerIniFilename ? controllerIniFilename : "controls.ini");
+	controllerIniFilename_ = "/userdata/system/configs/ppsspp/PSP/SYSTEM/controls.ini";
 }
 
 void Config::Load(const char *iniFileName, const char *controllerIniFilename) {
diff --git a/Core/System.cpp b/Core/System.cpp
index 04070c614e..2e9860e9d3 100644
--- a/Core/System.cpp
+++ b/Core/System.cpp
@@ -586,6 +586,7 @@ CoreParameter &PSP_CoreParameter() {
 }
 
 Path GetSysDirectory(PSPDirectories directoryType) {
+	g_Config.memStickDirectory = "/userdata/saves/psp/";
 	Path memStickDirectory = g_Config.memStickDirectory;
 	Path pspDirectory;
 	if (memStickDirectory.GetFilename() == "PSP") {
@@ -599,13 +600,13 @@ Path GetSysDirectory(PSPDirectories directoryType) {
 	case DIRECTORY_PSP:
 		return pspDirectory;
 	case DIRECTORY_CHEATS:
-		return pspDirectory / "Cheats";
+		return "/userdata/cheats/psp/";
 	case DIRECTORY_GAME:
 		return pspDirectory / "GAME";
 	case DIRECTORY_SAVEDATA:
 		return pspDirectory / "SAVEDATA";
 	case DIRECTORY_SCREENSHOT:
-		return pspDirectory / "SCREENSHOT";
+		return "/userdata/screenshots/";
 	case DIRECTORY_SYSTEM:
 		return pspDirectory / "SYSTEM";
 	case DIRECTORY_PAUTH:
@@ -630,7 +631,7 @@ Path GetSysDirectory(PSPDirectories directoryType) {
 	case DIRECTORY_VIDEO:
 		return pspDirectory / "VIDEO";
 	case DIRECTORY_AUDIO:
-		return pspDirectory / "AUDIO";
+		return "/userdata/music/";
 	case DIRECTORY_CUSTOM_SHADERS:
 		return pspDirectory / "shaders";
 
diff --git a/SDL/SDLJoystick.cpp b/SDL/SDLJoystick.cpp
index c129ac821a..925feeba5b 100644
--- a/SDL/SDLJoystick.cpp
+++ b/SDL/SDLJoystick.cpp
@@ -24,7 +24,7 @@ SDLJoystick::SDLJoystick(bool init_SDL ) : registeredAsEventHandler(false) {
 		SDL_Init(SDL_INIT_JOYSTICK | SDL_INIT_VIDEO | SDL_INIT_GAMECONTROLLER);
 	}
 
-	const char *dbPath = "gamecontrollerdb.txt";
+	const char *dbPath = "/userdata/system/configs/ppsspp/gamecontrollerdb.txt";
 	cout << "loading control pad mappings from " << dbPath << ": ";
 
 	size_t size;
@@ -37,7 +37,7 @@ SDLJoystick::SDLJoystick(bool init_SDL ) : registeredAsEventHandler(false) {
 		}
 		delete[] mappingData;
 	} else {
-		cout << "gamecontrollerdb.txt missing" << endl;
+		cout << "/userdata/system/configs/ppsspp/gamecontrollerdb.txt missing" << endl;
 	}
 	cout << "SUCCESS!" << endl;
 	setUpControllers();
diff --git a/UI/NativeApp.cpp b/UI/NativeApp.cpp
index 4bb1c4236a..15abbd07f4 100644
--- a/UI/NativeApp.cpp
+++ b/UI/NativeApp.cpp
@@ -487,7 +487,7 @@ void NativeInit(int argc, const char *argv[], const char *savegame_dir, const ch
 	VFSRegister("", new DirectoryAssetReader(File::GetExeDirectory()));
 	VFSRegister("", new DirectoryAssetReader(Path("/usr/local/share/ppsspp/assets")));
 	VFSRegister("", new DirectoryAssetReader(Path("/usr/local/share/games/ppsspp/assets")));
-	VFSRegister("", new DirectoryAssetReader(Path("/usr/share/ppsspp/assets")));
+	VFSRegister("", new DirectoryAssetReader(Path("/usr/share/ppsspp/PPSSPP")));
 	VFSRegister("", new DirectoryAssetReader(Path("/usr/share/games/ppsspp/assets")));
 #endif
 
