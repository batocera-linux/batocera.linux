diff --git a/Core/Config.cpp b/Core/Config.cpp
index 9a4e547..7f7858a 100644
--- a/Core/Config.cpp
+++ b/Core/Config.cpp
@@ -1122,10 +1122,10 @@ void Config::Reload() {
 
 void Config::Load(const char *iniFileName, const char *controllerIniFilename) {
 	const bool useIniFilename = iniFileName != nullptr && strlen(iniFileName) > 0;
-	iniFilename_ = FindConfigFile(useIniFilename ? iniFileName : "ppsspp.ini");
+	iniFilename_ = "/userdata/system/configs/ppsspp/PSP/SYSTEM/ppsspp.ini";
 
 	const bool useControllerIniFilename = controllerIniFilename != nullptr && strlen(controllerIniFilename) > 0;
-	controllerIniFilename_ = FindConfigFile(useControllerIniFilename ? controllerIniFilename : "controls.ini");
+	controllerIniFilename_ = "/userdata/system/configs/ppsspp/PSP/SYSTEM/controls.ini";
 
 	INFO_LOG(LOADER, "Loading config: %s", iniFilename_.c_str());
 	bSaveSettings = true;
diff --git a/Core/System.cpp b/Core/System.cpp
index e4a07d4..4f8e778 100644
--- a/Core/System.cpp
+++ b/Core/System.cpp
@@ -510,15 +510,16 @@ CoreParameter &PSP_CoreParameter() {
 }
 
 std::string GetSysDirectory(PSPDirectories directoryType) {
+	g_Config.memStickDirectory = "/userdata/saves/psp/";
 	switch (directoryType) {
 	case DIRECTORY_CHEATS:
-		return g_Config.memStickDirectory + "PSP/Cheats/";
+		return                (std::string) "/userdata/cheats/";
 	case DIRECTORY_GAME:
 		return g_Config.memStickDirectory + "PSP/GAME/";
 	case DIRECTORY_SAVEDATA:
 		return g_Config.memStickDirectory + "PSP/SAVEDATA/";
 	case DIRECTORY_SCREENSHOT:
-		return g_Config.memStickDirectory + "PSP/SCREENSHOT/";
+		return                (std::string) "/userdata/screenshots/";
 	case DIRECTORY_SYSTEM:
 		return g_Config.memStickDirectory + "PSP/SYSTEM/";
 	case DIRECTORY_PAUTH:
@@ -539,7 +540,7 @@ std::string GetSysDirectory(PSPDirectories directoryType) {
 	case DIRECTORY_VIDEO:
 		return g_Config.memStickDirectory + "PSP/VIDEO/";
 	case DIRECTORY_AUDIO:
-		return g_Config.memStickDirectory + "PSP/AUDIO/";
+		return                (std::string) "/userdata/music/";
 	// Just return the memory stick root if we run into some sort of problem.
 	default:
 		ERROR_LOG(FILESYS, "Unknown directory type.");
diff --git a/SDL/SDLJoystick.cpp b/SDL/SDLJoystick.cpp
index 72254a1..2f6c1b4 100644
--- a/SDL/SDLJoystick.cpp
+++ b/SDL/SDLJoystick.cpp
@@ -20,7 +20,7 @@ SDLJoystick::SDLJoystick(bool init_SDL ) : registeredAsEventHandler(false) {
 		SDL_Init(SDL_INIT_JOYSTICK | SDL_INIT_VIDEO | SDL_INIT_GAMECONTROLLER);
 	}
 
-	const char *dbPath = "gamecontrollerdb.txt";
+	const char *dbPath = "/userdata/system/configs/ppsspp/gamecontrollerdb.txt";
 	cout << "loading control pad mappings from " << dbPath << ": ";
 
 	size_t size;
@@ -33,7 +33,7 @@ SDLJoystick::SDLJoystick(bool init_SDL ) : registeredAsEventHandler(false) {
 		}
 		delete[] mappingData;
 	} else {
-		cout << "gamecontrollerdb.txt missing" << endl;
+		cout << "/userdata/system/configs/ppsspp/gamecontrollerdb.txt missing" << endl;
 	}
 	cout << "SUCCESS!" << endl;
 	setUpControllers();
diff --git a/UI/NativeApp.cpp b/UI/NativeApp.cpp
index 3334120..7286955 100644
--- a/UI/NativeApp.cpp
+++ b/UI/NativeApp.cpp
@@ -457,7 +457,7 @@ void NativeInit(int argc, const char *argv[], const char *savegame_dir, const ch
 #if !defined(MOBILE_DEVICE) && !defined(_WIN32) && !PPSSPP_PLATFORM(SWITCH)
 	VFSRegister("", new DirectoryAssetReader((File::GetExeDirectory() + "assets/").c_str()));
 	VFSRegister("", new DirectoryAssetReader((File::GetExeDirectory()).c_str()));
-	VFSRegister("", new DirectoryAssetReader("/usr/share/ppsspp/assets/"));
+	VFSRegister("", new DirectoryAssetReader("/usr/share/ppsspp/PPSSPP/"));
 #endif
 #if PPSSPP_PLATFORM(SWITCH)
 	std::string assetPath = user_data_path + "assets/";
