--- a/Core/HW/MediaEngine.cpp	2021-03-02 21:50:51.000000000 +0100
+++ b/Core/HW/MediaEngine.cpp	2021-04-13 10:52:53.220813276 +0200
@@ -328,13 +333,19 @@
 
 	if (m_videoStream == -1) {
 		// Find the first video stream
-		for(int i = 0; i < (int)m_pFormatCtx->nb_streams; i++) {
-			if(m_pFormatCtx->streams[i]->codec->codec_type == AVMEDIA_TYPE_VIDEO) {
+		for (int i = 0; i < (int)m_pFormatCtx->nb_streams; i++) {
+			const AVStream *s = m_pFormatCtx->streams[i];
+#if LIBAVFORMAT_VERSION_INT >= AV_VERSION_INT(57, 33, 100)
+			AVMediaType type = s->codecpar->codec_type;
+#else
+			AVMediaType type = s->codec->codec_type;
+#endif
+			if (type == AVMEDIA_TYPE_VIDEO) {
 				m_videoStream = i;
 				break;
 			}
 		}
-		if(m_videoStream == -1)
+		if (m_videoStream == -1)
 			return false;
 	}
 
@@ -361,8 +372,13 @@
 		av_free(m_pIOContext->buffer);
 	if (m_pIOContext)
 		av_free(m_pIOContext);
-	for (auto it = m_pCodecCtxs.begin(), end = m_pCodecCtxs.end(); it != end; ++it)
-		avcodec_close(it->second);
+	for (auto it : m_pCodecCtxs) {
+#if LIBAVFORMAT_VERSION_INT >= AV_VERSION_INT(57, 33, 100)
+		avcodec_free_context(&it.second);
+#else
+		avcodec_close(it.second);
+#endif
+	}
 	m_pCodecCtxs.clear();
 	if (m_pFormatCtx)
 		avformat_close_input(&m_pFormatCtx);
@@ -378,6 +394,7 @@
 	closeMedia();
 
 	m_videopts = 0;
+	m_lastPts = -1;
 	m_audiopts = 0;
 	m_ringbuffersize = RingbufferSize;
 	m_pdata = new BufferQueue(RingbufferSize + 2048);
@@ -411,7 +428,12 @@
 				streamId = PSMF_VIDEO_STREAM_ID | streamNum;
 
 			stream->id = 0x00000100 | streamId;
+#if LIBAVFORMAT_VERSION_INT >= AV_VERSION_INT(57, 33, 100)
+			stream->codecpar->codec_type = AVMEDIA_TYPE_VIDEO;
+			stream->codecpar->codec_id = AV_CODEC_ID_H264;
+#else
 			stream->request_probe = 0;
+#endif
 			stream->need_parsing = AVSTREAM_PARSE_FULL;
 			// We could set the width here, but we don't need to.
 			if (streamNum >= m_expectedVideoStreams) {
@@ -496,21 +518,30 @@
 		if ((u32)streamNum >= m_pFormatCtx->nb_streams) {
 			return false;
 		}
-		AVCodecContext *m_pCodecCtx = m_pFormatCtx->streams[streamNum]->codec;
-#if LIBAVFORMAT_VERSION_INT >= AV_VERSION_INT(57,33,100)
-		AVCodecParameters *m_pCodecPar = m_pFormatCtx->streams[streamNum]->codecpar;
 
-		// Update from deprecated public codec context
-		if (avcodec_parameters_from_context(m_pCodecPar, m_pCodecCtx) < 0) {
+		AVStream *stream = m_pFormatCtx->streams[streamNum];
+#if LIBAVFORMAT_VERSION_INT >= AV_VERSION_INT(57, 33, 100)
+		AVCodec *pCodec = avcodec_find_decoder(stream->codecpar->codec_id);
+		if (!pCodec) {
+			WARN_LOG_REPORT(ME, "Could not find decoder for %d", (int)stream->codecpar->codec_id);
 			return false;
 		}
-#endif
-
+		AVCodecContext *m_pCodecCtx = avcodec_alloc_context3(pCodec);
+		int paramResult = avcodec_parameters_to_context(m_pCodecCtx, stream->codecpar);
+		if (paramResult < 0) {
+			WARN_LOG_REPORT(ME, "Failed to prepare context parameters: %08x", paramResult);
+			return false;
+		}
+#else
+		AVCodecContext *m_pCodecCtx = stream->codec;
 		// Find the decoder for the video stream
 		AVCodec *pCodec = avcodec_find_decoder(m_pCodecCtx->codec_id);
 		if (pCodec == nullptr) {
 			return false;
 		}
+#endif
+
+		m_pCodecCtx->flags |= AV_CODEC_FLAG_OUTPUT_CORRUPT | AV_CODEC_FLAG_LOW_DELAY;
 
 		AVDictionary *opt = nullptr;
 		// Allow ffmpeg to use any number of threads it wants.  Without this, it doesn't use threads.
@@ -640,9 +671,9 @@
 	while (!bGetFrame) {
 		bool dataEnd = av_read_frame(m_pFormatCtx, &packet) < 0;
 		// Even if we've read all frames, some may have been re-ordered frames at the end.
-		// Still need to decode those, so keep calling avcodec_decode_video2().
+		// Still need to decode those, so keep calling avcodec_decode_video2() / avcodec_receive_frame().
 		if (dataEnd || packet.stream_index == m_videoStream) {
-			// avcodec_decode_video2() gives us the re-ordered frames with a NULL packet.
+			// avcodec_decode_video2() / avcodec_send_packet() gives us the re-ordered frames with a NULL packet.
 #if LIBAVCODEC_VERSION_INT >= AV_VERSION_INT(57, 12, 100)
 			if (dataEnd)
 				av_packet_unref(&packet);
@@ -651,7 +682,22 @@
 				av_free_packet(&packet);
 #endif
 
+#if LIBAVCODEC_VERSION_INT >= AV_VERSION_INT(57, 48, 101)
+			if (packet.size != 0)
+				avcodec_send_packet(m_pCodecCtx, &packet);
+			int result = avcodec_receive_frame(m_pCodecCtx, m_pFrame);
+			if (result == 0) {
+				result = m_pFrame->pkt_size;
+				frameFinished = 1;
+			} else if (result == AVERROR(EAGAIN)) {
+				result = 0;
+				frameFinished = 0;
+			} else {
+				frameFinished = 0;
+			}
+#else
 			int result = avcodec_decode_video2(m_pCodecCtx, m_pFrame, &frameFinished, &packet);
+#endif
 			if (frameFinished) {
 				if (!m_pFrameRGB) {
 					setVideoDim();
@@ -666,10 +712,28 @@
 						m_pCodecCtx->height, m_pFrameRGB->data, m_pFrameRGB->linesize);
 				}
 
-				if (av_frame_get_best_effort_timestamp(m_pFrame) != AV_NOPTS_VALUE)
-					m_videopts = av_frame_get_best_effort_timestamp(m_pFrame) + av_frame_get_pkt_duration(m_pFrame) - m_firstTimeStamp;
-				else
-					m_videopts += av_frame_get_pkt_duration(m_pFrame);
+#if LIBAVUTIL_VERSION_INT >= AV_VERSION_INT(55, 58, 100)
+				int64_t bestPts = m_pFrame->best_effort_timestamp;
+				int64_t ptsDuration = m_pFrame->pkt_duration;
+#else
+				int64_t bestPts = av_frame_get_best_effort_timestamp(m_pFrame);
+				int64_t ptsDuration = av_frame_get_pkt_duration(m_pFrame);
+#endif
+				if (ptsDuration == 0) {
+					if (m_lastPts == bestPts - m_firstTimeStamp || bestPts == AV_NOPTS_VALUE) {
+						// TODO: Assuming 29.97 if missing.
+						m_videopts += 3003;
+					} else {
+						m_videopts = bestPts - m_firstTimeStamp;
+						m_lastPts = m_videopts;
+					}
+				} else if (bestPts != AV_NOPTS_VALUE) {
+					m_videopts = bestPts + ptsDuration - m_firstTimeStamp;
+					m_lastPts = m_videopts;
+				} else {
+					m_videopts += ptsDuration;
+					m_lastPts = m_videopts;
+				}
 				bGetFrame = true;
 			}
 			if (result <= 0 && dataEnd) {
--- a/Core/HW/MediaEngine.h	2021-03-02 21:50:51.000000000 +0100
+++ b/Core/HW/MediaEngine.h	2021-04-13 11:55:44.880676649 +0200
@@ -124,7 +124,8 @@
 	int m_desHeight;
 	int m_decodingsize;
 	int m_bufSize;
-	s64 m_videopts;
+	s64 m_videopts = 0;
+	s64 m_lastPts = -1;
 	BufferQueue *m_pdata;
 
 	MpegDemux *m_demux;
