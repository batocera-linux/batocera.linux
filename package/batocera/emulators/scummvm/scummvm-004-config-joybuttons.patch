Allows to configure mapping of joystick buttons

Signed-off-by: Laurent Merckx <laurent-merckx@skynet.be>

--- a/backends/events/sdl/sdl-events.h	2017-11-04 16:38:19.000000000 +0100
+++ b/backends/events/sdl/sdl-events.h	2017-12-16 21:34:40.526623509 +0100
@@ -87,7 +87,12 @@ protected:
 	 * The associated graphics manager.
 	 */
 	SdlGraphicsManager *_graphicsManager;
-
+	
+	/**
+	 * Initializes the default mapping of joystick buttons
+	 */
+	virtual void initDefaultJoystickMapping();
+	
 	/**
 	 * Pre process an event before it is dispatched.
 	 */
--- a/backends/events/sdl/sdl-events.cpp	2017-12-16 21:53:10.942351875 +0100
+++ b/backends/events/sdl/sdl-events.cpp	2017-12-16 21:49:42.944758607 +0100
@@ -101,6 +101,7 @@ SdlEventSource::SdlEventSource()
 			      SDL_JoystickName(joystick_num)
 #endif
 			     );
+			initDefaultJoystickMapping();
 		} else {
 			warning("Invalid joystick: %d", joystick_num);
 		}
@@ -112,6 +113,17 @@ SdlEventSource::~SdlEventSource() {
 		SDL_JoystickClose(_joystick);
 }
 
+void SdlEventSource::initDefaultJoystickMapping() {
+	ConfMan.registerDefault("joystick_button_lmouse", JOY_BUT_LMOUSE);
+	ConfMan.registerDefault("joystick_button_rmouse", JOY_BUT_RMOUSE);
+	ConfMan.registerDefault("joystick_button_escape", JOY_BUT_ESCAPE);
+	ConfMan.registerDefault("joystick_button_skip", JOY_BUT_PERIOD);
+	ConfMan.registerDefault("joystick_button_pause", JOY_BUT_SPACE);
+	ConfMan.registerDefault("joystick_button_menu", JOY_BUT_F5);
+	ConfMan.registerDefault("joystick_button_vkeyboard", JOY_BUT_VKEYBOARD);
+}
+
+
 int SdlEventSource::mapKey(SDLKey sdlKey, SDLMod mod, Uint16 unicode) {
 	Common::KeyCode key = SDLToOSystemKeycode(sdlKey);
 
@@ -806,68 +818,80 @@ bool SdlEventSource::handleMouseButtonUp
 }
 
 bool SdlEventSource::handleJoyButtonDown(SDL_Event &ev, Common::Event &event) {
-	if (ev.jbutton.button == JOY_BUT_LMOUSE) {
+	int _joystick_but_lmouse = ConfMan.getInt("joystick_button_lmouse");
+	int _joystick_but_rmouse = ConfMan.getInt("joystick_button_rmouse");
+	int _joystick_but_escape = ConfMan.getInt("joystick_button_escape");
+	int _joystick_but_period = ConfMan.getInt("joystick_button_skip");
+	int _joystick_but_space = ConfMan.getInt("joystick_button_pause");
+	int _joystick_but_f5 = ConfMan.getInt("joystick_button_menu");
+	int _joystick_but_vkeyboard = ConfMan.getInt("joystick_button_vkeyboard");
+
+	if (ev.jbutton.button == _joystick_but_lmouse) {
 		event.type = Common::EVENT_LBUTTONDOWN;
 		return processMouseEvent(event, _km.x / MULTIPLIER, _km.y / MULTIPLIER);
-	} else if (ev.jbutton.button == JOY_BUT_RMOUSE) {
+	} else if (ev.jbutton.button == _joystick_but_rmouse) {
 		event.type = Common::EVENT_RBUTTONDOWN;
 		return processMouseEvent(event, _km.x / MULTIPLIER, _km.y / MULTIPLIER);
 	} else {
 		event.type = Common::EVENT_KEYDOWN;
-		switch (ev.jbutton.button) {
-		case JOY_BUT_ESCAPE:
+		if (ev.jbutton.button == _joystick_but_escape) {
 			event.kbd.keycode = Common::KEYCODE_ESCAPE;
 			event.kbd.ascii = mapKey(SDLK_ESCAPE, (SDLMod)ev.key.keysym.mod, 0);
-			break;
-		case JOY_BUT_PERIOD:
+		}
+		else if (ev.jbutton.button == _joystick_but_period) {
 			event.kbd.keycode = Common::KEYCODE_PERIOD;
 			event.kbd.ascii = mapKey(SDLK_PERIOD, (SDLMod)ev.key.keysym.mod, 0);
-			break;
-		case JOY_BUT_SPACE:
+		}
+		else if (ev.jbutton.button == _joystick_but_space) {
 			event.kbd.keycode = Common::KEYCODE_SPACE;
 			event.kbd.ascii = mapKey(SDLK_SPACE, (SDLMod)ev.key.keysym.mod, 0);
-			break;
-		case JOY_BUT_F5:
+		}
+		else if (ev.jbutton.button == _joystick_but_f5) {
 			event.kbd.keycode = Common::KEYCODE_F5;
 			event.kbd.ascii = mapKey(SDLK_F5, (SDLMod)ev.key.keysym.mod, 0);
-			break;
-		case JOY_BUT_VKEYBOARD: // Toggles virtual keyboard
+		}
+		else if (ev.jbutton.button == _joystick_but_vkeyboard) { // Toggles virtual keyboard
 			event.type = Common::EVENT_VIRTUAL_KEYBOARD;
-			break;
 		}
 		return true;
 	}
 }
 
 bool SdlEventSource::handleJoyButtonUp(SDL_Event &ev, Common::Event &event) {
-	if (ev.jbutton.button == JOY_BUT_LMOUSE) {
+	int _joystick_but_lmouse = ConfMan.getInt("joystick_button_lmouse");
+	int _joystick_but_rmouse = ConfMan.getInt("joystick_button_rmouse");
+	int _joystick_but_escape = ConfMan.getInt("joystick_button_escape");
+	int _joystick_but_period = ConfMan.getInt("joystick_button_skip");
+	int _joystick_but_space = ConfMan.getInt("joystick_button_pause");
+	int _joystick_but_f5 = ConfMan.getInt("joystick_button_menu");
+	int _joystick_but_vkeyboard = ConfMan.getInt("joystick_button_vkeyboard");
+	
+	if (ev.jbutton.button == _joystick_but_lmouse) {
 		event.type = Common::EVENT_LBUTTONUP;
 		return processMouseEvent(event, _km.x / MULTIPLIER, _km.y / MULTIPLIER);
-	} else if (ev.jbutton.button == JOY_BUT_RMOUSE) {
+	} else if (ev.jbutton.button == _joystick_but_rmouse) {
 		event.type = Common::EVENT_RBUTTONUP;
 		return processMouseEvent(event, _km.x / MULTIPLIER, _km.y / MULTIPLIER);
 	} else {
 		event.type = Common::EVENT_KEYUP;
-		switch (ev.jbutton.button) {
-		case JOY_BUT_ESCAPE:
+		if (ev.jbutton.button == _joystick_but_escape) {
 			event.kbd.keycode = Common::KEYCODE_ESCAPE;
 			event.kbd.ascii = mapKey(SDLK_ESCAPE, (SDLMod)ev.key.keysym.mod, 0);
-			break;
-		case JOY_BUT_PERIOD:
+		}
+		else if (ev.jbutton.button == _joystick_but_period) {
 			event.kbd.keycode = Common::KEYCODE_PERIOD;
 			event.kbd.ascii = mapKey(SDLK_PERIOD, (SDLMod)ev.key.keysym.mod, 0);
-			break;
-		case JOY_BUT_SPACE:
+		}
+		else if (ev.jbutton.button == _joystick_but_space) {
 			event.kbd.keycode = Common::KEYCODE_SPACE;
 			event.kbd.ascii = mapKey(SDLK_SPACE, (SDLMod)ev.key.keysym.mod, 0);
-			break;
-		case JOY_BUT_F5:
+		}
+		else if (ev.jbutton.button == _joystick_but_f5) {
 			event.kbd.keycode = Common::KEYCODE_F5;
 			event.kbd.ascii = mapKey(SDLK_F5, (SDLMod)ev.key.keysym.mod, 0);
-			break;
-		case JOY_BUT_VKEYBOARD: // Toggles virtual keyboard
+		}
+		else if (ev.jbutton.button == _joystick_but_vkeyboard) { // Toggles virtual keyboard
 			// Handled in key down
-			break;
 		}
 		return true;
 	}
