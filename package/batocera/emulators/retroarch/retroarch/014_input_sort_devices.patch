diff --git a/input/drivers/udev_input.c b/input/drivers/udev_input.c
index 489e00f..334a844 100644
--- a/input/drivers/udev_input.c
+++ b/input/drivers/udev_input.c
@@ -1340,6 +1340,65 @@ static void udev_input_free(void *data)
    free(udev);
 }
 
+int event_isNumber(const char *s) {
+  int n;
+
+  if(strlen(s) == 0) {
+    return 0;
+  }
+
+  for(n=0; n<strlen(s); n++) {
+    if(!(s[n] == '0' || s[n] == '1' || s[n] == '2' || s[n] == '3' || s[n] == '4' ||
+         s[n] == '5' || s[n] == '6' || s[n] == '7' || s[n] == '8' || s[n] == '9'))
+      return 0;
+  }
+  return 1;
+}
+
+// compare /dev/input/eventX and /dev/input/eventY where X and Y are numbers
+int event_strcmp_events(const char* x, const char* y) {
+
+  // find a common string
+  int n, common, is_number;
+  int a, b;
+
+  n=0;
+  while(x[n] == y[n] && x[n] != '\0' && y[n] != '\0') {
+    n++;
+  }
+  common = n;
+
+  // check if remaining string is a number
+  is_number = 1;
+  if(event_isNumber(x+common) == 0) is_number = 0;
+  if(event_isNumber(y+common) == 0) is_number = 0;
+
+  if(is_number == 1) {
+    a = atoi(x+common);
+    b = atoi(y+common);
+
+    if(a == b) return  0;
+    if(a < b)  return -1;
+    return 1;
+  } else {
+    return strcmp(x, y);
+  }
+}
+
+struct event_udev_entry
+{
+   const char *devnode;
+   struct udev_list_entry *item;
+};
+
+/* Used for sorting devnodes to appear in the correct order */
+static int sort_devnodes(const void *a, const void *b)
+{
+   const struct event_udev_entry *aa = (const struct event_udev_entry*)a;
+   const struct event_udev_entry *bb = (const struct event_udev_entry*)b;
+   return event_strcmp_events(aa->devnode, bb->devnode);
+}
+
 static bool open_devices(udev_input_t *udev,
       enum udev_input_dev_type type, device_handle_cb cb)
 {
@@ -1348,6 +1407,10 @@ static bool open_devices(udev_input_t *udev,
    struct udev_list_entry     *item = NULL;
    struct udev_enumerate *enumerate = udev_enumerate_new(udev->udev);
 
+   unsigned i;
+   unsigned sorted_count = 0;
+   struct event_udev_entry sorted[MAX_USERS];
+
    if (!enumerate)
       return false;
 
@@ -1357,8 +1420,28 @@ static bool open_devices(udev_input_t *udev,
    devs = udev_enumerate_get_list_entry(enumerate);
 
    for (item = devs; item; item = udev_list_entry_get_next(item))
+     {
+       const char         *name = udev_list_entry_get_name(item);
+       struct udev_device  *dev = udev_device_new_from_syspath(udev->udev, name);
+       const char      *devnode = udev_device_get_devnode(dev);
+
+       if (devnode != NULL) {
+	 sorted[sorted_count].devnode = devnode;
+	 sorted[sorted_count].item = item;
+	 sorted_count++;
+       } else {
+	 udev_device_unref(dev);
+       }
+     }
+
+   /* Sort the udev entries by devnode name so that they are
+    * created in the proper order */
+   qsort(sorted, sorted_count,
+         sizeof(struct event_udev_entry), sort_devnodes);
+
+   for (i = 0; i < sorted_count; i++)
    {
-      const char *name        = udev_list_entry_get_name(item);
+      const char *name = udev_list_entry_get_name(sorted[i].item);
 
       /* Get the filename of the /sys entry for the device
        * and create a udev_device object (dev) representing it. */
