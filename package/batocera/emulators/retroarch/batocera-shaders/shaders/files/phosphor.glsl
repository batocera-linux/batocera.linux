// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)
varying     vec2 VARtex_index;
varying     vec2 VARcoord_prev_prev;
varying     vec2 VARcoord_prev;
varying     vec2 VARcoord;


struct coords {
    vec2 VARcoord;
    vec2 VARcoord_prev;
    vec2 VARcoord_prev_prev;
    vec2 VARtex_index;
};

struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};

vec4 _oPosition1;
coords _co1;
uniform mat4 MVPMatrix;
input_dummy _IN1;
vec4 _r0004;
attribute vec4 VertexCoord;
attribute vec4 TexCoord;

 

         mat4 transpose_(mat4 matrix)
         {
            mat4 ret;
            for (int i = 0; i != 4; i++)
               for (int j = 0; j != 4; j++)
                  ret[i][j] = matrix[j][i];

            return ret;
         }
         
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{
    mat4 MVPMatrix_ = transpose_(MVPMatrix);

    vec2 _one_x;
    coords _TMP2;

    _r0004.x = dot(MVPMatrix_[0], VertexCoord);
    _r0004.y = dot(MVPMatrix_[1], VertexCoord);
    _r0004.z = dot(MVPMatrix_[2], VertexCoord);
    _r0004.w = dot(MVPMatrix_[3], VertexCoord);
    _oPosition1 = _r0004;
    _one_x = vec2(1.00000000E+000/(3.00000000E+000*TextureSize.x), 0.00000000E+000);
    _TMP2.VARcoord_prev = TexCoord.xy - _one_x;
    _TMP2.VARcoord_prev_prev = TexCoord.xy - 2.00000000E+000*_one_x;
    _TMP2.VARtex_index = TexCoord.xy*TextureSize;
    VARcoord = TexCoord.xy;
    VARcoord_prev = _TMP2.VARcoord_prev;
    VARcoord_prev_prev = _TMP2.VARcoord_prev_prev;
    VARtex_index = _TMP2.VARtex_index;
    gl_Position = _r0004;
} 
#elif defined(FRAGMENT)
#ifdef GL_ES
precision mediump float;
#endif
varying     vec2 VARtex_index;
varying     vec2 VARcoord_prev_prev;
varying     vec2 VARcoord_prev;
varying     vec2 VARcoord;


struct coords {
    vec2 VARcoord;
    vec2 VARcoord_prev;
    vec2 VARcoord_prev_prev;
    vec2 VARtex_index;
};

struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};

vec4 _ret_0;
vec3 _TMP3;
float _TMP10;
float _TMP9;
float _TMP8;
float _TMP7;
float _TMP6;
float _TMP5;
float _TMP4;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
coords _co1;
uniform sampler2D Texture;
float _c0015;
float _TMP22;
float _x0023;
vec3 _TMP32;
float _a0035;
float _c0035;
float _a0037;
vec3 _TMP42;
float _pixel0043;
float _a0045;
float _c0045;
float _a0047;
vec3 _TMP52;
float _pixel0053;
float _a0055;
float _c0055;
float _a0057;

 
uniform int FrameDirection;
uniform int FrameCount;
#ifdef GL_ES
uniform mediump vec2 OutputSize;
uniform mediump vec2 TextureSize;
uniform mediump vec2 InputSize;
#else
uniform vec2 OutputSize;
uniform vec2 TextureSize;
uniform vec2 InputSize;
#endif
void main()
{

    float _pixel_x;
    vec3 _result;
    vec3 _TMP13;

    _TMP4 = abs(VARtex_index.y);
    _TMP5 = fract(_TMP4);
    _TMP6 = abs(1.00000000E+000);
    _c0015 = _TMP5*_TMP6;
    if (VARtex_index.y < 0.00000000E+000) { 
        _TMP7 = -_c0015;
    } else {
        _TMP7 = _c0015;
    } 
    _x0023 = -2.00000003E-001*_TMP7;
    _TMP22 = pow(2.71828198E+000, _x0023);
    _TMP0 = texture2D(Texture, VARcoord);
    _TMP1 = texture2D(Texture, VARcoord_prev);
    _TMP2 = texture2D(Texture, VARcoord_prev_prev);
    _pixel_x = 3.00000000E+000*VARtex_index.x;
    _a0035 = _pixel_x + 3.00000000E+000;
    _a0037 = _a0035/3.00000000E+000;
    _TMP4 = abs(_a0037);
    _TMP5 = fract(_TMP4);
    _TMP6 = abs(3.00000000E+000);
    _c0035 = _TMP5*_TMP6;
    if (_a0035 < 0.00000000E+000) { 
        _TMP7 = -_c0035;
    } else {
        _TMP7 = _c0035;
    } 
    if (_TMP7 >= 2.00000000E+000) { 
        _TMP32 = vec3(_TMP7 - 2.00000000E+000, 0.00000000E+000, 3.00000000E+000 - _TMP7);
    } else {
        if (_TMP7 >= 1.00000000E+000) { 
            _TMP32 = vec3(0.00000000E+000, 2.00000000E+000 - _TMP7, _TMP7 - 1.00000000E+000);
        } else {
            _TMP32 = vec3(1.00000000E+000 - _TMP7, _TMP7, 0.00000000E+000);
        } 
    } 
    _pixel0043 = _pixel_x - 1.00000000E+000;
    _a0045 = _pixel0043 + 3.00000000E+000;
    _a0047 = _a0045/3.00000000E+000;
    _TMP4 = abs(_a0047);
    _TMP5 = fract(_TMP4);
    _TMP6 = abs(3.00000000E+000);
    _c0045 = _TMP5*_TMP6;
    if (_a0045 < 0.00000000E+000) { 
        _TMP7 = -_c0045;
    } else {
        _TMP7 = _c0045;
    } 
    if (_TMP7 >= 2.00000000E+000) { 
        _TMP42 = vec3(_TMP7 - 2.00000000E+000, 0.00000000E+000, 3.00000000E+000 - _TMP7);
    } else {
        if (_TMP7 >= 1.00000000E+000) { 
            _TMP42 = vec3(0.00000000E+000, 2.00000000E+000 - _TMP7, _TMP7 - 1.00000000E+000);
        } else {
            _TMP42 = vec3(1.00000000E+000 - _TMP7, _TMP7, 0.00000000E+000);
        } 
    } 
    _pixel0053 = _pixel_x - 2.00000000E+000;
    _a0055 = _pixel0053 + 3.00000000E+000;
    _a0057 = _a0055/3.00000000E+000;
    _TMP4 = abs(_a0057);
    _TMP5 = fract(_TMP4);
    _TMP6 = abs(3.00000000E+000);
    _c0055 = _TMP5*_TMP6;
    if (_a0055 < 0.00000000E+000) { 
        _TMP7 = -_c0055;
    } else {
        _TMP7 = _c0055;
    } 
    if (_TMP7 >= 2.00000000E+000) { 
        _TMP52 = vec3(_TMP7 - 2.00000000E+000, 0.00000000E+000, 3.00000000E+000 - _TMP7);
    } else {
        if (_TMP7 >= 1.00000000E+000) { 
            _TMP52 = vec3(0.00000000E+000, 2.00000000E+000 - _TMP7, _TMP7 - 1.00000000E+000);
        } else {
            _TMP52 = vec3(1.00000000E+000 - _TMP7, _TMP7, 0.00000000E+000);
        } 
    } 
    _result = (8.00000012E-001*_TMP0.xyz)*_TMP32 + (6.00000024E-001*_TMP1.xyz)*_TMP42 + (3.00000012E-001*_TMP2.xyz)*_TMP52;
    _TMP8 = pow(_result.x, 1.39999998E+000);
    _TMP9 = pow(_result.y, 1.39999998E+000);
    _TMP10 = pow(_result.z, 1.39999998E+000);
    _TMP3 = vec3(_TMP8, _TMP9, _TMP10);
    _result = 2.29999995E+000*_TMP3;
    _TMP13 = _TMP22*_result;
    _ret_0 = vec4(_TMP13.x, _TMP13.y, _TMP13.z, 1.00000000E+000);
    gl_FragColor = _ret_0;
    return;
} 
#endif
