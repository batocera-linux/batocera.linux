// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord11;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord11;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0007;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    vec2 _texCoord;
    _r0007 = VertexCoord.x*MVPMatrix[0];
    _r0007 = _r0007 + VertexCoord.y*MVPMatrix[1];
    _r0007 = _r0007 + VertexCoord.z*MVPMatrix[2];
    _r0007 = _r0007 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _texCoord = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    _OUT._t1 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -2.00000000E+00*_ps.y);
    _OUT._t2 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -_ps.y);
    _OUT._t3 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 0.00000000E+00);
    _OUT._t4 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, _ps.y);
    _OUT._t5 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 2.00000000E+00*_ps.y);
    _OUT._t6 = _texCoord.xyyy + vec4(-2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _OUT._t7 = _texCoord.xyyy + vec4(2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _ret_0._position1 = _r0007;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord11 = _texCoord;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    _ret_0._t5 = _OUT._t5;
    _ret_0._t6 = _OUT._t6;
    _ret_0._t7 = _OUT._t7;
    gl_Position = _r0007;
    COL0 = COLOR;
    TEX0.xy = _texCoord;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    TEX5 = _OUT._t5;
    TEX6 = _OUT._t6;
    TEX7 = _OUT._t7;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord11;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
    TEX5 = _ret_0._t5;
    TEX6 = _ret_0._t6;
    TEX7 = _ret_0._t7;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _color;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _color;
    vec2 _texCoord1;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
vec4 _ret_0;
vec3 _TMP49;
vec3 _TMP48;
vec3 _TMP47;
vec3 _TMP46;
float _TMP45;
float _TMP44;
vec4 _TMP43;
vec4 _TMP42;
vec4 _TMP41;
vec4 _TMP34;
vec4 _TMP33;
vec4 _TMP57;
bvec4 _TMP32;
bvec4 _TMP31;
bvec4 _TMP30;
bvec4 _TMP29;
bvec4 _TMP28;
bvec4 _TMP27;
bvec4 _TMP26;
bvec4 _TMP25;
bvec4 _TMP24;
bvec4 _TMP23;
bvec4 _TMP22;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0071;
vec4 _r0115;
vec4 _r0125;
vec4 _r0135;
vec4 _r0145;
vec4 _r0155;
vec4 _r0165;
vec4 _TMP176;
vec4 _a0179;
vec4 _TMP182;
vec4 _a0185;
vec4 _TMP188;
vec4 _a0191;
vec4 _TMP194;
vec4 _a0197;
vec4 _TMP200;
vec4 _a0203;
vec4 _TMP206;
vec4 _a0209;
vec4 _TMP212;
vec4 _a0215;
vec4 _TMP218;
vec4 _a0221;
vec4 _TMP224;
vec4 _a0227;
vec4 _TMP230;
vec4 _a0233;
vec4 _TMP236;
vec4 _a0239;
vec4 _x0241;
vec4 _TMP242;
vec4 _x0249;
vec4 _TMP250;
vec4 _x0257;
vec4 _TMP258;
vec4 _x0265;
vec4 _TMP266;
vec4 _TMP274;
vec4 _a0277;
vec4 _TMP278;
vec4 _a0281;
vec4 _TMP282;
vec4 _a0285;
vec4 _TMP286;
vec4 _a0289;
vec4 _TMP290;
vec4 _a0293;
vec4 _TMP296;
vec4 _a0299;
vec4 _TMP300;
vec4 _a0303;
vec4 _TMP304;
vec4 _a0307;
vec4 _TMP308;
vec4 _a0311;
vec4 _TMP312;
vec4 _a0315;
vec4 _TMP316;
vec4 _a0319;
vec4 _TMP320;
vec4 _a0323;
vec4 _TMP324;
vec4 _a0327;
vec4 _TMP328;
vec4 _a0331;
vec4 _TMP332;
vec4 _a0335;
vec4 _TMP336;
vec4 _a0339;
float _t0355;
float _t0357;
float _t0359;
float _t0361;
vec3 _r0363;
float _t0365;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    bvec4 _edri;
    bvec4 _edr;
    bvec4 _edr_left;
    bvec4 _edr_up;
    bvec4 _px;
    bvec4 _interp_restriction_lv0;
    bvec4 _interp_restriction_lv1;
    bvec4 _interp_restriction_lv2_left;
    bvec4 _interp_restriction_lv2_up;
    vec4 _fx;
    vec4 _fx_left;
    vec4 _fx_up;
    vec2 _fp;
    vec4 _fx45i;
    vec4 _fx45;
    vec4 _fx30;
    vec4 _fx60;
    vec4 _maximos;
    float _top;
    vec4 _color_picker;
    vec3 _res;
    _x0071 = TEX0.xy*TextureSize;
    _fp = fract(_x0071);
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xw);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.yw);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX2.xw);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX2.yw);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX3.yw);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _TMP9 = COMPAT_TEXTURE(Texture, TEX4.xw);
    _TMP10 = COMPAT_TEXTURE(Texture, TEX4.yw);
    _TMP11 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _TMP12 = COMPAT_TEXTURE(Texture, TEX5.xw);
    _TMP13 = COMPAT_TEXTURE(Texture, TEX5.yw);
    _TMP14 = COMPAT_TEXTURE(Texture, TEX5.zw);
    _TMP15 = COMPAT_TEXTURE(Texture, TEX6.xy);
    _TMP16 = COMPAT_TEXTURE(Texture, TEX6.xz);
    _TMP17 = COMPAT_TEXTURE(Texture, TEX6.xw);
    _TMP18 = COMPAT_TEXTURE(Texture, TEX7.xy);
    _TMP19 = COMPAT_TEXTURE(Texture, TEX7.xz);
    _TMP20 = COMPAT_TEXTURE(Texture, TEX7.xw);
    _r0115.x = dot(_TMP4.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0115.y = dot(_TMP6.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0115.z = dot(_TMP10.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0115.w = dot(_TMP8.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0125.x = dot(_TMP5.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0125.y = dot(_TMP3.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0125.z = dot(_TMP9.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0125.w = dot(_TMP11.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0135.x = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0135.y = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0135.z = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0135.w = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0145.x = dot(_TMP20.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0145.y = dot(_TMP2.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0145.z = dot(_TMP15.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0145.w = dot(_TMP12.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0155.x = dot(_TMP14.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0155.y = dot(_TMP18.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0155.z = dot(_TMP0.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0155.w = dot(_TMP17.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0165.x = dot(_TMP13.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0165.y = dot(_TMP19.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0165.z = dot(_TMP1.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0165.w = dot(_TMP16.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _fx = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x;
    _fx_left = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x;
    _fx_up = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x;
    _interp_restriction_lv0 = bvec4(_r0135.x != _r0115.w && _r0135.x != _r0115.z, _r0135.y != _r0115.x && _r0135.y != _r0115.w, _r0135.z != _r0115.y && _r0135.z != _r0115.x, _r0135.w != _r0115.z && _r0135.w != _r0115.y);
    _a0179 = _r0115.wxyz - _r0115;
    _TMP176 = abs(_a0179);
    _TMP22 = bvec4(_TMP176.x < 1.50000000E+01, _TMP176.y < 1.50000000E+01, _TMP176.z < 1.50000000E+01, _TMP176.w < 1.50000000E+01);
    _a0185 = _r0115.wxyz - _r0125;
    _TMP182 = abs(_a0185);
    _TMP23 = bvec4(_TMP182.x < 1.50000000E+01, _TMP182.y < 1.50000000E+01, _TMP182.z < 1.50000000E+01, _TMP182.w < 1.50000000E+01);
    _a0191 = _r0115.zwxy - _r0115.yzwx;
    _TMP188 = abs(_a0191);
    _TMP24 = bvec4(_TMP188.x < 1.50000000E+01, _TMP188.y < 1.50000000E+01, _TMP188.z < 1.50000000E+01, _TMP188.w < 1.50000000E+01);
    _a0197 = _r0115.zwxy - _r0125.zwxy;
    _TMP194 = abs(_a0197);
    _TMP25 = bvec4(_TMP194.x < 1.50000000E+01, _TMP194.y < 1.50000000E+01, _TMP194.z < 1.50000000E+01, _TMP194.w < 1.50000000E+01);
    _a0203 = _r0135 - _r0125.wxyz;
    _TMP200 = abs(_a0203);
    _TMP26 = bvec4(_TMP200.x < 1.50000000E+01, _TMP200.y < 1.50000000E+01, _TMP200.z < 1.50000000E+01, _TMP200.w < 1.50000000E+01);
    _a0209 = _r0115.wxyz - _r0165.yzwx;
    _TMP206 = abs(_a0209);
    _TMP27 = bvec4(_TMP206.x < 1.50000000E+01, _TMP206.y < 1.50000000E+01, _TMP206.z < 1.50000000E+01, _TMP206.w < 1.50000000E+01);
    _a0215 = _r0115.wxyz - _r0145;
    _TMP212 = abs(_a0215);
    _TMP28 = bvec4(_TMP212.x < 1.50000000E+01, _TMP212.y < 1.50000000E+01, _TMP212.z < 1.50000000E+01, _TMP212.w < 1.50000000E+01);
    _a0221 = _r0115.zwxy - _r0165;
    _TMP218 = abs(_a0221);
    _TMP29 = bvec4(_TMP218.x < 1.50000000E+01, _TMP218.y < 1.50000000E+01, _TMP218.z < 1.50000000E+01, _TMP218.w < 1.50000000E+01);
    _a0227 = _r0115.zwxy - _r0155;
    _TMP224 = abs(_a0227);
    _TMP30 = bvec4(_TMP224.x < 1.50000000E+01, _TMP224.y < 1.50000000E+01, _TMP224.z < 1.50000000E+01, _TMP224.w < 1.50000000E+01);
    _a0233 = _r0135 - _r0125.zwxy;
    _TMP230 = abs(_a0233);
    _TMP31 = bvec4(_TMP230.x < 1.50000000E+01, _TMP230.y < 1.50000000E+01, _TMP230.z < 1.50000000E+01, _TMP230.w < 1.50000000E+01);
    _a0239 = _r0135 - _r0125;
    _TMP236 = abs(_a0239);
    _TMP32 = bvec4(_TMP236.x < 1.50000000E+01, _TMP236.y < 1.50000000E+01, _TMP236.z < 1.50000000E+01, _TMP236.w < 1.50000000E+01);
    _interp_restriction_lv1 = bvec4(_interp_restriction_lv0.x && (!_TMP22.x && !_TMP23.x || !_TMP24.x && !_TMP25.x || _TMP26.x && (!_TMP27.x && !_TMP28.x || !_TMP29.x && !_TMP30.x) || _TMP31.x || _TMP32.x), _interp_restriction_lv0.y && (!_TMP22.y && !_TMP23.y || !_TMP24.y && !_TMP25.y || _TMP26.y && (!_TMP27.y && !_TMP28.y || !_TMP29.y && !_TMP30.y) || _TMP31.y || _TMP32.y), _interp_restriction_lv0.z && (!_TMP22.z && !_TMP23.z || !_TMP24.z && !_TMP25.z || _TMP26.z && (!_TMP27.z && !_TMP28.z || !_TMP29.z && !_TMP30.z) || _TMP31.z || _TMP32.z), _interp_restriction_lv0.w && (!_TMP22.w && !_TMP23.w || !_TMP24.w && !_TMP25.w || _TMP26.w && (!_TMP27.w && !_TMP28.w || !_TMP29.w && !_TMP30.w) || _TMP31.w || _TMP32.w));
    _interp_restriction_lv2_left = bvec4(_r0135.x != _r0125.z && _r0115.y != _r0125.z, _r0135.y != _r0125.w && _r0115.z != _r0125.w, _r0135.z != _r0125.x && _r0115.w != _r0125.x, _r0135.w != _r0125.y && _r0115.x != _r0125.y);
    _interp_restriction_lv2_up = bvec4(_r0135.x != _r0125.x && _r0115.x != _r0125.x, _r0135.y != _r0125.y && _r0115.y != _r0125.y, _r0135.z != _r0125.z && _r0115.z != _r0125.z, _r0135.w != _r0125.w && _r0115.w != _r0125.w);
    _x0241 = (((_fx + vec4( 3.33333343E-01, 3.33333343E-01, 3.33333343E-01, 3.33333343E-01)) - vec4( 1.50000000E+00, 5.00000000E-01, -5.00000000E-01, 5.00000000E-01)) - vec4( 2.50000000E-01, 2.50000000E-01, 2.50000000E-01, 2.50000000E-01))/vec4( 6.66666687E-01, 6.66666687E-01, 6.66666687E-01, 6.66666687E-01);
    _TMP57 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0241);
    _TMP242 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP57);
    _x0249 = ((_fx + vec4( 3.33333343E-01, 3.33333343E-01, 3.33333343E-01, 3.33333343E-01)) - vec4( 1.50000000E+00, 5.00000000E-01, -5.00000000E-01, 5.00000000E-01))/vec4( 6.66666687E-01, 6.66666687E-01, 6.66666687E-01, 6.66666687E-01);
    _TMP57 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0249);
    _TMP250 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP57);
    _x0257 = ((_fx_left + vec4( 1.66666672E-01, 3.33333343E-01, 1.66666672E-01, 3.33333343E-01)) - vec4( 1.00000000E+00, 1.00000000E+00, -5.00000000E-01, 0.00000000E+00))/vec4( 3.33333343E-01, 6.66666687E-01, 3.33333343E-01, 6.66666687E-01);
    _TMP57 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0257);
    _TMP258 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP57);
    _x0265 = ((_fx_up + vec4( 3.33333343E-01, 1.66666672E-01, 3.33333343E-01, 1.66666672E-01)) - vec4( 2.00000000E+00, 0.00000000E+00, -1.00000000E+00, 5.00000000E-01))/vec4( 6.66666687E-01, 3.33333343E-01, 6.66666687E-01, 3.33333343E-01);
    _TMP57 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0265);
    _TMP266 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP57);
    _a0277 = _r0135 - _r0125;
    _TMP274 = abs(_a0277);
    _a0281 = _r0135 - _r0125.zwxy;
    _TMP278 = abs(_a0281);
    _a0285 = _r0125.wxyz - _r0165;
    _TMP282 = abs(_a0285);
    _a0289 = _r0125.wxyz - _r0165.yzwx;
    _TMP286 = abs(_a0289);
    _a0293 = _r0115.zwxy - _r0115.wxyz;
    _TMP290 = abs(_a0293);
    _TMP33 = _TMP274 + _TMP278 + _TMP282 + _TMP286 + 4.00000000E+00*_TMP290;
    _a0299 = _r0115.zwxy - _r0115.yzwx;
    _TMP296 = abs(_a0299);
    _a0303 = _r0115.zwxy - _r0155;
    _TMP300 = abs(_a0303);
    _a0307 = _r0115.wxyz - _r0145;
    _TMP304 = abs(_a0307);
    _a0311 = _r0115.wxyz - _r0115;
    _TMP308 = abs(_a0311);
    _a0315 = _r0135 - _r0125.wxyz;
    _TMP312 = abs(_a0315);
    _TMP34 = _TMP296 + _TMP300 + _TMP304 + _TMP308 + 4.00000000E+00*_TMP312;
    _edri = bvec4(_TMP33.x < _TMP34.x, _TMP33.y < _TMP34.y, _TMP33.z < _TMP34.z, _TMP33.w < _TMP34.w);
    _edr = bvec4(_edri.x && _interp_restriction_lv1.x, _edri.y && _interp_restriction_lv1.y, _edri.z && _interp_restriction_lv1.z, _edri.w && _interp_restriction_lv1.w);
    _a0319 = _r0115.wxyz - _r0125.zwxy;
    _TMP316 = abs(_a0319);
    _a0323 = _r0115.zwxy - _r0125;
    _TMP320 = abs(_a0323);
    _edr_left = bvec4((2.00000000E+00*_TMP316).x <= _TMP320.x && _interp_restriction_lv2_left.x && _edr.x, (2.00000000E+00*_TMP316).y <= _TMP320.y && _interp_restriction_lv2_left.y && _edr.y, (2.00000000E+00*_TMP316).z <= _TMP320.z && _interp_restriction_lv2_left.z && _edr.z, (2.00000000E+00*_TMP316).w <= _TMP320.w && _interp_restriction_lv2_left.w && _edr.w);
    _a0327 = _r0115.wxyz - _r0125.zwxy;
    _TMP324 = abs(_a0327);
    _a0331 = _r0115.zwxy - _r0125;
    _TMP328 = abs(_a0331);
    _edr_up = bvec4(_TMP324.x >= (2.00000000E+00*_TMP328).x && _interp_restriction_lv2_up.x && _edr.x, _TMP324.y >= (2.00000000E+00*_TMP328).y && _interp_restriction_lv2_up.y && _edr.y, _TMP324.z >= (2.00000000E+00*_TMP328).z && _interp_restriction_lv2_up.z && _edr.z, _TMP324.w >= (2.00000000E+00*_TMP328).w && _interp_restriction_lv2_up.w && _edr.w);
    _fx45i = vec4(float((_edri.x && _interp_restriction_lv0.x)), float((_edri.y && _interp_restriction_lv0.y)), float((_edri.z && _interp_restriction_lv0.z)), float((_edri.w && _interp_restriction_lv0.w)))*_TMP242;
    _fx45 = vec4(float(_edr.x), float(_edr.y), float(_edr.z), float(_edr.w))*_TMP250;
    _fx30 = vec4(float(_edr_left.x), float(_edr_left.y), float(_edr_left.z), float(_edr_left.w))*_TMP258;
    _fx60 = vec4(float(_edr_up.x), float(_edr_up.y), float(_edr_up.z), float(_edr_up.w))*_TMP266;
    _a0335 = _r0135 - _r0115.wxyz;
    _TMP332 = abs(_a0335);
    _a0339 = _r0135 - _r0115.zwxy;
    _TMP336 = abs(_a0339);
    _px = bvec4(_TMP332.x <= _TMP336.x, _TMP332.y <= _TMP336.y, _TMP332.z <= _TMP336.z, _TMP332.w <= _TMP336.w);
    _TMP41 = max(_fx30, _fx60);
    _TMP42 = max(_fx45, _fx45i);
    _TMP43 = max(_TMP41, _TMP42);
    _maximos = _TMP43 + vec4( 9.99999996E-13, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00);
    _TMP44 = max(_maximos.x, _maximos.y);
    _TMP45 = max(_maximos.z, _maximos.w);
    _top = max(_TMP44, _TMP45);
    _color_picker = vec4(float((_maximos.x >= _top)), float((_maximos.y >= _top)), float((_maximos.z >= _top)), float((_maximos.w >= _top)));
    _t0355 = float(_px.x);
    _TMP46 = _TMP10.xyz + _t0355*(_TMP8.xyz - _TMP10.xyz);
    _t0357 = float(_px.y);
    _TMP47 = _TMP8.xyz + _t0357*(_TMP4.xyz - _TMP8.xyz);
    _t0359 = float(_px.z);
    _TMP48 = _TMP4.xyz + _t0359*(_TMP6.xyz - _TMP4.xyz);
    _t0361 = float(_px.w);
    _TMP49 = _TMP6.xyz + _t0361*(_TMP10.xyz - _TMP6.xyz);
    _r0363 = _color_picker.x*_TMP46;
    _r0363 = _r0363 + _color_picker.y*_TMP47;
    _r0363 = _r0363 + _color_picker.z*_TMP48;
    _r0363 = _r0363 + _color_picker.w*_TMP49;
    _t0365 = _top - 9.99999996E-13;
    _res = _TMP7.xyz + _t0365*(_r0363 - _TMP7.xyz);
    _ret_0 = vec4(_res.x, _res.y, _res.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
