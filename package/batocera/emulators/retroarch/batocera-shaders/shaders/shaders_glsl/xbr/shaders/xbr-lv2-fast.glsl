// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord11;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord11;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0007;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    vec2 _texCoord;
    _r0007 = VertexCoord.x*MVPMatrix[0];
    _r0007 = _r0007 + VertexCoord.y*MVPMatrix[1];
    _r0007 = _r0007 + VertexCoord.z*MVPMatrix[2];
    _r0007 = _r0007 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _texCoord = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    _OUT._t1 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -_ps.y);
    _OUT._t2 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 0.00000000E+00);
    _OUT._t3 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, _ps.y);
    _ret_0._position1 = _r0007;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord11 = _texCoord;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    gl_Position = _r0007;
    COL0 = COLOR;
    TEX0.xy = _texCoord;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord11;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _color;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _color;
    vec2 _texCoord1;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
};
vec4 _ret_0;
vec3 _TMP32;
vec3 _TMP31;
vec3 _TMP30;
vec3 _TMP29;
float _TMP28;
float _TMP27;
vec4 _TMP26;
vec4 _TMP25;
vec4 _TMP24;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP38;
bvec4 _TMP15;
bvec4 _TMP14;
bvec4 _TMP13;
bvec4 _TMP12;
bvec4 _TMP11;
bvec4 _TMP10;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0049;
vec4 _r0069;
vec4 _r0079;
vec4 _r0089;
vec4 _TMP100;
vec4 _a0103;
vec4 _TMP106;
vec4 _a0109;
vec4 _TMP112;
vec4 _a0115;
vec4 _TMP118;
vec4 _a0121;
vec4 _TMP124;
vec4 _a0127;
vec4 _TMP130;
vec4 _a0133;
vec4 _x0135;
vec4 _TMP136;
vec4 _x0143;
vec4 _TMP144;
vec4 _x0151;
vec4 _TMP152;
vec4 _x0159;
vec4 _TMP160;
vec4 _TMP168;
vec4 _a0171;
vec4 _TMP172;
vec4 _a0175;
vec4 _TMP176;
vec4 _a0179;
vec4 _TMP182;
vec4 _a0185;
vec4 _TMP186;
vec4 _a0189;
vec4 _TMP190;
vec4 _a0193;
vec4 _TMP194;
vec4 _a0197;
vec4 _TMP198;
vec4 _a0201;
vec4 _TMP202;
vec4 _a0205;
vec4 _TMP206;
vec4 _a0209;
vec4 _TMP210;
vec4 _a0213;
vec4 _TMP214;
vec4 _a0217;
float _t0233;
float _t0235;
float _t0237;
float _t0239;
vec3 _r0241;
float _t0243;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    bvec4 _edri;
    bvec4 _edr;
    bvec4 _edr_left;
    bvec4 _edr_up;
    bvec4 _px;
    bvec4 _interp_restriction_lv0;
    bvec4 _interp_restriction_lv1;
    bvec4 _interp_restriction_lv2_left;
    bvec4 _interp_restriction_lv2_up;
    vec4 _fx;
    vec4 _fx_left;
    vec4 _fx_up;
    vec2 _fp;
    vec4 _fx45i;
    vec4 _fx45;
    vec4 _fx30;
    vec4 _fx60;
    vec4 _maximos;
    float _top;
    vec4 _color_picker;
    vec3 _res;
    _x0049 = TEX0.xy*TextureSize;
    _fp = fract(_x0049);
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xw);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.yw);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX2.xw);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX2.yw);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX3.yw);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _r0069.x = dot(_TMP1.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0069.y = dot(_TMP3.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0069.z = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0069.w = dot(_TMP5.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0079.x = dot(_TMP2.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0079.y = dot(_TMP0.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0079.z = dot(_TMP6.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0079.w = dot(_TMP8.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0089.x = dot(_TMP4.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0089.y = dot(_TMP4.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0089.z = dot(_TMP4.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0089.w = dot(_TMP4.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _fx = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x;
    _fx_left = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x;
    _fx_up = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x;
    _interp_restriction_lv0 = bvec4(_r0089.x != _r0069.w && _r0089.x != _r0069.z, _r0089.y != _r0069.x && _r0089.y != _r0069.w, _r0089.z != _r0069.y && _r0089.z != _r0069.x, _r0089.w != _r0069.z && _r0089.w != _r0069.y);
    _a0103 = _r0069.wxyz - _r0069;
    _TMP100 = abs(_a0103);
    _TMP10 = bvec4(_TMP100.x < 1.50000000E+01, _TMP100.y < 1.50000000E+01, _TMP100.z < 1.50000000E+01, _TMP100.w < 1.50000000E+01);
    _a0109 = _r0069.wxyz - _r0079;
    _TMP106 = abs(_a0109);
    _TMP11 = bvec4(_TMP106.x < 1.50000000E+01, _TMP106.y < 1.50000000E+01, _TMP106.z < 1.50000000E+01, _TMP106.w < 1.50000000E+01);
    _a0115 = _r0069.zwxy - _r0069.yzwx;
    _TMP112 = abs(_a0115);
    _TMP12 = bvec4(_TMP112.x < 1.50000000E+01, _TMP112.y < 1.50000000E+01, _TMP112.z < 1.50000000E+01, _TMP112.w < 1.50000000E+01);
    _a0121 = _r0069.zwxy - _r0079.zwxy;
    _TMP118 = abs(_a0121);
    _TMP13 = bvec4(_TMP118.x < 1.50000000E+01, _TMP118.y < 1.50000000E+01, _TMP118.z < 1.50000000E+01, _TMP118.w < 1.50000000E+01);
    _a0127 = _r0089 - _r0079.zwxy;
    _TMP124 = abs(_a0127);
    _TMP14 = bvec4(_TMP124.x < 1.50000000E+01, _TMP124.y < 1.50000000E+01, _TMP124.z < 1.50000000E+01, _TMP124.w < 1.50000000E+01);
    _a0133 = _r0089 - _r0079;
    _TMP130 = abs(_a0133);
    _TMP15 = bvec4(_TMP130.x < 1.50000000E+01, _TMP130.y < 1.50000000E+01, _TMP130.z < 1.50000000E+01, _TMP130.w < 1.50000000E+01);
    _interp_restriction_lv1 = bvec4(_interp_restriction_lv0.x && (!_TMP10.x && !_TMP11.x || !_TMP12.x && !_TMP13.x || _TMP14.x || _TMP15.x), _interp_restriction_lv0.y && (!_TMP10.y && !_TMP11.y || !_TMP12.y && !_TMP13.y || _TMP14.y || _TMP15.y), _interp_restriction_lv0.z && (!_TMP10.z && !_TMP11.z || !_TMP12.z && !_TMP13.z || _TMP14.z || _TMP15.z), _interp_restriction_lv0.w && (!_TMP10.w && !_TMP11.w || !_TMP12.w && !_TMP13.w || _TMP14.w || _TMP15.w));
    _interp_restriction_lv2_left = bvec4(_r0089.x != _r0079.z && _r0069.y != _r0079.z, _r0089.y != _r0079.w && _r0069.z != _r0079.w, _r0089.z != _r0079.x && _r0069.w != _r0079.x, _r0089.w != _r0079.y && _r0069.x != _r0079.y);
    _interp_restriction_lv2_up = bvec4(_r0089.x != _r0079.x && _r0069.x != _r0079.x, _r0089.y != _r0079.y && _r0069.y != _r0079.y, _r0089.z != _r0079.z && _r0069.z != _r0079.z, _r0089.w != _r0079.w && _r0069.w != _r0079.w);
    _x0135 = (((_fx + vec4( 3.33333343E-01, 3.33333343E-01, 3.33333343E-01, 3.33333343E-01)) - vec4( 1.50000000E+00, 5.00000000E-01, -5.00000000E-01, 5.00000000E-01)) - vec4( 2.50000000E-01, 2.50000000E-01, 2.50000000E-01, 2.50000000E-01))/vec4( 6.66666687E-01, 6.66666687E-01, 6.66666687E-01, 6.66666687E-01);
    _TMP38 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0135);
    _TMP136 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP38);
    _x0143 = ((_fx + vec4( 3.33333343E-01, 3.33333343E-01, 3.33333343E-01, 3.33333343E-01)) - vec4( 1.50000000E+00, 5.00000000E-01, -5.00000000E-01, 5.00000000E-01))/vec4( 6.66666687E-01, 6.66666687E-01, 6.66666687E-01, 6.66666687E-01);
    _TMP38 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0143);
    _TMP144 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP38);
    _x0151 = ((_fx_left + vec4( 1.66666672E-01, 3.33333343E-01, 1.66666672E-01, 3.33333343E-01)) - vec4( 1.00000000E+00, 1.00000000E+00, -5.00000000E-01, 0.00000000E+00))/vec4( 3.33333343E-01, 6.66666687E-01, 3.33333343E-01, 6.66666687E-01);
    _TMP38 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0151);
    _TMP152 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP38);
    _x0159 = ((_fx_up + vec4( 3.33333343E-01, 1.66666672E-01, 3.33333343E-01, 1.66666672E-01)) - vec4( 2.00000000E+00, 0.00000000E+00, -1.00000000E+00, 5.00000000E-01))/vec4( 6.66666687E-01, 3.33333343E-01, 6.66666687E-01, 3.33333343E-01);
    _TMP38 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0159);
    _TMP160 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP38);
    _a0171 = _r0079.zwxy - _r0089;
    _TMP168 = abs(_a0171);
    _a0175 = _r0089 - _r0079;
    _TMP172 = abs(_a0175);
    _a0179 = _r0069.zwxy - _r0069.wxyz;
    _TMP176 = abs(_a0179);
    _TMP16 = _TMP168 + _TMP172 + 3.00000000E+00*_TMP176;
    _a0185 = _r0069 - _r0069.wxyz;
    _TMP182 = abs(_a0185);
    _a0189 = _r0069.yzwx - _r0069.zwxy;
    _TMP186 = abs(_a0189);
    _a0193 = _r0089 - _r0079.wxyz;
    _TMP190 = abs(_a0193);
    _TMP17 = _TMP182 + _TMP186 + 3.00000000E+00*_TMP190;
    _edri = bvec4(_TMP16.x < _TMP17.x, _TMP16.y < _TMP17.y, _TMP16.z < _TMP17.z, _TMP16.w < _TMP17.w);
    _edr = bvec4(_edri.x && _interp_restriction_lv1.x, _edri.y && _interp_restriction_lv1.y, _edri.z && _interp_restriction_lv1.z, _edri.w && _interp_restriction_lv1.w);
    _a0197 = _r0069.wxyz - _r0079.zwxy;
    _TMP194 = abs(_a0197);
    _a0201 = _r0069.zwxy - _r0079;
    _TMP198 = abs(_a0201);
    _edr_left = bvec4((2.00000000E+00*_TMP194).x <= _TMP198.x && _interp_restriction_lv2_left.x && _edr.x, (2.00000000E+00*_TMP194).y <= _TMP198.y && _interp_restriction_lv2_left.y && _edr.y, (2.00000000E+00*_TMP194).z <= _TMP198.z && _interp_restriction_lv2_left.z && _edr.z, (2.00000000E+00*_TMP194).w <= _TMP198.w && _interp_restriction_lv2_left.w && _edr.w);
    _a0205 = _r0069.wxyz - _r0079.zwxy;
    _TMP202 = abs(_a0205);
    _a0209 = _r0069.zwxy - _r0079;
    _TMP206 = abs(_a0209);
    _edr_up = bvec4(_TMP202.x >= (2.00000000E+00*_TMP206).x && _interp_restriction_lv2_up.x && _edr.x, _TMP202.y >= (2.00000000E+00*_TMP206).y && _interp_restriction_lv2_up.y && _edr.y, _TMP202.z >= (2.00000000E+00*_TMP206).z && _interp_restriction_lv2_up.z && _edr.z, _TMP202.w >= (2.00000000E+00*_TMP206).w && _interp_restriction_lv2_up.w && _edr.w);
    _fx45i = vec4(float((_edri.x && _interp_restriction_lv0.x)), float((_edri.y && _interp_restriction_lv0.y)), float((_edri.z && _interp_restriction_lv0.z)), float((_edri.w && _interp_restriction_lv0.w)))*_TMP136;
    _fx45 = vec4(float(_edr.x), float(_edr.y), float(_edr.z), float(_edr.w))*_TMP144;
    _fx30 = vec4(float(_edr_left.x), float(_edr_left.y), float(_edr_left.z), float(_edr_left.w))*_TMP152;
    _fx60 = vec4(float(_edr_up.x), float(_edr_up.y), float(_edr_up.z), float(_edr_up.w))*_TMP160;
    _a0213 = _r0089 - _r0069.wxyz;
    _TMP210 = abs(_a0213);
    _a0217 = _r0089 - _r0069.zwxy;
    _TMP214 = abs(_a0217);
    _px = bvec4(_TMP210.x <= _TMP214.x, _TMP210.y <= _TMP214.y, _TMP210.z <= _TMP214.z, _TMP210.w <= _TMP214.w);
    _TMP24 = max(_fx30, _fx60);
    _TMP25 = max(_fx45, _fx45i);
    _TMP26 = max(_TMP24, _TMP25);
    _maximos = _TMP26 + vec4( 9.99999996E-13, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00);
    _TMP27 = max(_maximos.x, _maximos.y);
    _TMP28 = max(_maximos.z, _maximos.w);
    _top = max(_TMP27, _TMP28);
    _color_picker = vec4(float((_maximos.x >= _top)), float((_maximos.y >= _top)), float((_maximos.z >= _top)), float((_maximos.w >= _top)));
    _t0233 = float(_px.x);
    _TMP29 = _TMP7.xyz + _t0233*(_TMP5.xyz - _TMP7.xyz);
    _t0235 = float(_px.y);
    _TMP30 = _TMP5.xyz + _t0235*(_TMP1.xyz - _TMP5.xyz);
    _t0237 = float(_px.z);
    _TMP31 = _TMP1.xyz + _t0237*(_TMP3.xyz - _TMP1.xyz);
    _t0239 = float(_px.w);
    _TMP32 = _TMP3.xyz + _t0239*(_TMP7.xyz - _TMP3.xyz);
    _r0241 = _color_picker.x*_TMP29;
    _r0241 = _r0241 + _color_picker.y*_TMP30;
    _r0241 = _r0241 + _color_picker.z*_TMP31;
    _r0241 = _r0241 + _color_picker.w*_TMP32;
    _t0243 = _top - 9.99999996E-13;
    _res = _TMP4.xyz + _t0243*(_r0241 - _TMP4.xyz);
    _ret_0 = vec4(_res.x, _res.y, _res.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
