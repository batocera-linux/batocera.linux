// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord;
};
out_vertex _ret_0;
vec4 _r0008;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    _r0008 = VertexCoord.x*MVPMatrix[0];
    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];
    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];
    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];
    _ret_0._position1 = _r0008;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord = TexCoord.xy;
    gl_Position = _r0008;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _color1;
    vec2 _texCoord;
};
vec4 _ret_0;
float _TMP37;
vec4 _TMP32;
vec4 _TMP31;
vec4 _TMP30;
vec4 _TMP29;
vec4 _TMP28;
vec4 _TMP27;
vec4 _TMP26;
vec4 _TMP25;
vec4 _TMP24;
vec4 _TMP23;
vec4 _TMP22;
vec4 _TMP21;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP45;
vec4 _TMP44;
float _TMP55;
float _TMP54;
float _TMP53;
float _TMP52;
float _TMP43;
float _TMP51;
vec2 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0065;
float _TMP66;
vec2 _v0067;
vec2 _pt20067;
float _TMP74;
vec2 _v0075;
vec2 _pt20075;
float _TMP82;
vec2 _v0083;
vec2 _pt20083;
float _TMP90;
vec2 _v0091;
vec2 _pt20091;
vec4 _x0099;
vec4 _res0099;
vec4 _x0101;
vec4 _x0111;
float _TMP120;
vec2 _v0121;
vec2 _pt20121;
float _TMP128;
vec2 _v0129;
float _TMP136;
vec2 _v0137;
vec2 _pt20137;
float _TMP144;
vec2 _v0145;
vec2 _pt20145;
vec4 _x0153;
vec4 _res0153;
vec4 _x0155;
vec4 _x0165;
float _TMP174;
vec2 _v0175;
vec2 _pt20175;
float _TMP182;
vec2 _v0183;
vec2 _pt20183;
float _TMP190;
vec2 _v0191;
vec2 _pt20191;
float _TMP198;
vec2 _v0199;
vec2 _pt20199;
vec4 _x0207;
vec4 _res0207;
vec4 _x0209;
vec4 _x0219;
float _TMP228;
vec2 _v0229;
vec2 _pt20229;
float _TMP236;
vec2 _v0237;
vec2 _pt20237;
float _TMP244;
vec2 _v0245;
vec2 _pt20245;
float _TMP252;
vec2 _v0253;
vec2 _pt20253;
vec4 _x0261;
vec4 _res0261;
vec4 _x0263;
vec4 _x0273;
vec2 _c0283;
vec2 _c0285;
vec2 _c0287;
vec2 _c0289;
vec2 _c0291;
vec2 _c0295;
vec2 _c0297;
vec2 _c0299;
vec2 _c0301;
vec2 _c0303;
vec2 _c0305;
vec2 _c0307;
vec2 _c0309;
vec2 _c0311;
vec2 _c0313;
vec3 _r0315;
vec3 _r0317;
vec3 _r0319;
vec3 _r0321;
vec4 _r0323;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec3 _color;
    vec2 _dx;
    vec2 _dy;
    vec2 _pc;
    vec2 _tc;
    _pc = TEX0.xy*TextureSize;
    _x0065 = _pc - vec2( 5.00000000E-01, 5.00000000E-01);
    _TMP0 = floor(_x0065);
    _tc = _TMP0 + vec2( 5.00000000E-01, 5.00000000E-01);
    _pt20067 = (_tc - vec2( 1.00000000E+00, 0.00000000E+00)) - vec2( 0.00000000E+00, 1.00000000E+00);
    _v0067 = _pt20067 - _pc;
    _TMP43 = dot(_v0067, _v0067);
    _TMP51 = inversesqrt(_TMP43);
    _TMP66 = 1.00000000E+00/_TMP51;
    _pt20075 = _tc - vec2( 0.00000000E+00, 1.00000000E+00);
    _v0075 = _pt20075 - _pc;
    _TMP43 = dot(_v0075, _v0075);
    _TMP51 = inversesqrt(_TMP43);
    _TMP74 = 1.00000000E+00/_TMP51;
    _pt20083 = (_tc + vec2( 1.00000000E+00, 0.00000000E+00)) - vec2( 0.00000000E+00, 1.00000000E+00);
    _v0083 = _pt20083 - _pc;
    _TMP43 = dot(_v0083, _v0083);
    _TMP51 = inversesqrt(_TMP43);
    _TMP82 = 1.00000000E+00/_TMP51;
    _pt20091 = (_tc + vec2( 2.00000000E+00, 0.00000000E+00)) - vec2( 0.00000000E+00, 1.00000000E+00);
    _v0091 = _pt20091 - _pc;
    _TMP43 = dot(_v0091, _v0091);
    _TMP51 = inversesqrt(_TMP43);
    _TMP90 = 1.00000000E+00/_TMP51;
    _x0099 = vec4(_TMP66, _TMP74, _TMP82, _TMP90);
    _x0101 = _x0099*1.31946886E+00;
    _TMP52 = sin(_x0101.x);
    _TMP53 = sin(_x0101.y);
    _TMP54 = sin(_x0101.z);
    _TMP55 = sin(_x0101.w);
    _TMP44 = vec4(_TMP52, _TMP53, _TMP54, _TMP55);
    _x0111 = _x0099*2.89026546E+00;
    _TMP52 = sin(_x0111.x);
    _TMP53 = sin(_x0111.y);
    _TMP54 = sin(_x0111.z);
    _TMP55 = sin(_x0111.w);
    _TMP45 = vec4(_TMP52, _TMP53, _TMP54, _TMP55);
    _res0099 = vec4(_x0099.x == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP44*_TMP45)/(_x0099*_x0099)).x, _x0099.y == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP44*_TMP45)/(_x0099*_x0099)).y, _x0099.z == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP44*_TMP45)/(_x0099*_x0099)).z, _x0099.w == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP44*_TMP45)/(_x0099*_x0099)).w);
    _pt20121 = _tc - vec2( 1.00000000E+00, 0.00000000E+00);
    _v0121 = _pt20121 - _pc;
    _TMP43 = dot(_v0121, _v0121);
    _TMP51 = inversesqrt(_TMP43);
    _TMP120 = 1.00000000E+00/_TMP51;
    _v0129 = _tc - _pc;
    _TMP43 = dot(_v0129, _v0129);
    _TMP51 = inversesqrt(_TMP43);
    _TMP128 = 1.00000000E+00/_TMP51;
    _pt20137 = _tc + vec2( 1.00000000E+00, 0.00000000E+00);
    _v0137 = _pt20137 - _pc;
    _TMP43 = dot(_v0137, _v0137);
    _TMP51 = inversesqrt(_TMP43);
    _TMP136 = 1.00000000E+00/_TMP51;
    _pt20145 = _tc + vec2( 2.00000000E+00, 0.00000000E+00);
    _v0145 = _pt20145 - _pc;
    _TMP43 = dot(_v0145, _v0145);
    _TMP51 = inversesqrt(_TMP43);
    _TMP144 = 1.00000000E+00/_TMP51;
    _x0153 = vec4(_TMP120, _TMP128, _TMP136, _TMP144);
    _x0155 = _x0153*1.31946886E+00;
    _TMP52 = sin(_x0155.x);
    _TMP53 = sin(_x0155.y);
    _TMP54 = sin(_x0155.z);
    _TMP55 = sin(_x0155.w);
    _TMP44 = vec4(_TMP52, _TMP53, _TMP54, _TMP55);
    _x0165 = _x0153*2.89026546E+00;
    _TMP52 = sin(_x0165.x);
    _TMP53 = sin(_x0165.y);
    _TMP54 = sin(_x0165.z);
    _TMP55 = sin(_x0165.w);
    _TMP45 = vec4(_TMP52, _TMP53, _TMP54, _TMP55);
    _res0153 = vec4(_x0153.x == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP44*_TMP45)/(_x0153*_x0153)).x, _x0153.y == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP44*_TMP45)/(_x0153*_x0153)).y, _x0153.z == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP44*_TMP45)/(_x0153*_x0153)).z, _x0153.w == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP44*_TMP45)/(_x0153*_x0153)).w);
    _pt20175 = (_tc - vec2( 1.00000000E+00, 0.00000000E+00)) + vec2( 0.00000000E+00, 1.00000000E+00);
    _v0175 = _pt20175 - _pc;
    _TMP43 = dot(_v0175, _v0175);
    _TMP51 = inversesqrt(_TMP43);
    _TMP174 = 1.00000000E+00/_TMP51;
    _pt20183 = _tc + vec2( 0.00000000E+00, 1.00000000E+00);
    _v0183 = _pt20183 - _pc;
    _TMP43 = dot(_v0183, _v0183);
    _TMP51 = inversesqrt(_TMP43);
    _TMP182 = 1.00000000E+00/_TMP51;
    _pt20191 = _tc + vec2( 1.00000000E+00, 0.00000000E+00) + vec2( 0.00000000E+00, 1.00000000E+00);
    _v0191 = _pt20191 - _pc;
    _TMP43 = dot(_v0191, _v0191);
    _TMP51 = inversesqrt(_TMP43);
    _TMP190 = 1.00000000E+00/_TMP51;
    _pt20199 = _tc + vec2( 2.00000000E+00, 0.00000000E+00) + vec2( 0.00000000E+00, 1.00000000E+00);
    _v0199 = _pt20199 - _pc;
    _TMP43 = dot(_v0199, _v0199);
    _TMP51 = inversesqrt(_TMP43);
    _TMP198 = 1.00000000E+00/_TMP51;
    _x0207 = vec4(_TMP174, _TMP182, _TMP190, _TMP198);
    _x0209 = _x0207*1.31946886E+00;
    _TMP52 = sin(_x0209.x);
    _TMP53 = sin(_x0209.y);
    _TMP54 = sin(_x0209.z);
    _TMP55 = sin(_x0209.w);
    _TMP44 = vec4(_TMP52, _TMP53, _TMP54, _TMP55);
    _x0219 = _x0207*2.89026546E+00;
    _TMP52 = sin(_x0219.x);
    _TMP53 = sin(_x0219.y);
    _TMP54 = sin(_x0219.z);
    _TMP55 = sin(_x0219.w);
    _TMP45 = vec4(_TMP52, _TMP53, _TMP54, _TMP55);
    _res0207 = vec4(_x0207.x == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP44*_TMP45)/(_x0207*_x0207)).x, _x0207.y == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP44*_TMP45)/(_x0207*_x0207)).y, _x0207.z == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP44*_TMP45)/(_x0207*_x0207)).z, _x0207.w == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP44*_TMP45)/(_x0207*_x0207)).w);
    _pt20229 = (_tc - vec2( 1.00000000E+00, 0.00000000E+00)) + vec2( 0.00000000E+00, 2.00000000E+00);
    _v0229 = _pt20229 - _pc;
    _TMP43 = dot(_v0229, _v0229);
    _TMP51 = inversesqrt(_TMP43);
    _TMP228 = 1.00000000E+00/_TMP51;
    _pt20237 = _tc + vec2( 0.00000000E+00, 2.00000000E+00);
    _v0237 = _pt20237 - _pc;
    _TMP43 = dot(_v0237, _v0237);
    _TMP51 = inversesqrt(_TMP43);
    _TMP236 = 1.00000000E+00/_TMP51;
    _pt20245 = _tc + vec2( 1.00000000E+00, 0.00000000E+00) + vec2( 0.00000000E+00, 2.00000000E+00);
    _v0245 = _pt20245 - _pc;
    _TMP43 = dot(_v0245, _v0245);
    _TMP51 = inversesqrt(_TMP43);
    _TMP244 = 1.00000000E+00/_TMP51;
    _pt20253 = _tc + vec2( 2.00000000E+00, 0.00000000E+00) + vec2( 0.00000000E+00, 2.00000000E+00);
    _v0253 = _pt20253 - _pc;
    _TMP43 = dot(_v0253, _v0253);
    _TMP51 = inversesqrt(_TMP43);
    _TMP252 = 1.00000000E+00/_TMP51;
    _x0261 = vec4(_TMP228, _TMP236, _TMP244, _TMP252);
    _x0263 = _x0261*1.31946886E+00;
    _TMP52 = sin(_x0263.x);
    _TMP53 = sin(_x0263.y);
    _TMP54 = sin(_x0263.z);
    _TMP55 = sin(_x0263.w);
    _TMP44 = vec4(_TMP52, _TMP53, _TMP54, _TMP55);
    _x0273 = _x0261*2.89026546E+00;
    _TMP52 = sin(_x0273.x);
    _TMP53 = sin(_x0273.y);
    _TMP54 = sin(_x0273.z);
    _TMP55 = sin(_x0273.w);
    _TMP45 = vec4(_TMP52, _TMP53, _TMP54, _TMP55);
    _res0261 = vec4(_x0261.x == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP44*_TMP45)/(_x0261*_x0261)).x, _x0261.y == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP44*_TMP45)/(_x0261*_x0261)).y, _x0261.z == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP44*_TMP45)/(_x0261*_x0261)).z, _x0261.w == 0.00000000E+00 ? 3.81361532E+00 : ((_TMP44*_TMP45)/(_x0261*_x0261)).w);
    _dx = vec2( 1.00000000E+00, 0.00000000E+00)/TextureSize;
    _dy = vec2( 0.00000000E+00, 1.00000000E+00)/TextureSize;
    _tc = _tc/TextureSize;
    _c0283 = (_tc - _dx) - _dy;
    _TMP17 = COMPAT_TEXTURE(Texture, _c0283);
    _c0285 = _tc - _dy;
    _TMP18 = COMPAT_TEXTURE(Texture, _c0285);
    _c0287 = (_tc + _dx) - _dy;
    _TMP19 = COMPAT_TEXTURE(Texture, _c0287);
    _c0289 = (_tc + 2.00000000E+00*_dx) - _dy;
    _TMP20 = COMPAT_TEXTURE(Texture, _c0289);
    _c0291 = _tc - _dx;
    _TMP21 = COMPAT_TEXTURE(Texture, _c0291);
    _TMP22 = COMPAT_TEXTURE(Texture, _tc);
    _c0295 = _tc + _dx;
    _TMP23 = COMPAT_TEXTURE(Texture, _c0295);
    _c0297 = _tc + 2.00000000E+00*_dx;
    _TMP24 = COMPAT_TEXTURE(Texture, _c0297);
    _c0299 = (_tc - _dx) + _dy;
    _TMP25 = COMPAT_TEXTURE(Texture, _c0299);
    _c0301 = _tc + _dy;
    _TMP26 = COMPAT_TEXTURE(Texture, _c0301);
    _c0303 = _tc + _dx + _dy;
    _TMP27 = COMPAT_TEXTURE(Texture, _c0303);
    _c0305 = _tc + 2.00000000E+00*_dx + _dy;
    _TMP28 = COMPAT_TEXTURE(Texture, _c0305);
    _c0307 = (_tc - _dx) + 2.00000000E+00*_dy;
    _TMP29 = COMPAT_TEXTURE(Texture, _c0307);
    _c0309 = _tc + 2.00000000E+00*_dy;
    _TMP30 = COMPAT_TEXTURE(Texture, _c0309);
    _c0311 = _tc + _dx + 2.00000000E+00*_dy;
    _TMP31 = COMPAT_TEXTURE(Texture, _c0311);
    _c0313 = _tc + 2.00000000E+00*_dx + 2.00000000E+00*_dy;
    _TMP32 = COMPAT_TEXTURE(Texture, _c0313);
    _r0315 = _res0099.x*_TMP17.xyz;
    _r0315 = _r0315 + _res0099.y*_TMP18.xyz;
    _r0315 = _r0315 + _res0099.z*_TMP19.xyz;
    _r0315 = _r0315 + _res0099.w*_TMP20.xyz;
    _r0317 = _res0153.x*_TMP21.xyz;
    _r0317 = _r0317 + _res0153.y*_TMP22.xyz;
    _r0317 = _r0317 + _res0153.z*_TMP23.xyz;
    _r0317 = _r0317 + _res0153.w*_TMP24.xyz;
    _color = _r0315 + _r0317;
    _r0319 = _res0207.x*_TMP25.xyz;
    _r0319 = _r0319 + _res0207.y*_TMP26.xyz;
    _r0319 = _r0319 + _res0207.z*_TMP27.xyz;
    _r0319 = _r0319 + _res0207.w*_TMP28.xyz;
    _color = _color + _r0319;
    _r0321 = _res0261.x*_TMP29.xyz;
    _r0321 = _r0321 + _res0261.y*_TMP30.xyz;
    _r0321 = _r0321 + _res0261.z*_TMP31.xyz;
    _r0321 = _r0321 + _res0261.w*_TMP32.xyz;
    _color = _color + _r0321;
    _r0323.x = dot(_res0099, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _r0323.y = dot(_res0153, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _r0323.z = dot(_res0207, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _r0323.w = dot(_res0261, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _TMP37 = dot(_r0323, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _color = _color/_TMP37;
    _ret_0 = vec4(_color.x, _color.y, _color.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
