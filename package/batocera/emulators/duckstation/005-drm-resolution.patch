diff --git a/src/common/drm_display.cpp b/src/common/drm_display.cpp
index 2cadeef..f423b2f 100644
--- a/src/common/drm_display.cpp
+++ b/src/common/drm_display.cpp
@@ -124,45 +124,6 @@ bool DRMDisplay::TryOpeningCard(int card, u32 width, u32 height, float refresh_r
     return false;
   }
 
-  for (int i = 0; i < m_connector->count_modes; i++)
-  {
-    drmModeModeInfo* next_mode = &m_connector->modes[i];
-
-    const float mode_refresh_rate = (static_cast<float>(next_mode->clock) * 1000.0f) /
-                                    (static_cast<float>(next_mode->htotal) * static_cast<float>(next_mode->vtotal));
-    Log_DevPrintf("Checking mode %u: %ux%u @ %f hz", i, next_mode->hdisplay, next_mode->vdisplay, mode_refresh_rate);
-
-    if (width == 0 && height == 0)
-    {
-      // use preferred mode if we're auto selecting
-      if (next_mode->type & DRM_MODE_TYPE_PREFERRED)
-      {
-        m_mode = next_mode;
-        break;
-      }
-      else if (!m_mode)
-      {
-        m_mode = next_mode;
-      }
-    }
-    else
-    {
-      if (width == next_mode->hdisplay && height == next_mode->vdisplay &&
-          (refresh_rate == 0.0f || std::abs(mode_refresh_rate - refresh_rate) < 0.1f))
-      {
-        m_mode = next_mode;
-        break;
-      }
-    }
-  }
-
-  if (!m_mode)
-  {
-    Log_ErrorPrintf("No mode found");
-    drmModeFreeResources(resources);
-    return false;
-  }
-
   drmModeEncoder* encoder = nullptr;
   for (int i = 0; i < resources->count_encoders; i++)
   {
@@ -177,6 +138,21 @@ bool DRMDisplay::TryOpeningCard(int card, u32 width, u32 height, float refresh_r
     drmModeFreeEncoder(next_encoder);
   }
 
+  FILE* fdDrmMode;
+  int drmMode;
+  if((fdDrmMode = fopen("/var/run/drmMode", "r")) != NULL) {
+    if(fscanf(fdDrmMode, "%i", &drmMode) == 1) {
+      if(drmMode>=0 && drmMode<m_connector->count_modes) {
+	drmModeCrtc *pcrtc = drmModeGetCrtc(m_card_fd, encoder->crtc_id);
+	if(pcrtc != NULL) {
+	  drmModeSetCrtc(m_card_fd, pcrtc->crtc_id, pcrtc->buffer_id, 0, 0, &(m_connector->connector_id), 1, &(m_connector->modes[drmMode]));
+	  m_mode = &(m_connector->modes[drmMode]);
+	}
+      }
+    }
+    fclose(fdDrmMode);
+  }
+
   if (encoder)
   {
     drmModeFreeEncoder(encoder);
@@ -192,6 +168,13 @@ bool DRMDisplay::TryOpeningCard(int card, u32 width, u32 height, float refresh_r
     }
   }
 
+  if (!m_mode)
+  {
+    Log_ErrorPrintf("No mode found");
+    drmModeFreeResources(resources);
+    return false;
+  }
+
   drmModeFreeResources(resources);
 
   m_card_id = card;
