diff --git a/src/api/frontend.c b/src/api/frontend.c
index 6f2d267..2ec0538 100644
--- a/src/api/frontend.c
+++ b/src/api/frontend.c
@@ -177,6 +177,9 @@ EXPORT m64p_error CALL CoreDoCommand(m64p_command Command, int ParamInt, void *P
     {
         case M64CMD_NOP:
             return M64ERR_SUCCESS;
+        case M64CMD_ROM_FILENAME:
+            strncpy(g_rom_filename, (const unsigned char *) ParamPtr, ParamInt);
+            return M64ERR_SUCCESS;
         case M64CMD_ROM_OPEN:
             if (g_EmulatorRunning || l_DiskOpen || l_ROMOpen)
                 return M64ERR_INVALID_STATE;
diff --git a/src/api/m64p_types.h b/src/api/m64p_types.h
index 088f011..e68c92d 100644
--- a/src/api/m64p_types.h
+++ b/src/api/m64p_types.h
@@ -170,6 +170,7 @@ typedef enum {
   M64CMD_NETPLAY_CLOSE,
   M64CMD_PIF_OPEN,
   M64CMD_ROM_SET_SETTINGS,
+  M64CMD_ROM_FILENAME,
   M64CMD_DISK_OPEN,
   M64CMD_DISK_CLOSE
 } m64p_command;
diff --git a/src/main/main.c b/src/main/main.c
index 7612875..954a9d7 100644
--- a/src/main/main.c
+++ b/src/main/main.c
@@ -114,6 +114,7 @@ uint32_t g_start_address = UINT32_C(0xa4000040);
 struct device g_dev;
 
 m64p_media_loader g_media_loader;
+char g_rom_filename[1024] = "";
 
 int g_gs_vi_counter = 0;
 
diff --git a/src/main/main.h b/src/main/main.h
index 3aacca3..e03574b 100644
--- a/src/main/main.h
+++ b/src/main/main.h
@@ -50,6 +50,7 @@ extern void* g_mem_base;
 extern struct device g_dev;
 
 extern m64p_media_loader g_media_loader;
+extern char g_rom_filename[1024];
 
 extern m64p_frame_callback g_FrameCallback;
 
diff --git a/src/main/savestates.c b/src/main/savestates.c
index bf3926d..5a957c3 100644
--- a/src/main/savestates.c
+++ b/src/main/savestates.c
@@ -86,6 +86,12 @@ static char *savestates_generate_path(savestates_type type)
     }
     else /* Use the selected savestate slot */
     {
+        char* prefix = ROM_SETTINGS.goodname;
+        if(g_rom_filename[0] != '\0') {
+        char *x = strrchr(g_rom_filename, '/');
+        if(x != NULL) prefix = x;
+    }
+
         char *filepath;
         size_t size = 0;
 
@@ -93,7 +99,7 @@ static char *savestates_generate_path(savestates_type type)
         {
             case savestates_type_m64p:
                 /* check if old file path exists, if it does then use that */
-                filepath = formatstr("%s%s.st%d", get_savestatepath(), ROM_SETTINGS.goodname, slot);
+                filepath = formatstr("%s.st%d", prefix, slot);
                 if (get_file_size(filepath, &size) != file_ok || size == 0)
                 {
                     /* else use new path */
@@ -101,10 +107,10 @@ static char *savestates_generate_path(savestates_type type)
                 }
                 break;
             case savestates_type_pj64_zip:
-                filepath = formatstr("%s%s.pj%d.zip", get_savestatepath(), ROM_PARAMS.headername, slot);
+                filepath = formatstr("%s.pj%d.zip", prefix, slot);
                 break;
             case savestates_type_pj64_unc:
-                filepath = formatstr("%s%s.pj%d", get_savestatepath(), ROM_PARAMS.headername, slot);
+                filepath = formatstr("%s.pj%d", prefix, slot);
                 break;
             default:
                 filepath = NULL;
@@ -2156,6 +2162,7 @@ int savestates_save(void)
     char *filepath;
     int ret = 0;
     const struct device* dev = &g_dev;
+    char ScreenshotFileName[256];
 
     /* Can only save PJ64 savestates on VI / COMPARE interrupt.
        Otherwise try again in a little while. */
@@ -2179,9 +2186,13 @@ int savestates_save(void)
             case savestates_type_pj64_unc: ret = savestates_save_pj64_unc(dev, filepath); break;
             default: ret = 0; break;
         }
+        strncpy(ScreenshotFileName, filepath, 251);
+        strncat(ScreenshotFileName, ".png", 4);
         free(filepath);
     }
 
+    TakeScreenshotToFile(ScreenshotFileName, 0);
+    
     // deliver callback to indicate completion of state saving operation
     StateChanged(M64CORE_STATE_SAVECOMPLETE, ret);
 
diff --git a/src/main/screenshot.c b/src/main/screenshot.c
index a831571..12a184b 100644
--- a/src/main/screenshot.c
+++ b/src/main/screenshot.c
@@ -227,6 +227,12 @@ void TakeScreenshot(int iFrameNumber)
         return;
     }
 
+    TakeScreenshotToFile(filename, iFrameNumber);
+    free(filename);
+}
+
+void TakeScreenshotToFile(char* filename, int iFrameNumber)
+{
     // get the width and height
     int width = 640;
     int height = 480;
@@ -237,7 +243,6 @@ void TakeScreenshot(int iFrameNumber)
     if (pucFrame == NULL)
     {
         StateChanged(M64CORE_SCREENSHOT_CAPTURED, 0);
-        free(filename);
         return;
     }
 
@@ -248,7 +253,6 @@ void TakeScreenshot(int iFrameNumber)
     int rval = SaveRGBBufferToFile(filename, pucFrame, width, height, width * 3);
     // free the memory
     free(pucFrame);
-    free(filename);
     // print message -- this allows developers to capture frames and use them in the regression test
     if (rval != 0)
     {
diff --git a/src/main/screenshot.h b/src/main/screenshot.h
index c7f6bad..fdc3e36 100644
--- a/src/main/screenshot.h
+++ b/src/main/screenshot.h
@@ -24,5 +24,6 @@
 
 void ScreenshotRomOpen(void);
 void TakeScreenshot(int iFrameNumber);
+void TakeScreenshotToFile(char *filename, int iFrameNumber);
 
 #endif
