MRFIXIT: controller mapping file needs to be reliable, player number specific, and allow for same controller guid to be used for two diff controllers. Also tell reicast not to add any evdevice unless it's been defined in the cfg, making configgen the master for controller mappings.
--- a/core/linux-dist/evdev.cpp
+++ b/core/linux-dist/evdev.cpp
@@ -1,6 +1,7 @@
 #if defined(USE_EVDEV)
 #include "evdev.h"
 #include "evdev_gamepad.h"
+#include "cfg/cfg.h"
 
 #include <fcntl.h>
 #include <linux/input.h>
@@ -16,13 +17,19 @@
 
 static void input_evdev_add_device(const char *devnode)
 {
-	int fd = open(devnode, O_RDWR);
-	if (fd >= 0)
-	{
-		std::shared_ptr<EvdevGamepadDevice> gamepad = std::make_shared<EvdevGamepadDevice>(maple_port, devnode, fd);
-		if (maple_port < 3)
-			maple_port++;
-		EvdevGamepadDevice::AddDevice(gamepad);
+	char buf[32];
+	strcpy(buf, "maple_");
+	strcat(buf, devnode);
+	int defport = cfgLoadInt("input", buf, 12345);
+	if (defport != 12345) {
+		int fd = open(devnode, O_RDWR);
+		if (fd >= 0)
+		{
+			std::shared_ptr<EvdevGamepadDevice> gamepad = std::make_shared<EvdevGamepadDevice>(maple_port, devnode, fd);
+			if (maple_port < 3)
+				maple_port++;
+			EvdevGamepadDevice::AddDevice(gamepad);
+		}
 	}
 }
 
--- a/core/input/gamepad_device.cpp
+++ b/core/input/gamepad_device.cpp
@@ -263,21 +263,7 @@
 
 std::string GamepadDevice::make_mapping_filename(bool instance)
 {
-	std::string mapping_file = api_name() + "_" + name();
-	if (instance)
-		mapping_file += "-" + _unique_id;
-	std::replace(mapping_file.begin(), mapping_file.end(), '/', '-');
-	std::replace(mapping_file.begin(), mapping_file.end(), '\\', '-');
-	std::replace(mapping_file.begin(), mapping_file.end(), ':', '-');
-	std::replace(mapping_file.begin(), mapping_file.end(), '?', '-');
-	std::replace(mapping_file.begin(), mapping_file.end(), '*', '-');
-	std::replace(mapping_file.begin(), mapping_file.end(), '|', '-');
-	std::replace(mapping_file.begin(), mapping_file.end(), '"', '-');
-	std::replace(mapping_file.begin(), mapping_file.end(), '<', '-');
-	std::replace(mapping_file.begin(), mapping_file.end(), '>', '-');
-	mapping_file += ".cfg";
-
-	return mapping_file;
+	return "controller_P" + std::to_string(maple_port()+1) + ".cfg";
 }
 
 bool GamepadDevice::find_mapping(const char *custom_mapping /* = nullptr */)

--- a/core/sdl/sdl_gamepad.h
+++ b/core/sdl/sdl_gamepad.h
@@ -52,7 +52,7 @@
 	{
 		_name = SDL_JoystickName(sdl_joystick);
 		sdl_joystick_instance = SDL_JoystickInstanceID(sdl_joystick);
-		_unique_id = "sdl_joystick_" + std::to_string(sdl_joystick_instance);
+		_unique_id = _name + "_" + std::to_string(maple_port);
 		INFO_LOG(INPUT, "SDL: Opened joystick %d on port %d: '%s' unique_id=%s", sdl_joystick_instance, maple_port, _name.c_str(), _unique_id.c_str());
 
 		if (!find_mapping())
