diff --git a/Src/OSD/Unix/FileSystemPath.cpp b/Src/OSD/Unix/FileSystemPath.cpp
index 42bffb6..74bf37f 100644
--- a/Src/OSD/Unix/FileSystemPath.cpp
+++ b/Src/OSD/Unix/FileSystemPath.cpp
@@ -51,7 +51,7 @@ namespace FileSystemPath
     std::string GetPath(PathType pathType)
     {
         std::string finalPath;
-        std::string homePath;
+        std::string homePath = "/userdata";
         std::string strPathType;
         struct passwd* pwd = getpwuid(getuid());
 
@@ -81,76 +81,48 @@ namespace FileSystemPath
             break;
         }
 
-        // Get user's HOME directory
-        if (pwd)
+        // Use batocera directories
+        if (pathType == Analysis)
         {
-            homePath = pwd->pw_dir;
+            finalPath = Util::Format() << homePath << "/system/configs/supermodel/" << strPathType;
         }
-        else
+
+        if (pathType == Config)
         {
-            const char *envHome = getenv("HOME");
-            homePath = envHome == NULL ? std::string() : envHome;
+            finalPath = Util::Format() << homePath << "/system/configs/supermodel";
         }
 
-        // If Config path exists in current directory or the user doesn't have a HOME directory use current directory
-        if (FileSystemPath::PathExists("Config") || homePath.empty())
+        if (pathType == Log)
         {
-            // Use current directory
-            if (pathType != Screenshots && pathType != Log)
-            {
-                finalPath = strPathType;
-                FileSystemPath::MakeDir(finalPath);
-            }
+            finalPath = Util::Format() << homePath << "/system/logs";
         }
-        // Check if $HOME/.supermodel exists
-        else if (FileSystemPath::PathExists(Util::Format() << homePath << "/.supermodel"))
+
+        if (pathType == NVRAM)
         {
-            // Use $HOME/.supermodel
-            finalPath = Util::Format() << homePath << "/.supermodel/" << strPathType;
-            FileSystemPath::MakeDir(finalPath);
+            finalPath = Util::Format() << homePath << "/saves/supermodel/" << strPathType;
         }
-        // On Linux one may want to follow the XDG base directory specs (https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html)
-        else
-        {
-            // Use $HOME/.config/supermodel or $HOME/.local/share/supermodel depending on the file type
-            if (pathType == Config)
-            {
-                finalPath = Util::Format() << homePath << "/.config/supermodel";
-                if (!FileSystemPath::PathExists(finalPath))
-                {
-                    const char *envConfig = getenv("XDG_CONFIG_HOME");
-                    std::string configPath = (envConfig == NULL ? std::string() : envConfig);
-		    if (!configPath.empty())
-		    {
-		        finalPath = Util::Format() << configPath << "/supermodel";
-	            }
-                }
-		FileSystemPath::MakeDir(finalPath);
-
-		finalPath = Util::Format() << finalPath << "/Config";
-		FileSystemPath::MakeDir(finalPath);
-            }
-            else
-            {
-                finalPath = Util::Format() << homePath << "/.local/share/supermodel";
-                if (!FileSystemPath::PathExists(finalPath))
-                {
-		    const char *envData = getenv("XDG_DATA_HOME");
-                    std::string dataPath = (envData == NULL ? std::string() : envData);
-		    if (!dataPath.empty())
-		    {
-		        finalPath = Util::Format() << dataPath << "/supermodel";
-	            }
-                }
-		FileSystemPath::MakeDir(finalPath);
 
-		finalPath = Util::Format() << finalPath << "/" << strPathType;
-		FileSystemPath::MakeDir(finalPath);
-            }
+        if (pathType == Saves)
+        {
+            finalPath = Util::Format() << homePath << "/saves/supermodel/" << strPathType;
         }
+        if (pathType == Screenshots)
+        {
+            finalPath = Util::Format() << homePath << "/screenshots/supermodel";
+        }
+        if (pathType == Assets)
+        {
+            finalPath = Util::Format() << homePath << "/system/configs/supermodel/Assets";
+        }
+
 
         if (!finalPath.empty())
         {
+            // If directory doesn't exist, create it
+            if (!FileSystemPath::PathExists(finalPath))
+            {
+                mkdir(finalPath.c_str(), 0775);
+            }
             finalPath = Util::Format() << finalPath << "/";
         }
         return finalPath;
-- 
2.48.1

