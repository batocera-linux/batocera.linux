diff -u -r a/rpcs3/main.cpp b/rpcs3/main.cpp
--- a/rpcs3/main.cpp	2021-03-02 14:32:31.010113812 +0100
+++ b/rpcs3/main.cpp	2021-03-02 14:35:20.407948880 +0100
@@ -17,6 +17,7 @@
 #include "rpcs3qt/gui_application.h"
 #include "rpcs3qt/fatal_error_dialog.h"
 #include "rpcs3qt/curl_handle.h"
+#include "rpcs3qt/main_window.h"
 
 #include "headless_application.h"
 #include "Utilities/sema.h"
@@ -190,6 +191,7 @@
 constexpr auto arg_error      = "error";
 constexpr auto arg_updating   = "updating";
 constexpr auto arg_commit_db  = "get-commit-db";
+constexpr auto arg_installfw  = "installfw";
 
 int find_arg(std::string arg, int& argc, char* argv[])
 {
@@ -481,6 +483,8 @@
 	parser.addOption(QCommandLineOption(arg_stylesheet, "Loads a custom stylesheet.", "path", ""));
 	const QCommandLineOption config_option(arg_config, "Forces the emulator to use this configuration file.", "path", "");
 	parser.addOption(config_option);
+	const QCommandLineOption installfw_option(arg_installfw, "Forces the emulator to install this firmware file.", "path", "");
+	parser.addOption(installfw_option);
 	parser.addOption(QCommandLineOption(arg_q_debug, "Log qDebug to RPCS3.log."));
 	parser.addOption(QCommandLineOption(arg_error, "For internal usage."));
 	parser.addOption(QCommandLineOption(arg_updating, "For internal usage."));
@@ -736,6 +740,33 @@
 		Emu.SetConfigOverride(config_override_path);
 	}
 
+	std::string firmware_path;
+
+	if (parser.isSet(arg_installfw))
+	{
+		firmware_path = parser.value(installfw_option).toStdString();
+		if (!fs::is_file(firmware_path))
+		{
+			report_fatal_error(fmt::format("No firmware file found: %s", firmware_path));
+			return 0;
+		}
+	}
+
+	// Force install firmware first if specified through command-line
+	if (fs::is_file(firmware_path))
+	{
+		if (auto gui_app = qobject_cast<gui_application*>(app.data()))
+		{
+			main_window* main_window = gui_app->m_main_window;
+			if (!main_window)
+			{
+				report_fatal_error("Cannot install firmware, exiting !");
+				return 0;
+			}
+			main_window->InstallFirmware(QString::fromStdString(firmware_path));
+		}
+	}
+
 	for (const auto& opt : parser.optionNames())
 	{
 		sys_log.notice("Option passed via command line: %s = %s", opt.toStdString(), parser.value(opt).toStdString());
diff -u -r a/rpcs3/rpcs3qt/main_window.cpp b/rpcs3/rpcs3qt/main_window.cpp
--- a/rpcs3/rpcs3qt/main_window.cpp	2021-03-02 14:32:31.014129709 +0100
+++ b/rpcs3/rpcs3qt/main_window.cpp	2021-03-02 14:36:20.037202475 +0100
@@ -774,6 +774,19 @@
 	}
 }
 
+void main_window::InstallFirmware(QString file_path)
+{
+	// Command-line based firmware install
+        if (!file_path.isEmpty())
+        {
+                // Handle the actual installation with a timeout. Otherwise the source explorer instance is not usable during the following file processing.
+                QTimer::singleShot(0, [this, file_path]()
+                {
+                        HandlePupInstallation(file_path);
+                });
+        }
+}
+
 void main_window::HandlePupInstallation(QString file_path)
 {
 	if (file_path.isEmpty())
diff -u -r a/rpcs3/rpcs3qt/main_window.h b/rpcs3/rpcs3qt/main_window.h
--- a/rpcs3/rpcs3qt/main_window.h	2021-03-02 14:32:31.014129709 +0100
+++ b/rpcs3/rpcs3qt/main_window.h	2021-03-02 14:36:46.479080667 +0100
@@ -82,6 +82,7 @@
 public:
 	explicit main_window(std::shared_ptr<gui_settings> gui_settings, std::shared_ptr<emu_settings> emu_settings, std::shared_ptr<persistent_settings> persistent_settings, QWidget *parent = 0);
 	bool Init();
+	void InstallFirmware(QString path);
 	~main_window();
 	QIcon GetAppIcon();
 
