diff --git a/rpcs3/main.cpp b/rpcs3/main.cpp
index e6731b91d..3cf782992 100644
--- a/rpcs3/main.cpp
+++ b/rpcs3/main.cpp
@@ -12,6 +12,7 @@
 
 #include "rpcs3qt/gui_application.h"
 #include "rpcs3qt/fatal_error_dialog.h"
+#include "rpcs3qt/main_window.h"
 
 #include "headless_application.h"
 #include "Utilities/sema.h"
@@ -174,6 +175,7 @@ const char* arg_stylesheet = "stylesheet";
 const char* arg_config     = "config";
 const char* arg_error      = "error";
 const char* arg_updating   = "updating";
+const char* arg_installfw  = "installfw";
 
 int find_arg(std::string arg, int& argc, char* argv[])
 {
@@ -423,6 +425,8 @@ int main(int argc, char** argv)
 	parser.addOption(QCommandLineOption(arg_stylesheet, "Loads a custom stylesheet.", "path", ""));
 	const QCommandLineOption config_option(arg_config, "Forces the emulator to use this configuration file.", "path", "");
 	parser.addOption(config_option);
+	const QCommandLineOption installfw_option(arg_installfw, "Forces the emulator to install this firmware file.", "path", "");
+	parser.addOption(installfw_option);
 	parser.addOption(QCommandLineOption(arg_error, "For internal usage."));
 	parser.addOption(QCommandLineOption(arg_updating, "For internal usage."));
 	parser.process(app->arguments());
@@ -485,6 +489,33 @@ int main(int argc, char** argv)
 		Emu.SetConfigOverride(config_override_path);
 	}
 
+	std::string firmware_path;
+
+	if (parser.isSet(arg_installfw))
+	{
+		firmware_path = parser.value(installfw_option).toStdString();
+		if (!fs::is_file(firmware_path))
+		{
+			report_fatal_error(fmt::format("No firmware file found: %s", firmware_path));
+			return 0;
+		}
+	}
+
+	// Force install firmware first if specified through command-line
+	if (fs::is_file(firmware_path))
+	{
+		if (auto gui_app = qobject_cast<gui_application*>(app.data()))
+		{
+			main_window* main_window = gui_app->m_main_window;
+			if (!main_window)
+			{
+				report_fatal_error("Cannot install firmware, exiting !");
+				return 0;
+			}
+			main_window->InstallFirmware(QString::fromStdString(firmware_path));
+		}
+	}
+
 	for (const auto& opt : parser.optionNames())
 	{
 		sys_log.notice("Option passed via command line: %s = %s", opt.toStdString(), parser.value(opt).toStdString());
diff --git a/rpcs3/rpcs3qt/main_window.cpp b/rpcs3/rpcs3qt/main_window.cpp
index 08e3b670c..212632b79 100644
--- a/rpcs3/rpcs3qt/main_window.cpp
+++ b/rpcs3/rpcs3qt/main_window.cpp
@@ -711,6 +711,19 @@ void main_window::InstallPup(QString file_path)
 	}
 }
 
+void main_window::InstallFirmware(QString file_path)
+{
+	// Command-line based firmware install
+        if (!file_path.isEmpty())
+        {
+                // Handle the actual installation with a timeout. Otherwise the source explorer instance is not usable during the following file processing.
+                QTimer::singleShot(0, [this, file_path]()
+                {
+                        HandlePupInstallation(file_path);
+                });
+        }
+}
+
 void main_window::HandlePupInstallation(QString file_path)
 {
 	if (file_path.isEmpty())
diff --git a/rpcs3/rpcs3qt/main_window.h b/rpcs3/rpcs3qt/main_window.h
index 8cd358577..e23a68d21 100644
--- a/rpcs3/rpcs3qt/main_window.h
+++ b/rpcs3/rpcs3qt/main_window.h
@@ -76,6 +76,7 @@ class main_window : public QMainWindow
 public:
 	explicit main_window(std::shared_ptr<gui_settings> gui_settings, std::shared_ptr<emu_settings> emu_settings, std::shared_ptr<persistent_settings> persistent_settings, QWidget *parent = 0);
 	void Init();
+	void InstallFirmware(QString path);
 	~main_window();
 	QIcon GetAppIcon();
 
