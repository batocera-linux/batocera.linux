diff '--color=auto' -uri pacman-5.2.2-lbrpdx/src/pacman/conf.h pacman-5.2.2/src/pacman/conf.h
--- pacman-5.2.2-lbrpdx/src/pacman/conf.h	2020-06-22 01:33:22.000000000 -0700
+++ pacman-5.2.2/src/pacman/conf.h	2024-01-24 15:40:39.640544556 -0800
@@ -138,6 +138,8 @@
 	colstr_t colstr;
 
 	alpm_list_t *repos;
+
+    	unsigned short xml;
 } config_t;
 
 /* Operations */
@@ -210,7 +212,8 @@
 	OP_DOWNLOADONLY,
 	OP_REFRESH,
 	OP_ASSUMEINSTALLED,
-	OP_DISABLEDLTIMEOUT
+	OP_DISABLEDLTIMEOUT,
+	OP_XML
 };
 
 /* clean method */
diff '--color=auto' -uri pacman-5.2.2-lbrpdx/src/pacman/package.c pacman-5.2.2/src/pacman/package.c
--- pacman-5.2.2-lbrpdx/src/pacman/package.c	2020-06-22 01:33:22.000000000 -0700
+++ pacman-5.2.2/src/pacman/package.c	2024-01-24 15:43:28.018839826 -0800
@@ -27,6 +27,9 @@
 #include <time.h>
 #include <wchar.h>
 
+#include <search.h>
+#include <argz.h>
+
 #include <alpm.h>
 #include <alpm_list.h>
 
@@ -522,12 +525,16 @@
 int dump_pkg_search(alpm_db_t *db, alpm_list_t *targets, int show_status)
 {
 	int freelist = 0;
-	alpm_db_t *db_local;
+	alpm_db_t *db_local = NULL;
 	alpm_list_t *i, *searchlist;
 	unsigned short cols;
 	const colstr_t *colstr = &config->colstr;
+	ENTRY item;
+	ENTRY *found_item;
+	char *protected_string;
+	size_t n = 2048;
 
-	if(show_status) {
+	if(show_status || config->xml) {
 		db_local = alpm_get_localdb(config->handle);
 	}
 
@@ -543,10 +550,93 @@
 		return 1;
 	}
 
+	if(config->xml) {
+	  (void) hcreate(1000);
+	  if((protected_string = (char*) malloc(2048 * sizeof(char))) == NULL) {
+	    return 1;
+	  }
+
+	  // get installed packages
+	  alpm_pkg_t *pkg = NULL;
+	  for(i = alpm_db_get_pkgcache(db_local); i; i = alpm_list_next(i)) {
+	    pkg = i->data;
+	    item.key = strdup(alpm_pkg_get_name(pkg));
+	    item.data = pkg;
+	    (void) hsearch(item, ENTER);
+	  }
+	}
+
 	cols = getcols();
 	for(i = searchlist; i; i = alpm_list_next(i)) {
 		alpm_pkg_t *pkg = i->data;
+		alpm_pkg_t *installed_pkg;
 
+		if(config->xml) {
+		  alpm_list_t *lst;
+		  alpm_list_t *k;
+
+		  item.key = alpm_pkg_get_name(pkg);
+		  found_item = hsearch(item, FIND);
+		  installed_pkg = NULL;
+		  if(found_item != NULL) {
+		    installed_pkg = (alpm_pkg_t*)(found_item->data);
+		  }
+
+		  printf("  <package>\n");
+		  strncpy(protected_string, alpm_pkg_get_name(pkg), 2048);
+		  argz_replace(&protected_string, &n, "<", "&lt;", NULL);
+		  argz_replace(&protected_string, &n, ">", "&gt;", NULL);
+		  printf("    <name>%s</name>\n",               protected_string);
+		  printf("    <repository>%s</repository>\n",   alpm_db_get_name(db));
+		  printf("    <available_version>%s</available_version>\n",         alpm_pkg_get_version(pkg));
+		  strncpy(protected_string, alpm_pkg_get_desc(pkg), 2048);
+		  argz_replace(&protected_string, &n, "&", "&amp;", NULL);
+		  argz_replace(&protected_string, &n, "\"", "&quot;", NULL);
+		  argz_replace(&protected_string, &n, "'", "&apos;", NULL);
+		  argz_replace(&protected_string, &n, "<", "&lt;", NULL);
+		  argz_replace(&protected_string, &n, ">", "&gt;", NULL);
+		  printf("    <description>%s</description>\n", protected_string);
+		  printf("    <url>%s</url>\n",                 alpm_pkg_get_url(pkg));
+		  strncpy(protected_string, alpm_pkg_get_packager(pkg), 2048);
+		  argz_replace(&protected_string, &n, "<", "&lt;", NULL);
+		  argz_replace(&protected_string, &n, ">", "&gt;", NULL);
+		  printf("    <packager>%s</packager>\n",  protected_string);
+		  printf("    <download_size>%ld</download_size>\n",   alpm_pkg_get_size(pkg)/1024);
+		  printf("    <installed_size>%ld</installed_size>\n", alpm_pkg_get_isize(pkg)/1024);
+		  printf("    <arch>%s</arch>\n",                      alpm_pkg_get_arch(pkg));
+
+		  if(!strcmp(alpm_db_get_name(db),"batocera")){
+		    snprintf(protected_string, 2048, "https://store.batocera.org/thumbnails/%s.png", alpm_pkg_get_name(pkg));
+		    argz_replace(&protected_string, &n, "<", "&lt;", NULL);
+		    argz_replace(&protected_string, &n, ">", "&gt;", NULL);
+		    printf("    <preview_url>%s</preview_url>\n", protected_string);
+		  }
+
+		  if(installed_pkg == NULL) {
+		    printf("    <status>none</status>\n");
+		  } else {
+		    alpm_pkg_t *newpkg = alpm_sync_get_new_version(installed_pkg, alpm_get_syncdbs(config->handle));
+		    if(newpkg == NULL) {
+		      printf("    <status version=\"%s\" need_update=\"false\">installed</status>\n", alpm_pkg_get_version(installed_pkg));
+		    } else {
+		      printf("    <status version=\"%s\" need_update=\"true\">installed</status>\n", alpm_pkg_get_version(installed_pkg));
+		    }
+		  }
+
+		  if((lst = alpm_pkg_get_groups(pkg)) != NULL) {
+		    for(k = lst; k; k = alpm_list_next(k)) {
+		      const char *elt = k->data;
+		      printf("    <group>%s</group>\n", elt);
+		    }
+		  }
+		  if((lst = alpm_pkg_get_licenses(pkg)) != NULL) {
+		    for(k = lst; k; k = alpm_list_next(k)) {
+		      const char *elt = k->data;
+		      printf("    <license>%s</license>\n", elt);
+		    }
+		  }
+		  printf("  </package>\n");
+		} else {
 		if(config->quiet) {
 			fputs(alpm_pkg_get_name(pkg), stdout);
 		} else {
@@ -555,6 +645,7 @@
 					colstr->version, alpm_pkg_get_version(pkg), colstr->nocolor);
 
 			print_groups(pkg);
+			printf(" <%s>", alpm_pkg_get_arch(pkg)); // Batocera architecture
 			if(show_status) {
 				print_installed(db_local, pkg);
 			}
@@ -564,6 +655,12 @@
 			indentprint(alpm_pkg_get_desc(pkg), 4, cols);
 		}
 		fputc('\n', stdout);
+		}
+	}
+
+	if(config->xml) {
+	  hdestroy();
+	  free(protected_string);
 	}
 
 	/* we only want to free if the list was a search list */
diff '--color=auto' -uri pacman-5.2.2-lbrpdx/src/pacman/pacman.c pacman-5.2.2/src/pacman/pacman.c
--- pacman-5.2.2-lbrpdx/src/pacman/pacman.c	2020-06-22 01:33:22.000000000 -0700
+++ pacman-5.2.2/src/pacman/pacman.c	2024-01-24 15:40:39.640544556 -0800
@@ -222,6 +222,7 @@
 		addlist(_("      --logfile <path> set an alternate log file\n"));
 		addlist(_("      --noconfirm      do not ask for any confirmation\n"));
 		addlist(_("      --confirm        always ask for confirmation\n"));
+		addlist(_("      --xml            xml output\n"));
 		addlist(_("      --disable-download-timeout\n"
 		          "                       use relaxed timeouts for download\n"));
 	}
@@ -441,6 +442,9 @@
 		case OP_CONFIRM:
 			config->noconfirm = 0;
 			break;
+		case OP_XML:
+			config->xml = 1;
+			break;
 		case OP_DBPATH:
 		case 'b':
 			free(config->dbpath);
@@ -921,6 +925,7 @@
 		{"refresh",    no_argument,       0, OP_REFRESH},
 		{"noconfirm",  no_argument,       0, OP_NOCONFIRM},
 		{"confirm",    no_argument,       0, OP_CONFIRM},
+		{"xml",        no_argument,       0, OP_XML},
 		{"config",     required_argument, 0, OP_CONFIG},
 		{"ignore",     required_argument, 0, OP_IGNORE},
 		{"assume-installed",     required_argument, 0, OP_ASSUMEINSTALLED},
diff '--color=auto' -uri pacman-5.2.2-lbrpdx/src/pacman/sync.c pacman-5.2.2/src/pacman/sync.c
--- pacman-5.2.2-lbrpdx/src/pacman/sync.c	2020-06-22 01:33:22.000000000 -0700
+++ pacman-5.2.2/src/pacman/sync.c	2024-01-24 15:40:39.640544556 -0800
@@ -309,11 +309,20 @@
 	alpm_list_t *i;
 	int found = 0;
 
+	 if(config->xml) {
+	   printf("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
+	   printf("<packages>\n");
+	 }
+
 	for(i = syncs; i; i = alpm_list_next(i)) {
 		alpm_db_t *db = i->data;
 		found += !dump_pkg_search(db, targets, 1);
 	}
 
+	 if(config->xml) {
+	   printf("</packages>\n");
+	 }
+
 	return (found == 0);
 }
 
