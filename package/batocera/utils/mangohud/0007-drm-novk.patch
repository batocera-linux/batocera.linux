diff --git a/meson.build b/meson.build
index e5cf395..6134146 100644
--- a/meson.build
+++ b/meson.build
@@ -88,7 +88,8 @@ if is_unixy
   dep_wayland_client = dependency('wayland-client',
       required: get_option('with_wayland'), version : '>=1.11')
   dbus_dep = dependency('dbus-1', required: get_option('with_dbus')).partial_dependency(compile_args : true, includes : true)
-  dep_libdrm = dependency('libdrm', required: get_option('with_libdrm_amdgpu')).partial_dependency(compile_args : true, includes : true)
+  dep_libdrm = dependency('libdrm', required: false).partial_dependency(compile_args : true, includes : true)
+#  dep_libdrm = dependency('libdrm', required: get_option('with_libdrm_amdgpu')).partial_dependency(compile_args : true, includes : true)
 #  dep_libdrm_amdgpu = dependency('libdrm_amdgpu', version : '>=2.4.79', required: get_option('with_libdrm_amdgpu')).partial_dependency(compile_args : true, includes : true)
 else
   dep_x11 = null_dep
@@ -107,8 +108,8 @@ if dep_wayland_client.found()
   vulkan_wsi_deps += dep_wayland_client
 endif
 
-if is_unixy and not dep_x11.found() and not dep_wayland_client.found()
-  error('At least one of "with_x11" and "with_wayland" should be enabled')
+if is_unixy and not dep_x11.found() and not dep_wayland_client.found() and not dep_libdrm.found()
+  error('At least one of "with_x11" and "with_wayland" should be enabled or libdrm must be found')
 endif
 
 inc_common = [
@@ -190,6 +191,7 @@ else
   dep_rt = null_dep
 endif
 
+if get_option('use_vulkan')
 if dep_vulkan.found()
   datadir = get_option('vulkan_datadir')
   if datadir == ''
@@ -214,6 +216,9 @@ vk_enum_to_str = custom_target(
     '--outdir', meson.current_build_dir()
   ],
 )
+else
+  vk_enum_to_str = []
+endif
 
 util_files = files(
   'src/mesa/util/os_socket.c',
diff --git a/meson_options.txt b/meson_options.txt
index 17dfa03..973455a 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -11,6 +11,7 @@ option('with_nvml', type : 'combo', value : 'enabled', choices: ['enabled', 'sys
 option('with_xnvctrl', type : 'feature', value : 'enabled', description: 'Enable XNVCtrl support')
 option('with_x11', type : 'feature', value : 'enabled')
 option('with_wayland', type : 'feature', value : 'disabled')
+option('use_vulkan', type : 'boolean', value : 'true')
 option('with_dbus', type : 'feature', value : 'enabled')
 option('with_dlsym', type : 'feature', value : 'disabled')
 option('with_libdrm_amdgpu', type : 'feature', value : 'enabled', description: 'Get amdgpu sensor info through libdrm_amdgpu')
diff --git a/src/gl/inject_egl.cpp b/src/gl/inject_egl.cpp
index 6499d10..b3396a0 100644
--- a/src/gl/inject_egl.cpp
+++ b/src/gl/inject_egl.cpp
@@ -25,6 +25,10 @@ void* get_egl_proc_address(const char* name) {
             SPDLOG_ERROR("Failed to open " MANGOHUD_ARCH " libEGL.so.1: {}", dlerror());
         } else {
             pfn_eglGetProcAddress = reinterpret_cast<decltype(pfn_eglGetProcAddress)>(real_dlsym(handle, "eglGetProcAddress"));
+
+ 	    if(gladLoadGLES2Loader((GLADloadproc)pfn_eglGetProcAddress) == 0) {
+	      pfn_eglGetProcAddress = nullptr;
+	    }
         }
     }
 
@@ -69,7 +73,9 @@ EXPORT_C_(unsigned int) eglSwapBuffers( void* dpy, void* surf)
         using namespace std::chrono_literals;
         if (fps_limit_stats.targetFrameTime > 0s){
             fps_limit_stats.frameStart = Clock::now();
+#ifdef HAVE_VULKAN
             FpsLimiter(fps_limit_stats);
+#endif
             fps_limit_stats.frameEnd = Clock::now();
         }
     }
diff --git a/src/gl/inject_glx.cpp b/src/gl/inject_glx.cpp
index e56fc15..33b001c 100644
--- a/src/gl/inject_glx.cpp
+++ b/src/gl/inject_glx.cpp
@@ -161,7 +161,9 @@ EXPORT_C_(void) glXSwapBuffers(void* dpy, void* drawable) {
     using namespace std::chrono_literals;
     if (!is_blacklisted() && fps_limit_stats.targetFrameTime > 0s){
         fps_limit_stats.frameStart = Clock::now();
+#ifdef HAVE_VULKAN
         FpsLimiter(fps_limit_stats);
+#endif
         fps_limit_stats.frameEnd = Clock::now();
     }
 }
@@ -178,7 +180,9 @@ EXPORT_C_(int64_t) glXSwapBuffersMscOML(void* dpy, void* drawable, int64_t targe
     using namespace std::chrono_literals;
     if (!is_blacklisted() && fps_limit_stats.targetFrameTime > 0s){
         fps_limit_stats.frameStart = Clock::now();
+#ifdef HAVE_VULKAN
         FpsLimiter(fps_limit_stats);
+#endif
         fps_limit_stats.frameEnd = Clock::now();
     }
     return ret;
diff --git a/src/hud_elements.cpp b/src/hud_elements.cpp
index 2235a68..6648745 100644
--- a/src/hud_elements.cpp
+++ b/src/hud_elements.cpp
@@ -467,6 +467,7 @@ void HudElements::engine_version(){
         ImGui::TableNextRow(); ImGui::TableNextColumn();
         ImGui::PushFont(HUDElements.sw_stats->font1);
         if (HUDElements.is_vulkan) {
+#ifdef HAVE_VULKAN
             if ((HUDElements.sw_stats->engine == EngineTypes::DXVK || HUDElements.sw_stats->engine == EngineTypes::VKD3D)){
                 ImGui::TextColored(HUDElements.colors.engine,
                     "%s/%d.%d.%d", HUDElements.sw_stats->engineVersion.c_str(),
@@ -480,6 +481,7 @@ void HudElements::engine_version(){
                     HUDElements.sw_stats->version_vk.minor,
                     HUDElements.sw_stats->version_vk.patch);
             }
+#endif
         } else {
             ImGui::TextColored(HUDElements.colors.engine,
                 "%d.%d%s", HUDElements.sw_stats->version_gl.major, HUDElements.sw_stats->version_gl.minor,
@@ -625,8 +627,10 @@ void HudElements::image(){
 
       HUDElements.image_infos.loaded = true;
       if (HUDElements.is_vulkan) {
+#ifdef HAVE_VULKAN
 	HUDElements.image_infos.vktexture = addTexture(value, &(HUDElements.image_infos.width), &(HUDElements.image_infos.height), maxwidth);
 	HUDElements.image_infos.valid = true;
+#endif
       } else {
         HUDElements.image_infos.valid = GL_LoadTextureFromFile(value.c_str(),
 							       &(HUDElements.image_infos.texture),
@@ -642,7 +646,9 @@ void HudElements::image(){
       ImGui::TableNextRow(); ImGui::TableNextColumn();
 
       if (HUDElements.is_vulkan) {
+#ifdef HAVE_VULKAN
 	ImGui::Image(HUDElements.image_infos.vktexture, ImVec2(HUDElements.image_infos.width, HUDElements.image_infos.height));
+#endif
       } else {
 	ImGui::Image((void*)(intptr_t)(HUDElements.image_infos.texture), ImVec2(HUDElements.image_infos.width, HUDElements.image_infos.height));
       }
@@ -656,8 +662,10 @@ void HudElements::background_image(){
     if(HUDElements.background_image_infos.loaded == false) {
       HUDElements.background_image_infos.loaded = true;
       if (HUDElements.is_vulkan) {
+#ifdef HAVE_VULKAN
 	HUDElements.background_image_infos.vktexture = addTexture(value, &(HUDElements.background_image_infos.width), &(HUDElements.background_image_infos.height), 0);
 	HUDElements.background_image_infos.valid = true;
+#endif
       } else {
         HUDElements.background_image_infos.valid = GL_LoadTextureFromFile(value.c_str(),
 							       &(HUDElements.background_image_infos.texture),
@@ -671,7 +679,9 @@ void HudElements::background_image(){
     // render the image
     if(HUDElements.background_image_infos.valid) {
       if (HUDElements.is_vulkan) {
+#ifdef HAVE_VULKAN
 	ImGui::GetBackgroundDrawList()->AddImage(HUDElements.background_image_infos.vktexture, ImVec2(0, 0), ImVec2(HUDElements.background_image_infos.width, HUDElements.background_image_infos.height));
+#endif
       } else {
 	ImGui::GetBackgroundDrawList()->AddImage((void*)(intptr_t)(HUDElements.background_image_infos.texture), ImVec2(0, 0), ImVec2(HUDElements.background_image_infos.width, HUDElements.background_image_infos.height));
       }
diff --git a/src/meson.build b/src/meson.build
index dfcca39..95e8f69 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -161,6 +161,10 @@ if is_unixy
   endif
 endif
 
+if get_option('use_vulkan')
+    pre_args += '-DHAVE_VULKAN'
+endif
+
 link_args = cc.get_supported_link_arguments(['-Wl,-Bsymbolic-functions', '-Wl,-z,relro', '-Wl,--exclude-libs,ALL', '-lGL'])
 # meson fails to check version-script so just force add
 link_args += '-Wl,--version-script,@0@'.format(join_paths(meson.current_source_dir(), 'mangohud.version'))
diff --git a/src/vulkan.cpp b/src/vulkan.cpp
index 9dcbe5f..eafe600 100644
--- a/src/vulkan.cpp
+++ b/src/vulkan.cpp
@@ -20,6 +20,7 @@
  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  * IN THE SOFTWARE.
  */
+#ifdef HAVE_VULKAN
 #ifdef _WIN32
 #include <windows.h>
 #endif
@@ -2156,3 +2157,4 @@ extern "C" VK_LAYER_EXPORT VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL overlay_GetI
    if (instance_data->vtable.GetInstanceProcAddr == NULL) return NULL;
    return instance_data->vtable.GetInstanceProcAddr(instance, funcName);
 }
+#endif
