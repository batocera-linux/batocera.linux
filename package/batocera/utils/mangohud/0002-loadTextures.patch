From 6ea7efc7c772a29d66adbff92de6017123801a93 Mon Sep 17 00:00:00 2001
From: Nicolas Adenis-Lamarre <nicolas.adenis.lamarre@gmail.com>
Date: Thu, 25 Nov 2021 22:04:42 +0000
Subject: [PATCH] loadTextures

Signed-off-by: Nicolas Adenis-Lamarre <nicolas.adenis.lamarre@gmail.com>
---
 src/loadTextures.cpp | 56 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 56 insertions(+)
 create mode 100644 src/loadTextures.cpp

diff --git a/src/loadTextures.cpp b/src/loadTextures.cpp
new file mode 100644
index 0000000..d2e8884
--- /dev/null
+++ b/src/loadTextures.cpp
@@ -0,0 +1,56 @@
+
+//#include "GL/gl.h"
+#define STB_IMAGE_IMPLEMENTATION
+#include "stb_image.h"
+#define STB_IMAGE_RESIZE_IMPLEMENTATION
+#include "stb_image_resize.h"
+
+bool GL_LoadTextureFromFile(const char* filename, GLuint* out_texture, int* out_width, int* out_height, int maxwidth)
+{
+  // load the image
+  int image_width = 0;
+  int image_height = 0;
+  int channels;
+  unsigned char* image_data = stbi_load(filename, &image_width, &image_height, &channels, STBI_rgb_alpha);
+  if (image_data == NULL)
+    return false;
+
+  // reduce the image
+  float ratio = 1;
+  if(image_width > maxwidth && maxwidth != 0) {
+    ratio = maxwidth / ((float) image_width);
+  }
+  int image_width_resized  = (float)(image_width * ratio);
+  int image_height_resized = (float)(image_height * ratio);
+  unsigned char* image_data_resized = (unsigned char*)malloc(image_width_resized * image_height_resized * 4);
+  stbir_resize_uint8(image_data,         image_width,         image_height, 0,
+		     image_data_resized, image_width_resized, image_height_resized, 0,
+		     4);
+  stbi_image_free(image_data);
+  if (image_data_resized == NULL)
+    return false;
+
+  // Create a OpenGL texture identifier
+  GLuint image_texture;
+  glGenTextures(1, &image_texture);
+  glBindTexture(GL_TEXTURE_2D, image_texture);
+
+  // Setup filtering parameters for display
+  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE); // This is required on WebGL for non power-of-two textures
+  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE); // Same
+
+  // Upload pixels into texture
+#if defined(GL_UNPACK_ROW_LENGTH) && !defined(__EMSCRIPTEN__)
+  glPixelStorei(GL_UNPACK_ROW_LENGTH, 0);
+#endif
+  glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, image_width_resized, image_height_resized, 0, GL_RGBA, GL_UNSIGNED_BYTE, image_data_resized);
+  stbi_image_free(image_data_resized);
+
+  *out_texture = image_texture;
+  *out_width   = image_width_resized;
+  *out_height  = image_height_resized;
+
+  return true;
+}
-- 
2.17.1

