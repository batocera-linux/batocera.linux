#!/bin/bash

set -x

ACTION=$1
shift

G_WINE_VERSION=$(wine --version)
G_SAVES_DIR="/userdata/saves/windows"
G_ROMS_DIR="/userdata/roms/windows"

PATH=$PATH:/usr/bin32
export LD_LIBRARY_PATH="/lib32:/lib32/wine:/lib:/usr/lib:/usr/lib/wine"
export LIBGL_DRIVERS_PATH="/lib32/dri:/usr/lib/dri"
export WINEDLLPATH="/lib32/wine/fakedlls:/usr/lib/wine/fakedlls"

usage() {
    echo "${1} play    	     <game>.iso"             >&2
    echo "${1} play    	     <game>.exe"             >&2
    echo "${1} play    	     <game>.wine"            >&2
    echo "${1} play    	     <game>.wine.squashfs"   >&2
    echo "${1} play    	     <game>.wtgz"            >&2
    echo "${1} install 	     <game>.iso"             >&2
    echo "${1} install 	     <game>.exe"             >&2
    echo "${1} tricks  	     <game>.wine directplay" >&2
    echo "${1} wine2squashfs <game.wine>"            >&2
    echo "${1} wine2winetgz  <game.wine>"            >&2
}

waitWineServer() {
    while pgrep /usr/bin/wineserver
    do
	echo "waiting wineserver" >&2
	sleep 1
    done
}

dxvk_install() {
    export WINEDLLOVERRIDES="winemenubuilder.exe="
    WINEPREFIX=$1

    # install dxvk only on system where it is available (aka, not x86)
    test -e "/usr/share/dxvk" || return 0

    DXVK="$(batocera-settings -command load -key windows.dxvk)"
    DXVK_HUD="$(batocera-settings -command load -key windows.dxvk_hud)"

    if test "${DXVK_HUD}" = 1
    then
	export DXVK_HUD=1
    fi

    if test "${DXVK}" = 1
    then
	if test -e "/userdata/system/dxvk"
	then
	    cp "/userdata/system/dxvk/x64/"{d3d11.dll,d3d10core.dll,d3d10.dll,d3d10_1.dll,d3d9.dll,dxgi.dll} "${WINEPREFIX}/drive_c/windows/system32" || return 1
            cp "/userdata/system/dxvk/x32/"{d3d11.dll,d3d10core.dll,d3d10.dll,d3d10_1.dll,d3d9.dll,dxgi.dll} "${WINEPREFIX}/drive_c/windows/syswow64" || return 1
	else
	    cp "/usr/share/dxvk/x64/"{d3d11.dll,d3d10core.dll,d3d10.dll,d3d10_1.dll,d3d9.dll,dxgi.dll} "${WINEPREFIX}/drive_c/windows/system32" || return 1
            cp "/usr/share/dxvk/x32/"{d3d11.dll,d3d10core.dll,d3d10.dll,d3d10_1.dll,d3d9.dll,dxgi.dll} "${WINEPREFIX}/drive_c/windows/syswow64" || return 1
	fi
    else
	cp "/usr/lib/wine/fakedlls/"{d3d11.dll,d3d10core.dll,d3d10.dll,d3d10_1.dll,d3d9.dll,dxgi.dll}   "${WINEPREFIX}/drive_c/windows/system32" || return 1
        cp "/lib32/wine/fakedlls/"{d3d11.dll,d3d10core.dll,d3d10.dll,d3d10_1.dll,d3d9.dll,dxgi.dll} "${WINEPREFIX}/drive_c/windows/syswow64" || return 1
    fi

    if test "${DXVK}" = 1
    then
	export WINEDLLOVERRIDES="${WINEDLLOVERRIDES};dxgi,d3d9,d3d10,d3d10_1,d3d10core,d3d11=n;nvapi64,nvapi="
    else
	export WINEDLLOVERRIDES="${WINEDLLOVERRIDES};dxgi,d3d9,d3d10,d3d10_1,d3d10core,d3d11=b"
    fi

    return 0
}

createWineDirectory() {
    WINEPREFIX=$1

    # already created
    test -e "${WINEPREFIX}" && return 0

    # please wait screen
    bsod-wine&
    BSODPID=$!
  
    mkdir -p "${WINEPREFIX}" || return 1

    if ! WINEPREFIX=${WINEPREFIX} wine hostname
    then
	rm -rf "${WINEPREFIX}"
	kill -15 ${BSODPID}
	return 1
    fi

    kill -15 ${BSODPID}

    return 0
}

getWine_var() {
    WINEPOINT=$1
    WINEVAR=$2
    WINEVALUE=$3

    if test -e "${WINEPOINT}/autorun.cmd"
    then
	VAL=$(grep "^${WINEVAR}=" "${WINEPOINT}/autorun.cmd" | sed -e s+"^${WINEVAR}="+""+ | head -1)
	if test -n "${VAL}"
	then
	    echo "${VAL}"
	else
	    echo "${WINEVALUE}"
	fi
    else
	echo "${WINEVALUE}"
    fi
}

play_wine() {
    GAMENAME=$1
    WINEPOINT="${GAMENAME}"

    WINE_CMD=$(getWine_var "${WINEPOINT}" "CMD" "explorer")
    WINE_DIR=$(getWine_var "${WINEPOINT}" "DIR" "")
    (cd "${WINEPOINT}/${WINE_DIR}" && WINEPREFIX=${WINEPOINT} wine ${WINE_CMD})
    waitWineServer
}

trick_wine() {
    GAMENAME=$1
    TRICK=$2
    WINEPOINT="${GAMENAME}"
    WINEPREFIX=${WINEPOINT} winetricks "${TRICK}"
}

#play_iso() {
#    GAMENAME=$1
#    # TODO
#}

play_exe() {
    GAMENAME=$1
    WINEPOINT="${G_SAVES_DIR}/"$(basename "${GAMENAME}")".wine"
    GAMEDIR=$(dirname "${GAMENAME}")
    GAMEEXE=$(basename "${GAMENAME}")

    createWineDirectory "${WINEPOINT}"
    dxvk_install "${WINEPREFIX}" || return 1

    (cd "${GAMEDIR}" && WINEPREFIX=${WINEPOINT} wine "${GAMEEXE}")
    waitWineServer
}

play_winetgz() {
    GAMENAME=$1

    WINEPOINT="${G_SAVES_DIR}/"$(basename "${GAMENAME}")".wine"
    if ! test -e "${WINEPOINT}"
    then
	mkdir -p "${WINEPOINT}" || return 1
	(cd "${WINEPOINT}" && gunzip -c "${GAMENAME}" | tar xf -) || return 1
    fi

    dxvk_install "${WINEPREFIX}" || return 1

    WINE_CMD=$(getWine_var "${WINEPOINT}" "CMD" "explorer")
    WINE_DIR=$(getWine_var "${WINEPOINT}" "DIR" "")
    (cd "${WINEPOINT}/${WINE_DIR}" && WINEPREFIX=${WINEPOINT} wine ${WINE_CMD})
    waitWineServer
}

play_squashfs() {
    GAMENAME=$1
    BASEGAMENAME=$(basename "${GAMENAME}")
    WINEPOINT="/var/run/wine/${BASEGAMENAME}"
    SQUASHFSPOINT="/var/run/wine/squashfs_${BASEGAMENAME}"
    SAVEPOINT="${G_SAVES_DIR}/${BASEGAMENAME}"
    WORKPOINT="${G_SAVES_DIR}/${BASEGAMENAME}.work"

    mkdir -p "${SAVEPOINT}" || return 1
    mkdir -p "${WORKPOINT}" || return 1
    mkdir -p "${WINEPOINT}" || return 1

    mkdir -p "${SQUASHFSPOINT}" || return 1
    if ! mount "${GAMENAME}" "${SQUASHFSPOINT}"
    then
	rmdir "${SQUASHFSPOINT}"
	rm -rf "${WORKPOINT}"
	rmdir "${WINEPOINT}"
	return 1
    fi

    if ! mount -t overlay overlay -o rw,lowerdir="${SQUASHFSPOINT}",upperdir="${SAVEPOINT}",workdir="${WORKPOINT}",index=on,redirect_dir=on "${WINEPOINT}"
    then
	umount "${SQUASHFSPOINT}"
	rmdir "${SQUASHFSPOINT}"
	rm -rf "${WORKPOINT}"
	rmdir "${WINEPOINT}"
    fi

    dxvk_install "${WINEPREFIX}" || return 1

    WINE_CMD=$(getWine_var "${WINEPOINT}" "CMD" "explorer")
    WINE_DIR=$(getWine_var "${WINEPOINT}" "DIR" "")
    (cd "${WINEPOINT}/${WINE_DIR}" && WINEPREFIX=${WINEPOINT} wine ${WINE_CMD})
    waitWineServer

    # try to clean the cdrom
    umount "${WINEPOINT}"
    umount "${SQUASHFSPOINT}"
    rmdir "${SQUASHFSPOINT}"
    rm -rf "${WORKPOINT}"
    rmdir "${WINEPOINT}"
}

init_cmd() {
    WINEPOINT=$1

    (
	echo "#DIR=drive_c/Program Files/myprogram"
	echo "#CMD=start.exe"
    ) > "${WINEPOINT}/autorun.cmd"
}

install_exe() {
    GAMENAME=$1
    BASEGAMENAME=$(basename "${GAMENAME}")
    GAMEDIR=$(dirname "${GAMENAME}")
    WINEPOINT=$(echo "${G_ROMS_DIR}/${BASEGAMENAME}" | sed -e s+"\.exe$"++)".wine"
    INSTALLERFILE="${BASEGAMENAME}"

    createWineDirectory "${WINEPOINT}"

    (cd "${GAMEDIR}" && WINEPREFIX=${WINEPOINT} wine "${INSTALLERFILE}")
    waitWineServer
    init_cmd "${WINEPOINT}"
}

install_msi() {
    GAMENAME=$1
    BASEGAMENAME=$(basename "${GAMENAME}")
    GAMEDIR=$(dirname "${GAMENAME}")
    WINEPOINT=$(echo "${G_ROMS_DIR}/${BASEGAMENAME}" | sed -e s+"\.msi$"++)".wine"
    INSTALLERFILE="${BASEGAMENAME}"

    createWineDirectory "${WINEPOINT}"

    (cd "${GAMEDIR}" && WINEPREFIX=${WINEPOINT} msiexec /i "${INSTALLERFILE}")
    waitWineServer
    init_cmd "${WINEPOINT}"
}

install_iso() {
    GAMENAME=$1
    BASEGAMENAME=$(basename "${GAMENAME}")
    GAMEISOMOUNT="/var/run/wine/${BASEGAMENAME}.cdrom"
    INSTALLERISO="${GAMENAME}"

    mkdir -p "${GAMEISOMOUNT}" || return 1
    if ! mount -t iso9660 "${INSTALLERISO}" "${GAMEISOMOUNT}"
    then
	rmdir "${GAMEISOMOUNT}"
	return 1
    fi

    WINEPOINT=$(echo "${G_ROMS_DIR}/${BASEGAMENAME}" | sed -e s+"\.iso$"++)".wine"

    createWineDirectory "${WINEPOINT}"
    
    if mkdir -p "${WINEPOINT}/dosdevices" && rm -f "${WINEPOINT}/dosdevices/d:" && ln -sf "${GAMEISOMOUNT}" "${WINEPOINT}/dosdevices/d:"
    then
	WINEPREFIX=${WINEPOINT} wine explorer "d:"
	rm -f "${WINEPOINT}/dosdevices/d:"
    fi

    waitWineServer
    init_cmd "${WINEPOINT}"

    # try to clean the cdrom
    umount "${GAMEISOMOUNT}"
    rmdir "${GAMEISOMOUNT}"
}

wine2squashfs() {
    GAMENAME=$1
    BASEGAMENAME=$(basename "${GAMENAME}")
    GAMEDIR="${GAMENAME}"
    SQUASHFSFILE="${G_ROMS_DIR}/${BASEGAMENAME}.squashfs"
    
    mksquashfs "${GAMEDIR}" "${SQUASHFSFILE}" || return 1
    return 0
}

wine2winetgz() {
    GAMENAME=$1
    BASEGAMENAME=$(basename "${GAMENAME}")
    GAMEDIR="${GAMENAME}"
    WINETGZFILE="${G_ROMS_DIR}/${BASEGAMENAME}.wtgz"

    (cd "${GAMEDIR}" && tar cf - * | gzip -c > "${WINETGZFILE}") || return 1
    return 0
}

gameext() {
    echo "${1}" | sed -e s+"^.*\.\([^\.]*\)$"+"\1"+ | tr A-Z a-z
}

cleanAndExit() {
    unclutter-remote -h

    RESNEW=$(batocera-resolution currentMode)
    if test "${RESNEW}" != "${G_RESCUR}"
    then
	batocera-resolution setMode "${G_RESCUR}"
    fi
    
    exit "${1}"
    # TODO : unmount always, trap, later
}

# show the mouse
unclutter-remote -s
trap "unclutter-remote -h" INT QUIT TERM

G_RESCUR=$(batocera-resolution currentMode)

case "${ACTION}" in
    "play")
	GAMENAME=$1
	GAMEEXT=$(gameext "${GAMENAME}")
	case "${GAMEEXT}" in
	    "wine")
		play_wine "${GAMENAME}" || cleanAndExit 1
		;;
	    "exe")
		play_exe "${GAMENAME}" || cleanAndExit 1
		;;
#	    "iso")
#		play_iso "${GAMENAME}" || cleanAndExit 1
#		;;
	    "squashfs")
		play_squashfs "${GAMENAME}" || cleanAndExit 1
		;;
	    "wtgz")
		play_winetgz "${GAMENAME}" || cleanAndExit 1
		;;
	    *)
		echo "unknown extension ${GAMEEXT}" >&2
		cleanAndExit 1
	esac
	;;
    "install")
	GAMENAME=$1
    	GAMEEXT=$(gameext "${GAMENAME}")
	case "${GAMEEXT}" in
	    "exe")
		install_exe "${GAMENAME}" || cleanAndExit 1
		;;
	    "msi")
		install_msi "${GAMENAME}" || cleanAndExit 1
		;;
	    "iso")
		install_iso "${GAMENAME}" || cleanAndExit 1
		;;
	    *)
		echo "unknown extension ${GAMEEXT}" >&2
		cleanAndExit 1
	esac
	;;
    "tricks")
	GAMENAME=$1
	TRICK=$2
    	GAMEEXT=$(gameext "${GAMENAME}")
	case "${GAMEEXT}" in
	    "wine")
		trick_wine "${GAMENAME}" "${TRICK}" || cleanAndExit 1
		;;
	esac
	;;
    "wine2squashfs")
	GAMENAME=$1
	wine2squashfs "${GAMENAME}" || exit 1
	;;
    "wine2winetgz")
	GAMENAME=$1
	wine2winetgz "${GAMENAME}" || exit 1
	;;
    *)
	set +x
	echo "unknown action ${ACTION}" >&2
	usage "${0}"
	cleanAndExit 1
esac
cleanAndExit 0
