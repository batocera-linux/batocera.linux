#!/bin/bash
SYSTEM=${1,,}                                                                        # windows, mugen, fpinball
ACTION=${2,,}                                                                        # play stop...
GAMENAME="$3"                                                                        # fullpath to game, gamedir+extension
TRICK=${4,,}                                                                         # WINE-tricks, see https://github.com/Winetricks/winetricks
ROMGAMENAME=$(basename "${GAMENAME}")                                                # gamedir or gameexecutable +extension, only
ROMBASEDIR=$(dirname "${GAMENAME}")                                                  # gamedir where the executeble is
GAMEEXT="${GAMENAME##*.}"                                                            # gameextension, used in case selections and to strip fileextensions
# log wineserver running time  
TIMESTAMP=$(date +%s)

## Folders
WINE_BOTTLE_DIR="/userdata/system/wine-bottles/${SYSTEM}"                            # Basestorage for points, more variables ini init_wine
G_ROMS_DIR="/userdata/roms/${SYSTEM}"                                                # Gamesdir, more variables in init_wine

## INIT_WINE VARS, these need to be prepared ini init_wine()
## Wine detection, for specific game or set general if no entry in batocera.conf
WINE_RUNNER=
WINE_VERSION=
## Wine executables, to be populated in init_wine() with find_wine_dir()
## variables heavily depend on DIR-entry, found in init_wine()
DIR=
USER_DIR=
WINE=
WINE64=
WINESERVER=
MSIEXEC=
WINETRICKS=

stopWineServer() {
    [[ -z "${WINESERVER}" || -z "${WINEPOINT}" ]] &&  exit 0

    #try to cleanly exit wineserver
    WINEPREFIX=${WINEPOINT} "${WINESERVER}" -k &

    #wait 10s for clean exit
    for i in {1..10}; do
        echo "waiting wineserver shutdown" >&2
        if ! pgrep -f "${WINESERVER}" ; then
            echo "wineserver has cleanly exited" >&2
            return 0
        fi
        sleep 1
    done

    #kill all process with wineprefix as envvar if wineserver is still not stopped
    declare -a PIDS

    # find all process with wineprefix environement
    for PID in $(ps -e -o pid=); do
        if grep -z "WINEPREFIX=${WINEPOINT}" "/proc/$PID/environ" 2>/dev/null; then
            PIDS+=("$PID")
        fi
    done

    # kill all pids
    if [ ${#PIDS[@]} -gt 0 ]; then
        echo "Killing stuck wine processes: ${PIDS[*]}"
        kill -9 "${PIDS[@]}"
    fi
    return 1
}

# Arguments: key, system, game
get_setting() {
    /usr/bin/batocera-settings-get "$2[\"$3\"].$1" "$2.$1" "global.$1"
}

find_wine_dir() {
    local WINE_VERSION="$1"
    # check if we're using a custom wine runner
    if [[ "$WINE_VERSION" != "wine-tkg" ]]; then
        # now check if the folder exists
        if [[ -e "/userdata/system/wine/custom/${WINE_VERSION}" ]]; then
            echo "/userdata/system/wine/custom"
        else
            WINE_VERSION="wine-tkg"
            if [[ -e "/usr/wine/${WINE_VERSION}" ]]; then
                echo "/usr/wine"
            else
                return 1
            fi
        fi
    elif [[ -e "/usr/wine/${WINE_VERSION}" ]]; then
        echo "/usr/wine"
    else
        return 1
    fi
}

update_wine_version() {
    local WINE_VERSION="$1"
    if [[ "$WINE_VERSION" != "wine-tkg" ]]; then
        if [[ -e "/userdata/system/wine/custom/${WINE_VERSION}" ]]; then
            echo "$WINE_VERSION"
        else
            WINE_VERSION="wine-tkg"
            echo "$WINE_VERSION"
        fi
    else
        echo "$WINE_VERSION"
    fi
}

waitWineServer() {
    echo "Waiting WineServer: ${WINESERVER}"
    wait $(pgrep -f "${WINESERVER}")
    echo "Finished waiting for WineServer: ${WINESERVER}"
}

wine_options() {
    WINEPOINT=$1
    ESYNC="$(get_setting esync "${SYSTEM}" "${ROMGAMENAME}")"
    FSYNC="$(get_setting fsync "${SYSTEM}" "${ROMGAMENAME}")"
    PBA="$(get_setting pba "${SYSTEM}" "${ROMGAMENAME}")"
    FSR="$(get_setting fsr "${SYSTEM}" "${ROMGAMENAME}")"
    FPS_LIMIT="$(get_setting fps_limit "${SYSTEM}" "${ROMGAMENAME}")"
    ALLOW_XIM="$(get_setting allow_xim "${SYSTEM}" "${ROMGAMENAME}")"
    NO_WRITE_WATCH="$(get_setting no_write_watch "${SYSTEM}" "${ROMGAMENAME}")"
    FORCE_LARGE_ADRESS="$(get_setting force_large_adress "${SYSTEM}" "${ROMGAMENAME}")"
    HEAP_DELAY_FREE="$(get_setting heap_delay_free "${SYSTEM}" "${ROMGAMENAME}")"
    HIDE_NVIDIA_GPU="$(get_setting hide_nvidia_gpu "${SYSTEM}" "${ROMGAMENAME}")"
    ENABLE_NVAPI="$(get_setting enable_nvapi "${SYSTEM}" "${ROMGAMENAME}")"
    ENABLE_HIDRAW="$(get_setting enable_hidraw "${SYSTEM}" "${ROMGAMENAME}")"
    DXVK_RESET_CACHE="$(get_setting dxvk_reset_cache "${SYSTEM}" "${ROMGAMENAME}")"
    WINE_NTFS="$(get_setting wine_ntfs "${SYSTEM}" "${ROMGAMENAME}")"
    WINE_DEBUG="$(get_setting wine_debug "${SYSTEM}" "${ROMGAMENAME}")"
    KEYBOARD="$(/usr/bin/batocera-settings-get system.kblayout)"
    VIRTUAL_DESKTOP="$(get_setting virtual_desktop "${SYSTEM}" "${ROMGAMENAME}")"
    VIRTUAL_DESKTOP_SIZE="$(get_setting videomode "${SYSTEM}" "${ROMGAMENAME}" || batocera-resolution currentResolution)"

    if [[ "${VIRTUAL_DESKTOP}" = 1 ]]; then
        VDESKTOP="explorer /desktop=Wine,${VIRTUAL_DESKTOP_SIZE}"
    fi

    export WINEESYNC=1
    [[ "${ESYNC}" = 0 ]] && WINEESYNC=0

    export WINEFSYNC=1
    [[ "${FSYNC}" = 0 ]] && WINEFSYNC=0

    export PBA_ENABLE=0
    [[ "${PBA}" = 1 ]] && PBA_ENABLE=1

    export DXVK_FRAME_RATE=0
    [[ "${FPS_LIMIT}" = 1 ]] && DXVK_FRAME_RATE=60

    export WINEDEBUG="-all"
    [[ "${WINE_DEBUG}" = 1 ]] && WINEDEBUG="err+all,fixme+all"

    export DXVK_LOG_LEVEL=none
    [[ "${WINE_DEBUG}" = 1 ]] && unset DXVK_LOG_LEVEL

    export VKD3D_DEBUG=none
    [[ "${WINE_DEBUG}" = 1 ]] && unset VKD3D_DEBUG

    export VKD3D_SHADER_DEBUG=none
    [[ "${WINE_DEBUG}" = 1 ]] && unset VKD3D_SHADER_DEBUG

    export VKD3D_SHADER_CACHE_PATH="/userdata/system/cache"

    export WINE_ENABLE_HIDRAW=0
    [[ "${ENABLE_HIDRAW}" = 1 ]] && WINE_ENABLE_HIDRAW=1

    export WINE_FULLSCREEN_FSR=0
    [[ "${FSR}" = 1 ]] && unset WINE_FULLSCREEN_FSR

    # Wine-mono override for FNA games
    export WINE_MONO_OVERRIDES="Microsoft.Xna.Framework.*,Gac=n"

    # Disable XIM support until libx11 >= 1.7 is widespread
    export WINE_ALLOW_XIM=0
    [[ "${ALLOW_XIM}" = 1 ]] && WINE_ALLOW_XIM=1

    # Advanced options from proton
    export WINE_DISABLE_WRITE_WATCH=0
    [[ "${NO_WRITE_WATCH}" = 1 ]] && WINE_DISABLE_WRITE_WATCH=1

    export WINE_LARGE_ADDRESS_AWARE=0
    [[ "${FORCE_LARGE_ADRESS}" = 1 ]] && WINE_LARGE_ADDRESS_AWARE=1

    export WINE_HEAP_DELAY_FREE=0
    [[ "${HEAP_DELAY_FREE}" = 1 ]] && WINE_HEAP_DELAY_FREE=1

    export WINE_HIDE_NVIDIA_GPU=0
    [[ "${HIDE_NVIDIA_GPU}" = 1 ]] && WINE_HIDE_NVIDIA_GPU=1

    export NVAPI=0
    [[ "${ENABLE_NVAPI}" = 1 ]] && NVAPI=1

    export DXVK_STATE_CACHE=1
    [[ "${DXVK_RESET_CACHE}" = 1 ]] && DXVK_STATE_CACHE=reset

    export NTFS_MODE=0
    [[ "${WINE_NTFS}" = 1 ]] && NTFS_MODE=1

    export STAGING_SHARED_MEMORY=1
    export ULIMIT_SIZE=1048576
    export USE_BUILTIN_VKD3D=0

    # Nvidia variables
    if [[ -e "/userdata/system/cache" ]]; then
        export XDG_CACHE_HOME="/userdata/system/cache"
    else
        mkdir -p "/userdata/system/cache"
        export XDG_CACHE_HOME="/userdata/system/cache"
    fi
    export __GL_SHADER_DISK_CACHE_SIZE=2147483648
    export __GL_SHADER_DISK_CACHE_SKIP_CLEANUP=1
    export __GL_SHADER_DISK_CACHE_PATH="${XDG_CACHE_HOME}"/nvidia

    if ! ulimit -n "${ULIMIT_SIZE}" 2>/dev/null; then
        export WINEESYNC=0
    fi

    setxkbmap "${KEYBOARD}"
}

redist_install() {
    WINEPREFIX=$1
    if [[ -e "${USER_DIR}/exe" ]]; then

        for file in ${USER_DIR}/exe/*.exe; do
            echo "Executing file $file"
                
            case "${file}" in

            "${USER_DIR}/exe/DXSETUP.exe" | "${USER_DIR}/exe/dxsetup.exe")
                WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /silent &>/dev/null || return 1
                "${WINESERVER}" -w
                ;;

            "${USER_DIR}/exe/vcredist_x64_2005.exe" | "${USER_DIR}/exe/vcredist_x86_2005.exe")
                WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /q &>/dev/null || return 1
                "${WINESERVER}" -w
                ;;

            "${USER_DIR}/exe/vcredist_x64_2008.exe" | "${USER_DIR}/exe/vcredist_x86_2008.exe")
                WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /q &>/dev/null || return 1
                "${WINESERVER}" -w
                ;;

            "${USER_DIR}/exe/vcredist_x64_2010.exe" | "${USER_DIR}/exe/vcredist_x86_2010.exe")
                WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
                "${WINESERVER}" -w
                ;;

            "${USER_DIR}/exe/vcredist_x64_2012.exe" | "${USER_DIR}/exe/vcredist_x86_2012.exe")
                WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
                "${WINESERVER}" -w
                ;;

            "${USER_DIR}/exe/vcredist_x64_2013.exe" | "${USER_DIR}/exe/vcredist_x86_2013.exe")
                WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
                "${WINESERVER}" -w
                ;;

            "${USER_DIR}/exe/vcredist_x64_2015.exe" | "${USER_DIR}/exe/vcredist_x86_2015.exe")
                WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
                "${WINESERVER}" -w
                ;;

            "${USER_DIR}/exe/vcredist_x64_2017.exe" | "${USER_DIR}/exe/vcredist_x86_2017.exe")
                WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
                "${WINESERVER}" -w
                ;;

            "${USER_DIR}/exe/vcredist_x64_2019.exe" | "${USER_DIR}/exe/vcredist_x86_2019.exe")
                WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
                "${WINESERVER}" -w
                ;;

            "${USER_DIR}/exe/vcredist_x64_2015_2019.exe" | "${USER_DIR}/exe/vcredist_x86_2015_2019.exe")
                WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
                "${WINESERVER}" -w
                ;;

            "${USER_DIR}/exe/vcredist_x64_2015_2022.exe" | "${USER_DIR}/exe/vcredist_x86_2015_2022.exe")
                WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
                "${WINESERVER}" -w
                ;;

            "${USER_DIR}/exe/oalinst.exe")
                WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /s &>/dev/null
                "${WINESERVER}" -w
                ;;

            *)
                WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" &>/dev/null
                "${WINESERVER}" -w
                ;;
            esac
        done

        mv "${USER_DIR}/exe" "${USER_DIR}/exe.bak" || return 1
    fi

    return 0
}

save_install() {
    WINEPREFIX=$1
    GAMENAME=$2
    WINE_SAVEDIR=$3
    WINE_SAVEFILES=$4

    if [[ -n "${WINE_SAVEDIR}" ]]; then
	GAME_SAVEDIR=$(dirname "${WINE_SAVEDIR}")
	GAME_SAVEDIR="${WINEPOINT}/${GAME_SAVEDIR}"
	BASEGAMENAME=$(basename "${GAMENAME}")
	BASEGAMENAME_NOEXT=${BASEGAMENAME%.*}
	SYSTEM_SAVEDIR="/userdata/saves/${SYSTEM}/${BASEGAMENAME_NOEXT}"
	WINE_SAVEDIR="${WINEPOINT}/${WINE_SAVEDIR}"

	#create save directory, or move existing savedir content
	if [[ ! -d "${SYSTEM_SAVEDIR}" ]]; then
	    if [[ -z "${WINE_SAVEFILES}" && ! -L "${WINE_SAVEDIR}" && -d "${WINE_SAVEDIR}" ]]; then
		mv "${WINE_SAVEDIR}" "${SYSTEM_SAVEDIR}"
	    else
		mkdir -p "${SYSTEM_SAVEDIR}"
	    fi
	fi

	#if no specific save files, symlink the whole wine_savedir directroy
	if [[ -z "${WINE_SAVEFILES}" ]]; then

	    if [[ ! -d "${GAME_SAVEDIR}" ]]; then
	        mkdir -p "${GAME_SAVEDIR}"
	    fi

	    if [[ ! -L "${WINE_SAVEDIR}" ]]; then
		rm -rf "${WINE_SAVEDIR}"
	    fi

	    ln -s "${SYSTEM_SAVEDIR}" "${WINE_SAVEDIR}"
	else
            if [[ ! -d "${WINE_SAVEDIR}" ]]; then
                mkdir -p "${WINE_SAVEDIR}"
            fi
	    #split the files list to array with ; delimiter
	    IFS=';' read -r -a SAVEFILES_ARRAY <<< "${WINE_SAVEFILES}"
	    for SAVEFILE in "${SAVEFILES_ARRAY[@]}"; do

		if [[ -e "${WINE_SAVEDIR}/${SAVEFILE}" ]]; then
		    #if savefiles exist in the prefix and not yet in system save, move it once
		    if [[ ! -e "${SYSTEM_SAVEDIR}/${SAVEFILE}" && ! -L "${WINE_SAVEDIR}/${SAVEFILE}" ]]; then
			mv "${WINE_SAVEDIR}/${SAVEFILE}" "${SYSTEM_SAVEDIR}/${SAVEFILE}"
		    else
			rm "${WINE_SAVEDIR}/${SAVEFILE}"
		    fi
		fi

		ln -sf "${SYSTEM_SAVEDIR}/${SAVEFILE}" "${WINE_SAVEDIR}/${SAVEFILE}"
	    done
	fi

    fi
}

msi_install() {
    WINEPREFIX=$1
    if [[ -e "${USER_DIR}/msi" ]]; then

        for file in ${USER_DIR}/msi/*.msi; do
            echo "Executing file $file"
            WINEPREFIX=${WINEPOINT} "${MSIEXEC}" -i "${file}" /quiet /qn /norestart &>/dev/null || return 1
            "${WINESERVER}" -w
        done

        mv "${USER_DIR}/msi" "${USER_DIR}/msi.bak" || return 1
    fi

    return 0
}

reg_install() {
    WINEPREFIX=$1
    if [[ -e "/var/run/rawinput.reg" ]]; then
        WINEPREFIX=${WINEPOINT} "${WINE}" regedit //?/unix/var/run/rawinput.reg &>/dev/null || return 1
        WINEPREFIX=${WINEPOINT} "${WINE64}" regedit //?/unix/var/run/rawinput.reg &>/dev/null || return 1
        rm /var/run/rawinput.reg
    fi

    if [[ -e "${USER_DIR}/regs" ]]; then

        for file in ${USER_DIR}/regs/*.reg; do
            echo "Importing registry $file"
            WINEPREFIX=${WINEPOINT} "${WINE}" regedit //?/unix"${file}" &>/dev/null || return 1
            WINEPREFIX=${WINEPOINT} "${WINE64}" regedit //?/unix"${file}" &>/dev/null || return 1
        done

        mv "${USER_DIR}/regs" "${USER_DIR}/regs.bak" || return 1
    fi

    if [[ "${WINE_ENABLE_HIDRAW}" = 1 ]]; then
        if ! grep -q "\"DisableHidraw\"=dword:00000000" "${WINEPOINT}/system.reg"; then
	    WINEPREFIX=${WINEPOINT} "${WINE}" reg add "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\winebus" /v "DisableHidraw" /t REG_DWORD /d 0 /f
            waitWineServer
        fi
    else
        if ! grep -q "\"DisableHidraw\"=dword:00000001" "${WINEPOINT}/system.reg"; then
	    WINEPREFIX=${WINEPOINT} "${WINE}" reg add "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\winebus" /v "DisableHidraw" /t REG_DWORD /d 1 /f
            waitWineServer
        fi
    fi

    return 0
}

fonts_install() {
    WINEPREFIX=$1
    if [[ -e "${USER_DIR}/fonts" ]]; then

        for file in "${USER_DIR}/fonts/"{*.ttf,*.ttc}; do
            echo "Installing fonts $file"
            cp -a "${USER_DIR}/fonts/"{*.ttf,*.ttc} "${WINEPREFIX}/drive_c/windows/Fonts" || return 1
        done

        mv "${USER_DIR}/fonts" "${USER_DIR}/fonts.bak" || return 1
    fi

    return 0
}

dxvk_install() {
    export WINEDLLOVERRIDES="winemenubuilder.exe="
    WINEPREFIX=$1

    # install dxvk only on system where it is available (aka, not x86)
    [[ -e "/usr/wine/dxvk" ]] || return 0

    DXVK=$(get_setting dxvk "${SYSTEM}" "${ROMGAMENAME}")
    DXVK_HUD=$(get_setting dxvk_hud "${SYSTEM}" "${ROMGAMENAME}")

    if [[ "${DXVK_HUD}" = 1 ]]; then
	    export DXVK_HUD=1
    fi

    if [[ "${DXVK}" = 1 ]]; then
        mkdir -p "${WINEPREFIX}/drive_c/windows/system32" "${WINEPREFIX}/drive_c/windows/syswow64" || return 1
        if [[ -e "/userdata/system/wine/dxvk" ]]; then
            echo "Creating links using /userdata, Linux File System required !!!"
            ln -sf "/userdata/system/wine/dxvk/x64/"{d3d12.dll,d3d12core.dll,d3d11.dll,d3d10core.dll,d3d9.dll,dxgi.dll,nvapi64.dll} "${WINEPREFIX}/drive_c/windows/system32" || return 1
            ln -sf "/userdata/system/wine/dxvk/x32/"{d3d8.dll,d3d12.dll,d3d12core.dll,d3d11.dll,d3d10core.dll,d3d9.dll,dxgi.dll,nvapi.dll} "${WINEPREFIX}/drive_c/windows/syswow64" || return 1
        else
            echo "Creating links using /usr/wine/dxvk/, Linux File System required !!!"
            ln -sf "/usr/wine/dxvk/x64/"{d3d12.dll,d3d12core.dll,d3d11.dll,d3d10core.dll,d3d9.dll,dxgi.dll,nvapi64.dll} "${WINEPREFIX}/drive_c/windows/system32" || return 1
            ln -sf "/usr/wine/dxvk/x32/"{d3d8.dll,d3d12.dll,d3d12core.dll,d3d11.dll,d3d10core.dll,d3d9.dll,dxgi.dll,nvapi.dll} "${WINEPREFIX}/drive_c/windows/syswow64" || return 1
        fi
    else
        mkdir -p "${WINEPREFIX}/drive_c/windows/system32" "${WINEPREFIX}/drive_c/windows/syswow64" || return 1
        echo "Creating links using ${DIR}/${WINE_VERSION}, Linux File System required !!!"
        ln -sf "${WINE_LIB64_DIR}/x86_64-windows/"{d3d8.dll,d3d12.dll,d3d12core.dll,d3d11.dll,d3d10core.dll,d3d9.dll,dxgi.dll} "${WINEPREFIX}/drive_c/windows/system32" || return 1
        ln -sf "${WINE_LIB32_DIR}/i386-windows/"{d3d8.dll,d3d12.dll,d3d12core.dll,d3d11.dll,d3d10core.dll,d3d9.dll,dxgi.dll} "${WINEPREFIX}/drive_c/windows/syswow64" || return 1
    fi

    if [[ "${DXVK}" = 1 ]]; then
        export DXVK_ASYNC=1
        export DXVK_CONFIG_FILE="/userdata/system/wine/dxvk.conf"
        export WINEDLLOVERRIDES="${WINEDLLOVERRIDES};dxgi,d3d8,d3d9,d3d10core,d3d11,d3d12,d3d12core=n"
        export DXVK_STATE_CACHE_PATH="/userdata/system/cache"
    else
        export DXVK_ASYNC=0
        export WINEDLLOVERRIDES="${WINEDLLOVERRIDES};dxgi,d3d8,d3d9,d3d10core,d3d11,d3d12,d3d12core=b"
    fi

    if [[ "${NVAPI}" = 1 ]]; then
        export DXVK_ENABLE_NVAPI=1
        export WINEDLLOVERRIDES="${WINEDLLOVERRIDES};nvapi,nvapi64=n"
    else
        export DXVK_ENABLE_NVAPI=0
        export WINEDLLOVERRIDES="${WINEDLLOVERRIDES};nvapi64,nvapi="
    fi

    return 0
}

sandboxing_prefix() {
    if [[ -d "${WINEPREFIX}/drive_c/users/steamuser" ]]; then
        USERNAME=steamuser
    fi

    if [[ -d "${WINEPREFIX}/drive_c/users/root" ]]; then
        USERNAME=root
    fi

    echo "Remove Symblink"
    # replace some links by folders. 
    # don't create all folders in case links doesn't exist to not create both Music and My Music at the same time (old wine uses My Music, new wine uses Musics)
    local DIR=""

    for DIR in "Downloads" "Documents" "My Documents" "Music" "My Music" "Pictures" "My Pictures" "Videos" "My Videos" "Templates"
    do
        if [[ -L "${WINEPREFIX}/drive_c/users/${USERNAME}/${DIR}" ]]; then
            unlink "${WINEPREFIX}/drive_c/users/${USERNAME}/${DIR}" || return 1
            mkdir -p "${WINEPREFIX}/drive_c/users/${USERNAME}/${DIR}" || return 1
        fi
    done

    return 0
}

createWineDirectory() {
    WINEPREFIX=$1

    # already created
    [[ -e "${WINEPREFIX}" ]] && return 0

    # please wait screen
    bsod-wine&
    BSODPID=$!

    mkdir -p "${WINEPREFIX}" || return 1

    # Workaround wine bottle creation issue with debug enabled
    export WINEDLLOVERRIDES="winegstreamer="

    if ! WINEPREFIX=${WINEPREFIX} ${WINE} hostname; then
	    rm -rf "${WINEPREFIX}"
	    kill -15 "${BSODPID}"
        echo "+++ Failed initialising ${WINEPREFIX} +++"
	    return 1
    fi

    kill -15 "${BSODPID}"

    return 0
}

getWine_var() {
    WINEPOINT=$1
    WINEVAR=$2
    WINEVALUE=$3

    if [[ -e "${WINEPOINT}/autorun.cmd" ]]; then
        VAL=$(cat "${WINEPOINT}/autorun.cmd" | dos2unix | grep "^${WINEVAR}=" | sed -e s+"^${WINEVAR}="+""+ | head -1)
        if [[ -n "${VAL}" ]]; then
            echo "${VAL}"
        else
            echo "${WINEVALUE}"
        fi
    else
        echo "${WINEVALUE}"
    fi
}

play_wine() {
    echo "play_wine"
    GAMENAME="$1"
    WINEPOINT="$2"

    wine_options "${WINEPOINT}"
    redist_install "${WINEPOINT}" || return 1
    msi_install "${WINEPOINT}" || return 1
    reg_install "${WINEPOINT}" || return 1
    fonts_install "${WINEPOINT}" || return 1
    sandboxing_prefix "${WINEPOINT}" || return 1
    dxvk_install "${WINEPOINT}" || return 1
    WINE_CMD=$(getWine_var "${WINEPOINT}" "CMD" "explorer")
    WINE_DIR=$(getWine_var "${WINEPOINT}" "DIR" "")
    WINE_LANG=$(getWine_var "${WINEPOINT}" "LANG" "")
    WINE_ENV=$(getWine_var "${WINEPOINT}" "ENV" "")
    WINE_SAVEDIR=$(getWine_var "${WINEPOINT}" "SAVEDIR" "")
    WINE_SAVEFILES=$(getWine_var "${WINEPOINT}" "SAVEFILES" "")
    save_install "${WINEPOINT}" "${GAMENAME}" "${WINE_SAVEDIR}" "${WINE_SAVEFILES}" || return 1

    if [[ -n "${WINE_LANG}" ]]; then
        (cd "${WINEPOINT}/${WINE_DIR}" && LC_ALL=${WINE_LANG} WINEPREFIX=${WINEPOINT} eval "${WINE_ENV}" "${WINE} ${VDESKTOP} ${WINE_CMD}")
    else
        (cd "${WINEPOINT}/${WINE_DIR}" && WINEPREFIX=${WINEPOINT} eval "${WINE_ENV}" "${WINE} ${VDESKTOP} ${WINE_CMD}")
    fi
    waitWineServer
}

play_pc() {
    echo "play_pc"
    GAMENAME="$1"
    WINEPOINT="$2"
    
    wine_options "${WINEPOINT}"
    createWineDirectory "${WINEPOINT}" || return 1
    redist_install "${WINEPOINT}" || return 1
    msi_install "${WINEPOINT}" || return 1
    reg_install "${WINEPOINT}" || return 1
    fonts_install "${WINEPOINT}" || return 1
    sandboxing_prefix "${WINEPOINT}" || return 1
    dxvk_install "${WINEPOINT}" || return 1

    WINE_CMD=$(getWine_var "${GAMENAME}" "CMD" "explorer")
    WINE_DIR=$(getWine_var "${GAMENAME}" "DIR" "")
    WINE_LANG=$(getWine_var "${GAMENAME}" "LANG" "")
    WINE_ENV=$(getWine_var "${GAMENAME}" "ENV" "")
    WINE_SAVEDIR=$(getWine_var "${GAMENAME}" "SAVEDIR" "")
    WINE_SAVEFILES=$(getWine_var "${GAMENAME}" "SAVEFILES" "")
    save_install "${WINEPOINT}" "${GAMENAME}" "${WINE_SAVEDIR}" "${WINE_SAVEFILES}" || return 1

    env
    if [[ -n "${WINE_LANG}" ]]; then
        (cd "${GAMENAME}/${WINE_DIR}" && LC_ALL=${WINE_LANG} WINEPREFIX=${WINEPOINT} eval "${WINE_ENV}" "${WINE} ${VDESKTOP} ${WINE_CMD}")
    else
        (cd "${GAMENAME}/${WINE_DIR}" && WINEPREFIX=${WINEPOINT} eval "${WINE_ENV}" "${WINE} ${VDESKTOP} ${WINE_CMD}")
    fi
    waitWineServer
}

trick_wine() {
    GAMENAME="$1"
    WINEPOINT="$2"
    TRICK="$3"
    if [[ -e "${WINETRICKS}" ]]; then
        echo "Winetricks is installed"
	else
        echo "Winetricks is downloading"
        wget -O "${WINETRICKS}" "https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks" &>/dev/null
        chmod +x "${WINETRICKS}"
        echo "Winetricks is now installed"
	fi
    WINEPREFIX=${WINEPOINT} "${WINETRICKS}" "${TRICK}"
}

#play_iso() {
#    GAMENAME=$1
#    # TODO
#}

play_exe() {
    GAMENAME="$1"
    WINEPOINT="$2"

    wine_options "${WINEPOINT}"
    createWineDirectory "${WINEPOINT}" || return 1
    redist_install "${WINEPOINT}" || return 1
    msi_install "${WINEPOINT}" || return 1
    reg_install "${WINEPOINT}" || return 1
    fonts_install "${WINEPOINT}" || return 1
    sandboxing_prefix "${WINEPOINT}" || return 1
    dxvk_install "${WINEPOINT}" || return 1

    (cd "${ROMBASEDIR}" && WINEPREFIX=${WINEPOINT} wine "${ROMGAMENAME}")
    waitWineServer
}

play_winetgz() {
    echo "play_winetgz"
    GAMENAME="$1"
    WINEPOINT="$2"

    wine_options "${WINEPOINT}"
    if [[ ! -e "${WINEPOINT}" ]]; then
	    mkdir -p "${WINEPOINT}" || return 1
	    (cd "${WINEPOINT}" && gunzip -c "${GAMENAME}" | tar xf -) || return 1
    fi

    redist_install "${WINEPOINT}" || return 1
    msi_install "${WINEPOINT}" || return 1
    reg_install "${WINEPOINT}" || return 1
    fonts_install "${WINEPOINT}" || return 1
    sandboxing_prefix "${WINEPOINT}" || return 1
    dxvk_install "${WINEPOINT}" || return 1

    WINE_CMD=$(getWine_var "${WINEPOINT}" "CMD" "explorer")
    WINE_DIR=$(getWine_var "${WINEPOINT}" "DIR" "")
    WINE_LANG=$(getWine_var "${WINEPOINT}" "LANG" "")
    WINE_ENV=$(getWine_var "${WINEPOINT}" "ENV" "")
    WINE_SAVEDIR=$(getWine_var "${WINEPOINT}" "SAVEDIR" "")
    WINE_SAVEFILES=$(getWine_var "${WINEPOINT}" "SAVEFILES" "")
    save_install "${WINEPOINT}" "${GAMENAME}" "${WINE_SAVEDIR}" "${WINE_SAVEFILES}" || return 1

    if [[ -n "${WINE_LANG}" ]]; then
        (cd "${WINEPOINT}/${WINE_DIR}" && LC_ALL=${WINE_LANG} WINEPREFIX=${WINEPOINT} eval "${WINE_ENV}" "${WINE} ${VDESKTOP} ${WINE_CMD}")
    else
        (cd "${WINEPOINT}/${WINE_DIR}" && WINEPREFIX=${WINEPOINT} eval "${WINE_ENV}" "${WINE} ${VDESKTOP} ${WINE_CMD}")
    fi
    waitWineServer
}

# Function to safely unmount a mount point with multiple attempts
safe_umount() {
    local mount_point="$1"
    local attempts=3

    for ((i=1; i<=attempts; i++)); do
        # Try lazy unmount first
        umount -l "${mount_point}" && return 0
        # If lazy unmount fails, try force unmount
        umount -f "${mount_point}" && return 0
        # If that fails, try recursive force unmount
        umount -f -R "${mount_point}" && return 0
        sleep 1
    done

    # If all attempts fail, we return an error
    echo "Error: Failed to unmount ${mount_point} after ${attempts} attempts" >&2
    return 1
}

play_squashfs() {
    echo "play_squashfs"
    GAMENAME="$1"
    WINEPOINT="$2"
    wine_options "${WINEPOINT}"
    SQUASHFSPOINT="/var/run/wine/squashfs_${ROMGAMENAME}"
    SAVEPOINT="$3"
    WORKPOINT="$4"

    # Attempt to unmount any existing mount points before starting
    [[ -d "${WINEPOINT}" ]] && safe_umount "${WINEPOINT}"
    [[ -d "${SQUASHFSPOINT}" ]] && safe_umount "${SQUASHFSPOINT}"

    # Remove directories if they exist
    [[ -d "${SQUASHFSPOINT}" ]] && rm -rf "${SQUASHFSPOINT}"
    [[ -d "${WORKPOINT}" ]] && rm -rf "${WORKPOINT}"
    [[ -d "${WINEPOINT}" ]] && rm -rf "${WINEPOINT}"

    # Create necessary fresh directories
    mkdir -p "${SAVEPOINT}" || return 1
    mkdir -p "${WORKPOINT}" || return 1
    mkdir -p "${WINEPOINT}" || return 1
    mkdir -p "${SQUASHFSPOINT}" || return 1

    # Mount squashfs
    if ! mount "${GAMENAME}" "${SQUASHFSPOINT}"; then
        [[ -d "${SQUASHFSPOINT}" ]] && rm -rf "${SQUASHFSPOINT}"
        [[ -d "${WORKPOINT}" ]] && rm -rf "${WORKPOINT}"
        [[ -d "${WINEPOINT}" ]] && rm -rf "${WINEPOINT}"
        return 1
    fi

    # Mount overlay
    if ! mount -t overlay -o rw,lowerdir="${SQUASHFSPOINT}",upperdir="${SAVEPOINT}",workdir="${WORKPOINT}",redirect_dir=on overlay "${WINEPOINT}"; then
        safe_umount "${SQUASHFSPOINT}"
        [[ -d "${SQUASHFSPOINT}" ]] && rm -rf "${SQUASHFSPOINT}"
        [[ -d "${WORKPOINT}" ]] && rm -rf "${WORKPOINT}"
        [[ -d "${WINEPOINT}" ]] && rm -rf "${WINEPOINT}"
        return 1
    fi

    reg_install "${WINEPOINT}" || return 1
    fonts_install "${WINEPOINT}" || return 1
    dxvk_install "${WINEPOINT}" || return 1

    WINE_CMD=$(getWine_var "${WINEPOINT}" "CMD" "explorer")
    WINE_DIR=$(getWine_var "${WINEPOINT}" "DIR" "")
    WINE_LANG=$(getWine_var "${WINEPOINT}" "LANG" "")
    WINE_ENV=$(getWine_var "${WINEPOINT}" "ENV" "")
    WINE_SAVEDIR=$(getWine_var "${WINEPOINT}" "SAVEDIR" "")
    WINE_SAVEFILES=$(getWine_var "${WINEPOINT}" "SAVEFILES" "")
    save_install "${WINEPOINT}" "${GAMENAME}" "${WINE_SAVEDIR}" "${WINE_SAVEFILES}" || return 1

    if [[ -n "${WINE_LANG}" ]]; then
        (cd "${WINEPOINT}/${WINE_DIR}" && LC_ALL=${WINE_LANG} WINEPREFIX=${WINEPOINT} eval "${WINE_ENV}" "${WINE} ${VDESKTOP} ${WINE_CMD}")
    else
        (cd "${WINEPOINT}/${WINE_DIR}" && WINEPREFIX=${WINEPOINT} eval "${WINE_ENV}" "${WINE} ${VDESKTOP} ${WINE_CMD}")
    fi

    waitWineServer
}

init_cmd() {
    WINEPOINT=$1

    (
	echo "#DIR=drive_c/Program Files/myprogram"
	echo "#CMD=start.exe"
    ) > "${WINEPOINT}/autorun.cmd"
}

install_exe_msi() {
    GAMENAME="$1"
    WINEPOINT="$2"
    createWineDirectory "${WINEPOINT}"

    (cd "${ROMBASEDIR}" && WINEPREFIX=${WINEPOINT} wine "${ROMGAMENAME}")
    waitWineServer
    init_cmd "${WINEPOINT}"
}

install_iso() {
    GAMENAME="$1"
    WINEPOINT="$2"
    BASEGAMENAME=$(basename_no_dup "${GAMENAME}")
    GAMEISOMOUNT="/var/run/wine/${ROMGAMENAME}.cdrom"

    mkdir -p "${GAMEISOMOUNT}" || return 1
    if ! mount -t iso9660 "${GAMENAME}" "${GAMEISOMOUNT}"; then
        if ! mount -t udf "${GAMENAME}" "${GAMEISOMOUNT}"; then
            rmdir "${GAMEISOMOUNT}"
            return 1
        fi
    fi

    createWineDirectory "${WINEPOINT}"
    
    if mkdir -p "${WINEPOINT}/dosdevices" && rm -f "${WINEPOINT}/dosdevices/d:" && ln -sf "${GAMEISOMOUNT}" "${WINEPOINT}/dosdevices/d:"; then
	    WINEPREFIX=${WINEPOINT} wine explorer "d:"
	    rm -f "${WINEPOINT}/dosdevices/d:"
    fi

    waitWineServer
    init_cmd "${WINEPOINT}"

}

wine2squashfs() {
    #GAMENAME is an .wine directory here, compress DIR -> FILE.wsquasfs
    GAMEDIR="$1"
    SQUASHFSFILE="$2"
    
    mksquashfs "${GAMEDIR}" "${SQUASHFSFILE}" -comp zstd || return 1
    return 0
}

wine2winetgz() {
    GAMEDIR="$1"
    WINETGZFILE="$2"

    (cd "${GAMEDIR}" && tar cf - * | gzip -c > "${WINETGZFILE}") && echo "File: $(basename ${WINETGZFILE}) build..." || return 1
    return 0
}

cleanAndExit() {
    RESNEW=$(batocera-resolution currentMode)
    if [[ "${RESNEW}" != "${G_RESCUR}" ]]; then
        batocera-resolution setMode "${G_RESCUR}"
    fi

    if [[ -e "${GST_REGISTRY_1_0}" ]]; then
        rm -f "${GST_REGISTRY_1_0}"
    fi

    case "${GAMEEXT,,}" in
        "iso")
            # try to clean the cdrom
            [[ -n "${GAMEISOMOUNT}" ]] && [[ -d "${GAMEISOMOUNT}" ]] && safe_umount "${GAMEISOMOUNT}" || return 1
            [[ -n "${GAMEISOMOUNT}" ]] && [[ -d "${GAMEISOMOUNT}" ]] && rm -rf "${GAMEISOMOUNT}"
            ;;
        "wsquashfs")
            # Safely unmount and clean up
            [[ -n "${WINEPOINT}" ]] && [[ -d "${WINEPOINT}" ]] && safe_umount "${WINEPOINT}" || return 1
            [[ -n "${SQUASHFSPOINT}" ]] && [[ -d "${SQUASHFSPOINT}" ]] && safe_umount "${SQUASHFSPOINT}" || return 1

            # Remove directories if they exist
            [[ -n "${SQUASHFSPOINT}" ]] && [[ -d "${SQUASHFSPOINT}" ]] && rm -rf "${SQUASHFSPOINT}"
            [[ -n "${WORKPOINT}" ]] && [[ -d "${WORKPOINT}" ]] && rm -rf "${WORKPOINT}"
            [[ -n "${WINEPOINT}" ]] && [[ -d "${WINEPOINT}" ]] && rm -rf "${WINEPOINT}"
            ;;
    esac
    echo "WineServer was $(($(date +%s) - TIMESTAMP))s active"
    return $?
}

init_wine() {
    ## Wine detection
    WINE_RUNNER="$(/usr/bin/batocera-settings-get windows.wine-runner)"
    [[ -z "$WINE_RUNNER" ]] && WINE_RUNNER="wine-tkg"
    
    WINE_VERSION="$(get_setting wine-runner "${SYSTEM}" "${ROMGAMENAME}")"
    # to help with the transition from previous runners.
    [[ -z "$WINE_VERSION" ]] && WINE_VERSION="$(get_setting core "${SYSTEM}" "${ROMGAMENAME}" || echo "${WINE_RUNNER}")"
    
    if [[ "${WINE_VERSION}" == "lutris" || "${WINE_VERSION}" == "proton" ]]; then
        WINE_VERSION="wine-tkg"
    fi
    echo "*** Chosen WINE runner is ${WINE_VERSION} ***"
    
    ## Wine executables
    DIR="$(find_wine_dir "$WINE_VERSION")"
    if [[ $? -eq 0 ]]; then
        WINE_VERSION="$(update_wine_version "$WINE_VERSION")"
    else
        echo "can't find WINE version ${WINE_VERSION} directory, you should change the runner"
        exit 1
    fi
    
    echo "*** Directory checks complete, WINE runner is ${WINE_VERSION} ***"
    USER_DIR="/userdata/system/wine"
    WINE="${DIR}/${WINE_VERSION}/bin/wine"
    WINE64="${DIR}/${WINE_VERSION}/bin/wine64"
    WINESERVER="${DIR}/${WINE_VERSION}/bin/wineserver"
    MSIEXEC="${DIR}/${WINE_VERSION}/bin/msiexec"
    WINETRICKS="${DIR}/winetricks"
    
    # Check lib64 directory
    if [[ -e "${DIR}/${WINE_VERSION}/lib64/wine" ]]; then
        WINE_LIB64_DIR="${DIR}/${WINE_VERSION}/lib64/wine"
    else
        WINE_LIB64_DIR="${DIR}/${WINE_VERSION}/lib/wine"
    fi
    # Check lib32 directory
    if [[ -e "${DIR}/${WINE_VERSION}/lib32/wine" ]]; then
        WINE_LIB32_DIR="${DIR}/${WINE_VERSION}/lib32/wine"
    else
        WINE_LIB32_DIR="${DIR}/${WINE_VERSION}/lib/wine"
    fi
    
    ## Export Wine libs
    PATH=$PATH:PATH=$PATH:${DIR}/${WINE_VERSION}/bin
    export LD_LIBRARY_PATH="/lib32:${WINE_LIB32_DIR}/i386-unix:/lib:/usr/lib:${WINE_LIB64_DIR}/x86_64-unix"
    export GST_PLUGIN_SYSTEM_PATH_1_0="/usr/lib/gstreamer-1.0:/lib32/gstreamer-1.0"
    export GST_REGISTRY_1_0="/userdata/system/.cache/gstreamer-1.0/registry.x86_64.bin:/userdata/system/.cache/gstreamer-1.0/registry..bin"
    export LIBGL_DRIVERS_PATH="/lib32/dri:/usr/lib/dri"
    export WINEDLLPATH="${WINE_LIB32_DIR}/i386-windows:${WINE_LIB64_DIR}/x86_64-windows"
    # hum pw 0.2 and 0.3 are hardcoded, not nice
    export SPA_PLUGIN_DIR="/usr/lib/spa-0.2:/lib32/spa-0.2"
    export PIPEWIRE_MODULE_DIR="/usr/lib/pipewire-0.3:/lib32/pipewire-0.3"

    # safe old resolution, for bringing it back properly after WINE closes, cleanAndExit()
    G_RESCUR=$(batocera-resolution currentMode)
}

###### MAIN #######
trap stopWineServer SIGHUP SIGINT SIGTERM

#Init WINE Folders and Extension only if parameters are correct and a system is setted
[[ -z "${SYSTEM}" ]] && SYSTEM="!missing!"
[[ -z "${ACTION}" ]] && ACTION="!missing!"

case "${ACTION}" in
   "stop")
        echo "Stop called from Sunbeam: Outside World"
        PID=$(pgrep -f -o $0)
        kill -1 $(pgrep -P $PID)
        kill -1 $PID
        exit 0
   ;;

# case selections will provide 2 variables here, GAMENAME and WINEPOINT
   "play")
   init_wine
	case "${GAMEEXT,,}" in
	    "wine")
		play_wine "${GAMENAME}" "${GAMENAME}"
		;;
	    "pc")
		play_pc "${GAMENAME}" "${WINE_BOTTLE_DIR}/${WINE_VERSION}/${ROMGAMENAME}.wine"
		;;
	    "exe")
		play_exe "${GAMENAME}" "${WINE_BOTTLE_DIR}/${WINE_VERSION}/${ROMGAMENAME}.wine"
		;;
#	    "iso")
#		play_iso "${GAMENAME}"
#		;;
	    "wsquashfs")
		#Arguments, ROMNAME, WINEPREFIX as squashfs, SAVEDIR, WORKDIR
		play_squashfs "${GAMENAME}" "/var/run/wine/${ROMGAMENAME}" "${WINE_BOTTLE_DIR}/${ROMGAMENAME}" "${WINE_BOTTLE_DIR}/${ROMGAMENAME}.work"
		;;
	    "wtgz")
		play_winetgz "${GAMENAME}" "${WINE_BOTTLE_DIR}/${ROMGAMENAME}.wine"
		;;
	    *)
		echo "unknown extension ${GAMEEXT}" >&2
	esac
	;;

    "install")
    init_wine
	case "${GAMEEXT,,}" in
	    "exe"|"msi")
		#Parsing Gamename (not needed in fact)
		#Winepoint with stripped extension, add current date_time to avoid duplicates
		install_exe_msi "${GAMENAME}" "${G_ROMS_DIR}/$(date +%y%m%d-%H%M%S)_${ROMGAMENAME%.*}.wine"
		;;
	    "iso")
		#Parsing Gamename, Winepoint with stripped extension, add current date_time to avoid duplicates
		install_iso "${GAMENAME}" "${G_ROMS_DIR}/$(date +%y%m%d-%H%M%S)_${ROMGAMENAME%.*}.wine"
		;;
	    *)
		echo "unknown extension ${GAMEEXT}" >&2
	esac
	;;

    "tricks")
    init_wine
	case "${GAMEEXT,,}" in
	    "wine")
		trick_wine "${GAMENAME}" "${GAMENAME}" "${TRICK}"
		;;
	esac
	;;

    "wine2squashfs")
	#Parsing Gamename, location and name of compressed file
	wine2squashfs "${GAMENAME}" "${G_ROMS_DIR}/${ROMGAMENAME%.*}.wsquashfs"
	exit $?
	;;

    "wine2winetgz")
	wine2winetgz "${GAMENAME}" "${G_ROMS_DIR}/${ROMGAMENAME%.*}.wtgz"
	exit $?
	;;

    *)
        set +x
        echo "For system <${SYSTEM}> action <${ACTION}> detected" >&2
        echo
        echo "${0} windows play          <game>.iso"             >&2
        echo "${0} windows play          <game>.exe"             >&2
        echo "${0} windows play          <game>.pc"              >&2
        echo "${0} windows play          <game>.wine"            >&2
        echo "${0} windows play          <game>.wsquashfs"       >&2
        echo "${0} windows play          <game>.wtgz"            >&2
        echo "${0} windows install       <game>.iso"             >&2
        echo "${0} windows install       <game>.exe"             >&2
        echo "${0} windows tricks        <game>.wine directplay" >&2
        echo "${0} windows wine2squashfs <game.wine>"            >&2
        echo "${0} windows wine2winetgz  <game.wine>"            >&2
        echo "${0} windows stop"                                 >&2
        exit 1
esac

cleanAndExit $?
exit $?
