#!/bin/bash

set -x

SYSTEM=$1
ACTION=$2
shift
shift

# Arguments: key, system, game
get_setting() {
    /usr/bin/batocera-settings-get "$2[\"$3\"].$1" "$2.$1" "global.$1"
}

## Wine detection
GAMENAME=$1 
ROMGAMENAME=$(basename "${GAMENAME}")
WINE_VERSION="$(get_setting core "${SYSTEM}" "${ROMGAMENAME}" || echo proton)"

# Wine Folder
wine_folder() {
if test -e "/userdata/system/wine/proton" || test -e "/userdata/system/wine/lutris"; then
    echo "/userdata/system/wine"
    else
    echo "/usr/wine"
fi
}

## Wine executables
DIR="$(wine_folder)"
USER_DIR="/userdata/system/wine"
WINE="${DIR}/${WINE_VERSION}/bin/wine"
WINE64="${DIR}/${WINE_VERSION}/bin/wine64"
WINESERVER="${DIR}/${WINE_VERSION}/bin/wineserver"
MSIEXEC="${DIR}/${WINE_VERSION}/bin/msiexec"
WINETRICKS="${DIR}/winetricks"
MF_INSTALL="${DIR}/mf/mf-install.sh"

## Folders
G_SAVES_DIR="/userdata/saves/${SYSTEM}"
G_ROMS_DIR="/userdata/roms/${SYSTEM}"

## Export Wine libs
PATH=$PATH:PATH=$PATH:${DIR}/${WINE_VERSION}/bin
export LD_LIBRARY_PATH="/lib32:${DIR}/${WINE_VERSION}/lib/wine:/lib:/usr/lib:${DIR}/${WINE_VERSION}/lib64/wine"
export GST_PLUGIN_SYSTEM_PATH_1_0="/usr/lib/gstreamer-1.0:/lib32/gstreamer-1.0"
export GST_REGISTRY_1_0="/userdata/system/.cache/gstreamer-1.0/registry.x86_64.bin"
export LIBGL_DRIVERS_PATH="/lib32/dri:/usr/lib/dri"
export WINEDLLPATH="${DIR}/${WINE_VERSION}/lib/wine/fakedlls:${DIR}/${WINE_VERSION}/lib64/wine/fakedlls"

usage() {
    echo "${1} windows play    	     <game>.iso"             >&2
    echo "${1} windows play    	     <game>.exe"             >&2
    echo "${1} windows play    	     <game>.pc"              >&2
    echo "${1} windows play    	     <game>.wine"            >&2
    echo "${1} windows play    	     <game>.wsquashfs"       >&2
    echo "${1} windows play    	     <game>.wtgz"            >&2
    echo "${1} windows install 	     <game>.iso"             >&2
    echo "${1} windows install 	     <game>.exe"             >&2
    echo "${1} windows tricks  	     <game>.wine directplay" >&2
    echo "${1} windows wine2squashfs <game.wine>"            >&2
    echo "${1} windows wine2winetgz  <game.wine>"            >&2
}

waitWineServer() {
    while pgrep "${WINESERVER}"
    do
	echo "waiting wineserver" >&2
	sleep 1
    done
}

wine_options() {
    WINEPOINT=$1
    ESYNC="$(get_setting esync "${SYSTEM}" "${ROMGAMENAME}")"
    FSYNC="$(get_setting fsync "${SYSTEM}" "${ROMGAMENAME}")"
    PBA="$(get_setting pba "${SYSTEM}" "${ROMGAMENAME}")"
    FPS_LIMIT="$(get_setting fps_limit "${SYSTEM}" "${ROMGAMENAME}")"
    WINE_DEBUG="$(get_setting wine_debug "${SYSTEM}" "${ROMGAMENAME}")"
    KEYBOARD="$(/usr/bin/batocera-settings-get system.kblayout)"
    VIRTUAL_DESKTOP="$(get_setting virtual_desktop "${SYSTEM}" "${ROMGAMENAME}")"
    VIRTUAL_DESKTOP_SIZE="$(get_setting videomode "${SYSTEM}" "${ROMGAMENAME}" || batocera-resolution currentResolution)"

    if [ "${VIRTUAL_DESKTOP}" = 1 ]; then
        VDESKTOP="explorer /desktop=Wine,${VIRTUAL_DESKTOP_SIZE}"
    fi

    export WINEESYNC=1
    test "${ESYNC}" = 0 && WINEESYNC=0

    export WINEFSYNC=1
    test "${FSYNC}" = 0 && WINEFSYNC=0

    export PBA_ENABLE=0
    test "${PBA}" = 1 && PBA_ENABLE=1

    export DXVK_FRAME_RATE=0
    test "${FPS_LIMIT}" = 1 && DXVK_FRAME_RATE=60

    export WINEDEBUG="-all"
    test "${WINE_DEBUG}" = 1 && WINEDEBUG="err+all,fixme+all"

    export DXVK_LOG_LEVEL=none
    test "${WINE_DEBUG}" = 1 && unset DXVK_LOG_LEVEL

    export VKD3D_DEBUG=none
    test "${WINE_DEBUG}" = 1 && unset VKD3D_DEBUG

    export VKD3D_SHADER_DEBUG=none
    test "${WINE_DEBUG}" = 1 && unset VKD3D_SHADER_DEBUG

    export STAGING_SHARED_MEMORY=1
    export ULIMIT_SIZE=1048576
    #export STAGING_RT_PRIORITY_SERVER=90
    #export NICE_LEVEL="-4"

    if ! ulimit -n "${ULIMIT_SIZE}" 2>/dev/null; then
        export WINEESYNC=0
    fi

    setxkbmap "${KEYBOARD}"
}

mf_install() {
    WINEPREFIX=$1
    MF="$(get_setting mf "${SYSTEM}" "${ROMGAMENAME}")"

    if test "${MF}" = 1
    then
    if test -e "/userdata/system/wine/mf"
    then
        chmod +x "${MF_INSTALL}" || return 1
        WINEPREFIX="${WINEPREFIX}" "${MF_INSTALL}" || return 1
        /usr/bin/batocera-settings-set "${SYSTEM}[\"${ROMGAMENAME}\"].mf" 0
    else
        WINEPREFIX="${WINEPREFIX}" "${MF_INSTALL}" || return 1
        /usr/bin/batocera-settings-set "${SYSTEM}[\"${ROMGAMENAME}\"].mf" 0
    fi
    fi

    return 0
}

redist_install() {
WINEPREFIX=$1
if test -e "${USER_DIR}/exe"; then

        for file in ${USER_DIR}/exe/*.exe; do
			echo "Executing file $file"
			
		case "${file}" in

  		"${USER_DIR}/exe/DXSETUP.exe" | "${USER_DIR}/exe/dxsetup.exe")
    		WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /silent &>/dev/null || return 1
			"${WINESERVER}" -w
			;;

		"${USER_DIR}/exe/vcredist_x64_2005.exe" | "${USER_DIR}/exe/vcredist_x86_2005.exe")
    		WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /q &>/dev/null || return 1
			"${WINESERVER}" -w
    		;;

  		"${USER_DIR}/exe/vcredist_x64_2008.exe" | "${USER_DIR}/exe/vcredist_x86_2008.exe")
    		WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
			"${WINESERVER}" -w
    		;;

  		"${USER_DIR}/exe/vcredist_x64_2010.exe" | "${USER_DIR}/exe/vcredist_x86_2010.exe")
    		WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
			"${WINESERVER}" -w
    		;;

		"${USER_DIR}/exe/vcredist_x64_2012.exe" | "${USER_DIR}/exe/vcredist_x86_2012.exe")
    		WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
			"${WINESERVER}" -w
    		;;

		"${USER_DIR}/exe/vcredist_x64_2013.exe" | "${USER_DIR}/exe/vcredist_x86_2013.exe")
    		WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
			"${WINESERVER}" -w
    		;;

		"${USER_DIR}/exe/vcredist_x64_2015.exe" | "${USER_DIR}/exe/vcredist_x86_2015.exe")
    		WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
			"${WINESERVER}" -w
    		;;

		"${USER_DIR}/exe/vcredist_x64_2017.exe" | "${USER_DIR}/exe/vcredist_x86_2017.exe")
    		WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
			"${WINESERVER}" -w
    		;;

		"${USER_DIR}/exe/vcredist_x64_2019.exe" | "${USER_DIR}/exe/vcredist_x86_2019.exe")
    		WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
			"${WINESERVER}" -w
    		;;

		"${USER_DIR}/exe/vcredist_x64_2015_2019.exe" | "${USER_DIR}/exe/vcredist_x86_2015_2019.exe")
    		WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /quiet /qn /norestart &>/dev/null || return 1
			"${WINESERVER}" -w
    		;;

		"${USER_DIR}/exe/oalinst.exe")
    		WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" /s &>/dev/null
			"${WINESERVER}" -w
    		;;

  		*)
    		WINEPREFIX=${WINEPOINT} "${WINE}" "${file}" &>/dev/null
			"${WINESERVER}" -w
    		;;
		esac
		done

        mv "${USER_DIR}/exe" "${USER_DIR}/exe.bak" || return 1
fi

    return 0
}

msi_install() {
WINEPREFIX=$1
    if test -e "${USER_DIR}/msi"; then

        for file in ${USER_DIR}/msi/*.msi; do
            echo "Executing file $file"
            WINEPREFIX=${WINEPOINT} "${MSIEXEC}" -i "${file}" /quiet /qn /norestart &>/dev/null || return 1
            "${WINESERVER}" -w
        done

        mv "${USER_DIR}/msi" "${USER_DIR}/msi.bak" || return 1
    fi

    return 0
}

reg_install() {
WINEPREFIX=$1
    if test -e "${USER_DIR}/regs"; then

        for file in ${USER_DIR}/regs/*.reg; do
            echo "Importing registry $file"
            WINEPREFIX=${WINEPOINT} "${WINE}" regedit "${file}" &>/dev/null || return 1
            WINEPREFIX=${WINEPOINT} "${WINE64}" regedit "${file}" &>/dev/null || return 1
        done

        mv "${USER_DIR}/regs" "${USER_DIR}/regs.bak" || return 1
    fi

    return 0
}

dxvk_install() {
    export WINEDLLOVERRIDES="winemenubuilder.exe="
    WINEPREFIX=$1
    ROMGAMENAME=$(basename "${GAMENAME}")

    # install dxvk only on system where it is available (aka, not x86)
    test -e "/usr/wine/dxvk" || return 0

    DXVK=$(get_setting dxvk "${SYSTEM}" "${ROMGAMENAME}")
    DXVK_HUD=$(get_setting dxvk_hud "${SYSTEM}" "${ROMGAMENAME}")

    if test "${DXVK_HUD}" = 1
    then
	export DXVK_HUD=1
    fi

    if test "${DXVK}" = 1
    then
	mkdir -p "${WINEPREFIX}/drive_c/windows/system32" "${WINEPREFIX}/drive_c/windows/syswow64" || return 1
	if test -e "/userdata/system/wine/dxvk"
	then
	    echo "Creating links on /userdata, Linux File System required !!!"
	    ln -sf "/userdata/system/wine/dxvk/x64/"{d3d12.dll,d3d11.dll,d3d10core.dll,d3d10.dll,d3d10_1.dll,d3d9.dll,dxgi.dll} "${WINEPREFIX}/drive_c/windows/system32" || return 1
        ln -sf "/userdata/system/wine/dxvk/x32/"{d3d12.dll,d3d11.dll,d3d10core.dll,d3d10.dll,d3d10_1.dll,d3d9.dll,dxgi.dll} "${WINEPREFIX}/drive_c/windows/syswow64" || return 1
	else
	    echo "Creating links on /userdata, Linux File System required !!!"
	    ln -sf "/usr/wine/dxvk/x64/"{d3d12.dll,d3d11.dll,d3d10core.dll,d3d10.dll,d3d10_1.dll,d3d9.dll,dxgi.dll} "${WINEPREFIX}/drive_c/windows/system32" || return 1
        ln -sf "/usr/wine/dxvk/x32/"{d3d12.dll,d3d11.dll,d3d10core.dll,d3d10.dll,d3d10_1.dll,d3d9.dll,dxgi.dll} "${WINEPREFIX}/drive_c/windows/syswow64" || return 1
	fi
    else
	echo "Creating links on /userdata, Linux File System required !!!"
	ln -sf "/usr/wine/${WINE_VERSION}/lib64/wine/fakedlls/"{d3d12.dll,d3d11.dll,d3d10core.dll,d3d10.dll,d3d10_1.dll,d3d9.dll,dxgi.dll}   "${WINEPREFIX}/drive_c/windows/system32" || return 1
        ln -sf "/usr/wine/${WINE_VERSION}/lib/wine/fakedlls/"{d3d12.dll,d3d11.dll,d3d10core.dll,d3d10.dll,d3d10_1.dll,d3d9.dll,dxgi.dll} "${WINEPREFIX}/drive_c/windows/syswow64" || return 1
    fi

    if test "${DXVK}" = 1
    then
    export DXVK_ASYNC=1
    export DXVK_CONFIG_FILE="/userdata/system/wine/dxvk/dxvk.conf"
    export WINEDLLOVERRIDES="${WINEDLLOVERRIDES};dxgi,d3d9,d3d10,d3d10_1,d3d10core,d3d11,d3d12=n;nvapi64,nvapi="
    else
    export WINEDLLOVERRIDES="${WINEDLLOVERRIDES};dxgi,d3d9,d3d10,d3d10_1,d3d10core,d3d11,d3d12=b"
    fi

    return 0
}

sandboxing_prefix() {
    if [ -d "${WINEPREFIX}/drive_c/users/steamuser" ]; then
        USERNAME=steamuser
    fi

    if [ -d "${WINEPREFIX}/drive_c/users/root" ]; then
        USERNAME=root
    fi

    echo "Remove Symblink"
    if [ -L "${WINEPREFIX}/drive_c/users/${USERNAME}/Downloads" ]; then
    unlink "${WINEPREFIX}/drive_c/users/${USERNAME}/Downloads" || return 1
    fi

    if [ -L "${WINEPREFIX}/drive_c/users/${USERNAME}/My Documents" ]; then
    unlink "${WINEPREFIX}/drive_c/users/${USERNAME}/My Documents" || return 1
    fi

    if [ -L "${WINEPREFIX}/drive_c/users/${USERNAME}/My Music" ]; then
    unlink "${WINEPREFIX}/drive_c/users/${USERNAME}/My Music" || return 1
    fi

    if [ -L "${WINEPREFIX}/drive_c/users/${USERNAME}/My Pictures" ]; then
    unlink "${WINEPREFIX}/drive_c/users/${USERNAME}/My Pictures" || return 1
    fi

    if [ -L "${WINEPREFIX}/drive_c/users/${USERNAME}/My Videos" ]; then
    unlink "${WINEPREFIX}/drive_c/users/${USERNAME}/My Videos" || return 1
    fi

    if [ -L "${WINEPREFIX}/drive_c/users/${USERNAME}/Templates" ]; then
    unlink "${WINEPREFIX}/drive_c/users/${USERNAME}/Templates" || return 1
    fi

    echo "Create user directory"
    mkdir -p "${WINEPREFIX}/drive_c/users/${USERNAME}/Downloads" || return 1
    mkdir -p "${WINEPREFIX}/drive_c/users/${USERNAME}/My Documents" || return 1
    mkdir -p "${WINEPREFIX}/drive_c/users/${USERNAME}/My Music" || return 1
    mkdir -p "${WINEPREFIX}/drive_c/users/${USERNAME}/My Pictures" || return 1
    mkdir -p "${WINEPREFIX}/drive_c/users/${USERNAME}/My Videos" || return 1
    mkdir -p "${WINEPREFIX}/drive_c/users/${USERNAME}/Templates" || return 1

    return 0
}

createWineDirectory() {
    WINEPREFIX=$1

    # already created
    test -e "${WINEPREFIX}" && return 0

    # please wait screen
    bsod-wine&
    BSODPID=$!

    mkdir -p "${WINEPREFIX}" || return 1

    if ! WINEPREFIX=${WINEPREFIX} ${WINE} hostname
    then
	rm -rf "${WINEPREFIX}"
	kill -15 ${BSODPID}
	return 1
    fi

    kill -15 ${BSODPID}

    return 0
}

getWine_var() {
    WINEPOINT=$1
    WINEVAR=$2
    WINEVALUE=$3

    if test -e "${WINEPOINT}/autorun.cmd"
    then
	VAL=$(grep "^${WINEVAR}=" "${WINEPOINT}/autorun.cmd" | sed -e s+"^${WINEVAR}="+""+ | head -1)
	if test -n "${VAL}"
	then
	    echo "${VAL}"
	else
	    echo "${WINEVALUE}"
	fi
    else
	echo "${WINEVALUE}"
    fi
}

play_wine() {
    GAMENAME=$1
    WINEPOINT="${GAMENAME}"

    wine_options "${WINEPOINT}"
    redist_install "${WINEPOINT}" || return 1
    msi_install "${WINEPOINT}" || return 1
    reg_install "${WINEPOINT}" || return 1
    mf_install "${WINEPOINT}" || return 1
    dxvk_install "${WINEPOINT}" || return 1
    WINE_CMD=$(getWine_var "${WINEPOINT}" "CMD" "explorer")
    WINE_DIR=$(getWine_var "${WINEPOINT}" "DIR" "")
    WINE_LANG=$(getWine_var "${WINEPOINT}" "LANG" "")
    if test -n "${WINE_LANG}"
	then
        (cd "${WINEPOINT}/${WINE_DIR}" && LC_ALL=${WINE_LANG} WINEPREFIX=${WINEPOINT} eval "${WINE} ${VDESKTOP} ${WINE_CMD}")
    else
        (cd "${WINEPOINT}/${WINE_DIR}" && WINEPREFIX=${WINEPOINT} eval "${WINE} ${VDESKTOP} ${WINE_CMD}")
    fi
    waitWineServer
}

play_pc() {
    GAMENAME=$1
    WINEPOINT="${G_SAVES_DIR}/${WINE_VERSION}/"$(basename "${GAMENAME}")".wine"
    
    wine_options "${WINEPOINT}"
    createWineDirectory "${WINEPOINT}" || return 1
    redist_install "${WINEPOINT}" || return 1
    msi_install "${WINEPOINT}" || return 1
    reg_install "${WINEPOINT}" || return 1
    mf_install "${WINEPOINT}" || return 1
    sandboxing_prefix "${WINEPOINT}" || return 1
    dxvk_install "${WINEPOINT}" || return 1

    WINE_CMD=$(getWine_var "${GAMENAME}" "CMD" "explorer")
    WINE_DIR=$(getWine_var "${GAMENAME}" "DIR" "")
    WINE_LANG=$(getWine_var "${GAMENAME}" "LANG" "")
    if test -n "${WINE_LANG}"
	then
        (cd "${GAMENAME}/${WINE_DIR}" && LC_ALL=${WINE_LANG} WINEPREFIX=${WINEPOINT} eval "${WINE} ${VDESKTOP} ${WINE_CMD}")
    else
        (cd "${GAMENAME}/${WINE_DIR}" && WINEPREFIX=${WINEPOINT} eval "${WINE} ${VDESKTOP} ${WINE_CMD}")
    fi
    waitWineServer
}

trick_wine() {
    GAMENAME=$1
    if [ -e "${WINETRICKS}" ]; then
        echo "Winetricks is installed"
	else
        echo "Winetricks is downloading"
        wget -O "${WINETRICKS}" "https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks" &>/dev/null
        chmod +x "${WINETRICKS}"
        echo "Winetricks is now installed"
	fi
    TRICK=$2
    WINEPOINT="${GAMENAME}"
    WINEPREFIX=${WINEPOINT} "${WINETRICKS}" "${TRICK}"
}

#play_iso() {
#    GAMENAME=$1
#    # TODO
#}

play_exe() {
    GAMENAME=$1
    WINEPOINT="${G_SAVES_DIR}/${WINE_VERSION}/"$(basename "${GAMENAME}")".wine"
    GAMEDIR=$(dirname "${GAMENAME}")
    GAMEEXE=$(basename "${GAMENAME}")

    wine_options "${WINEPOINT}"
    createWineDirectory "${WINEPOINT}" || return 1
    redist_install "${WINEPOINT}" || return 1
    msi_install "${WINEPOINT}" || return 1
    reg_install "${WINEPOINT}" || return 1
    mf_install "${WINEPOINT}" || return 1
    sandboxing_prefix "${WINEPOINT}" || return 1
    dxvk_install "${WINEPOINT}" || return 1

    (cd "${GAMEDIR}" && WINEPREFIX=${WINEPOINT} wine "${GAMEEXE}")
    waitWineServer
}

play_winetgz() {
    GAMENAME=$1
    WINEPOINT="${G_SAVES_DIR}/"$(basename "${GAMENAME}")".wine"

    wine_options "${WINEPOINT}"
    if ! test -e "${WINEPOINT}"
    then
	mkdir -p "${WINEPOINT}" || return 1
	(cd "${WINEPOINT}" && gunzip -c "${GAMENAME}" | tar xf -) || return 1
    fi

    redist_install "${WINEPOINT}" || return 1
    msi_install "${WINEPOINT}" || return 1
    reg_install "${WINEPOINT}" || return 1
    mf_install "${WINEPOINT}" || return 1
    dxvk_install "${WINEPOINT}" || return 1

    WINE_CMD=$(getWine_var "${WINEPOINT}" "CMD" "explorer")
    WINE_DIR=$(getWine_var "${WINEPOINT}" "DIR" "")
    WINE_LANG=$(getWine_var "${WINEPOINT}" "LANG" "")
    if test -n "${WINE_LANG}"
	then
        (cd "${WINEPOINT}/${WINE_DIR}" && LC_ALL=${WINE_LANG} WINEPREFIX=${WINEPOINT} eval "${WINE} ${VDESKTOP} ${WINE_CMD}")
    else
        (cd "${WINEPOINT}/${WINE_DIR}" && WINEPREFIX=${WINEPOINT} eval "${WINE} ${VDESKTOP} ${WINE_CMD}")
    fi
    waitWineServer
}

play_squashfs() {
    GAMENAME=$1
    BASEGAMENAME=$(basename "${GAMENAME}")
    WINEPOINT="/var/run/wine/${BASEGAMENAME}"
    wine_options "${WINEPOINT}"
    SQUASHFSPOINT="/var/run/wine/squashfs_${BASEGAMENAME}"
    SAVEPOINT="${G_SAVES_DIR}/${BASEGAMENAME}"
    WORKPOINT="${G_SAVES_DIR}/${BASEGAMENAME}.work"

    mkdir -p "${SAVEPOINT}" || return 1
    mkdir -p "${WORKPOINT}" || return 1
    mkdir -p "${WINEPOINT}" || return 1

    mkdir -p "${SQUASHFSPOINT}" || return 1
    if ! mount "${GAMENAME}" "${SQUASHFSPOINT}"
    then
	rmdir "${SQUASHFSPOINT}"
	rm -rf "${WORKPOINT}"
	rmdir "${WINEPOINT}"
	return 1
    fi

    if ! mount -t overlay overlay -o rw,lowerdir="${SQUASHFSPOINT}",upperdir="${SAVEPOINT}",workdir="${WORKPOINT}",redirect_dir=on "${WINEPOINT}"
    then
	umount "${SQUASHFSPOINT}"
	rmdir "${SQUASHFSPOINT}"
	rm -rf "${WORKPOINT}"
	rmdir "${WINEPOINT}"
	return 1
    fi

    mf_install "${WINEPOINT}" || return 1
    dxvk_install "${WINEPOINT}" || return 1

    WINE_CMD=$(getWine_var "${WINEPOINT}" "CMD" "explorer")
    WINE_DIR=$(getWine_var "${WINEPOINT}" "DIR" "")
    WINE_LANG=$(getWine_var "${WINEPOINT}" "LANG" "")
    if test -n "${WINE_LANG}"
	then
        (cd "${WINEPOINT}/${WINE_DIR}" && LC_ALL=${WINE_LANG} WINEPREFIX=${WINEPOINT} eval "${WINE} ${VDESKTOP} ${WINE_CMD}")
    else
        (cd "${WINEPOINT}/${WINE_DIR}" && WINEPREFIX=${WINEPOINT} eval "${WINE} ${VDESKTOP} ${WINE_CMD}")
    fi
    waitWineServer

    # try to clean the cdrom
    umount "${WINEPOINT}"
    umount "${SQUASHFSPOINT}"
    rmdir "${SQUASHFSPOINT}"
    rm -rf "${WORKPOINT}"
    rmdir "${WINEPOINT}"
}

init_cmd() {
    WINEPOINT=$1

    (
	echo "#DIR=drive_c/Program Files/myprogram"
	echo "#CMD=start.exe"
    ) > "${WINEPOINT}/autorun.cmd"
}

install_exe() {
    GAMENAME=$1
    BASEGAMENAME=$(basename "${GAMENAME}")
    GAMEDIR=$(dirname "${GAMENAME}")
    WINEPOINT=$(echo "${G_ROMS_DIR}/${BASEGAMENAME}" | sed -e s+"\.exe$"++)".wine"
    INSTALLERFILE="${BASEGAMENAME}"

    createWineDirectory "${WINEPOINT}"

    (cd "${GAMEDIR}" && WINEPREFIX=${WINEPOINT} wine "${INSTALLERFILE}")
    waitWineServer
    init_cmd "${WINEPOINT}"
}

install_msi() {
    GAMENAME=$1
    BASEGAMENAME=$(basename "${GAMENAME}")
    GAMEDIR=$(dirname "${GAMENAME}")
    WINEPOINT=$(echo "${G_ROMS_DIR}/${BASEGAMENAME}" | sed -e s+"\.msi$"++)".wine"
    INSTALLERFILE="${BASEGAMENAME}"

    createWineDirectory "${WINEPOINT}"

    (cd "${GAMEDIR}" && WINEPREFIX=${WINEPOINT} "${MSIEXEC}" /i "${INSTALLERFILE}")
    waitWineServer
    init_cmd "${WINEPOINT}"
}

install_iso() {
    GAMENAME=$1
    BASEGAMENAME=$(basename "${GAMENAME}")
    GAMEISOMOUNT="/var/run/wine/${BASEGAMENAME}.cdrom"
    INSTALLERISO="${GAMENAME}"

    mkdir -p "${GAMEISOMOUNT}" || return 1
    if ! mount -t iso9660 "${INSTALLERISO}" "${GAMEISOMOUNT}"
    then
            if ! mount -t udf "${INSTALLERISO}" "${GAMEISOMOUNT}"
            then
                rmdir "${GAMEISOMOUNT}"
                return 1
            fi
    fi

    WINEPOINT=$(echo "${G_ROMS_DIR}/${BASEGAMENAME}" | sed -e s+"\.iso$"++)".wine"

    createWineDirectory "${WINEPOINT}"
    
    if mkdir -p "${WINEPOINT}/dosdevices" && rm -f "${WINEPOINT}/dosdevices/d:" && ln -sf "${GAMEISOMOUNT}" "${WINEPOINT}/dosdevices/d:"
    then
	WINEPREFIX=${WINEPOINT} wine explorer "d:"
	rm -f "${WINEPOINT}/dosdevices/d:"
    fi

    waitWineServer
    init_cmd "${WINEPOINT}"

    # try to clean the cdrom
    umount "${GAMEISOMOUNT}"
    rmdir "${GAMEISOMOUNT}"
}

wine2squashfs() {
    GAMENAME=$1
    BASEGAMENAME=$(basename "${GAMENAME}")
    GAMEDIR="${GAMENAME}"
    SQUASHFSFILE=$(echo "${G_ROMS_DIR}/${BASEGAMENAME}.squashfs" | sed -e s+"\.wine\.squashfs$"+".wsquashfs"+)
    
    mksquashfs "${GAMEDIR}" "${SQUASHFSFILE}" -comp zstd || return 1
    return 0
}

wine2winetgz() {
    GAMENAME=$1
    BASEGAMENAME=$(basename "${GAMENAME}")
    GAMEDIR="${GAMENAME}"
    WINETGZFILE="${G_ROMS_DIR}/${BASEGAMENAME}.wtgz"

    (cd "${GAMEDIR}" && tar cf - * | gzip -c > "${WINETGZFILE}") || return 1
    return 0
}

gameext() {
    echo "${1}" | sed -e s+"^.*\.\([^\.]*\)$"+"\1"+ | tr A-Z a-z
}

cleanAndExit() {
    RESNEW=$(batocera-resolution currentMode)
    if test "${RESNEW}" != "${G_RESCUR}"
    then
    batocera-resolution setMode "${G_RESCUR}"
    fi

    if test -e "${GST_REGISTRY_1_0}"; then
        rm -f "${GST_REGISTRY_1_0}"
    fi

    exit "${1}"
    # TODO : unmount always, trap, later
}

G_RESCUR=$(batocera-resolution currentMode)

case "${ACTION}" in
    "play")
	GAMENAME=$1
	GAMEEXT=$(gameext "${GAMENAME}")
	case "${GAMEEXT}" in
	    "wine")
		play_wine "${GAMENAME}" || cleanAndExit 1
		;;
	    "pc")
		play_pc "${GAMENAME}" || cleanAndExit 1
		;;
	    "exe")
		play_exe "${GAMENAME}" || cleanAndExit 1
		;;
#	    "iso")
#		play_iso "${GAMENAME}" || cleanAndExit 1
#		;;
	    "wsquashfs")
		play_squashfs "${GAMENAME}" || cleanAndExit 1
		;;
	    "wtgz")
		play_winetgz "${GAMENAME}" || cleanAndExit 1
		;;
	    *)
		echo "unknown extension ${GAMEEXT}" >&2
		cleanAndExit 1
	esac
	;;
    "install")
	GAMENAME=$1
    	GAMEEXT=$(gameext "${GAMENAME}")
	case "${GAMEEXT}" in
	    "exe")
		install_exe "${GAMENAME}" || cleanAndExit 1
		;;
	    "msi")
		install_msi "${GAMENAME}" || cleanAndExit 1
		;;
	    "iso")
		install_iso "${GAMENAME}" || cleanAndExit 1
		;;
	    *)
		echo "unknown extension ${GAMEEXT}" >&2
		cleanAndExit 1
	esac
	;;
    "tricks")
	GAMENAME=$1
	TRICK=$2
    	GAMEEXT=$(gameext "${GAMENAME}")
	case "${GAMEEXT}" in
	    "wine")
		trick_wine "${GAMENAME}" "${TRICK}" || cleanAndExit 1
		;;
	esac
	;;
    "wine2squashfs")
	GAMENAME=$1
	wine2squashfs "${GAMENAME}" || exit 1
	;;
    "wine2winetgz")
	GAMENAME=$1
	wine2winetgz "${GAMENAME}" || exit 1
	;;
    *)
	set +x
	echo "unknown action ${ACTION}" >&2
	usage "${0}"
	cleanAndExit 1
esac
cleanAndExit 0
