diff --git a/src/arguments/input.rs b/src/arguments/input.rs
index 4e0b790..644c60d 100644
--- a/src/arguments/input.rs
+++ b/src/arguments/input.rs
@@ -54,6 +54,7 @@ impl InputDevice {
             None => PersistMode::None,
             Some(value) => match value.as_str() {
                 "reopen" => PersistMode::Reopen,
+                "exit" => PersistMode::Exit,
                 "none" => PersistMode::None,
                 _ => return Err(ArgumentError::new("Invalid persist mode specified.")),
             }
@@ -63,6 +64,7 @@ impl InputDevice {
 
         match persist_mode {
             PersistMode::None => {},
+            PersistMode::Exit => {},
             PersistMode::Reopen => {
                 if paths.iter().any(|path| is_direct_event_device(path)) {
                     println!("Warning: it is a bad idea to enable persistence on paths like /dev/input/event* because the kernel does not guarantee that the number of each event device remains constant. If such a device were to de disattached and reattached, it may show up under a different number. We recommend identifying event devices through their links in /dev/input/by-id/.");
diff --git a/src/arguments/parser.rs b/src/arguments/parser.rs
index 49e788d..ba0cf55 100644
--- a/src/arguments/parser.rs
+++ b/src/arguments/parser.rs
@@ -22,7 +22,7 @@ use super::merge::MergeArg;
 
 const VERSION: Option<&'static str> = option_env!("CARGO_PKG_VERSION");
 const USAGE_MSG: &str = 
-"Usage: evsieve [--input PATH... [domain=DOMAIN] [grab[=auto|force]] [persist=reopen|none]]...
+"Usage: evsieve [--input PATH... [domain=DOMAIN] [grab[=auto|force]] [persist=reopen|exit|none]]...
                [--map SOURCE [DEST...] [yield]]...
                [--copy SOURCE [DEST...] [yield]]...
                [--block [SOURCE...]]...
diff --git a/src/main.rs b/src/main.rs
index 9a6e350..a3527a1 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -285,9 +285,16 @@ fn handle_broken_file(program: &mut Program, index: FileIndex) -> Action {
 
             let should_persist = match device.persist_mode() {
                 PersistMode::None => false,
+                PersistMode::Exit => false,
                 PersistMode::Reopen => true,
             };
 
+            let should_exit = match device.persist_mode() {
+                PersistMode::None => false,
+                PersistMode::Exit => true,
+                PersistMode::Reopen => false,
+            };
+
             if should_persist {
                 if let Some(interface) = program.persist_subsystem.require(&mut program.epoll) {
                     interface.add_blueprint(device.to_blueprint())
@@ -297,6 +304,11 @@ fn handle_broken_file(program: &mut Program, index: FileIndex) -> Action {
                     eprintln!("Internal error: cannot reopen device: persistence subsystem not available.")
                 }
             }
+
+            if should_exit {
+                eprintln!("Exiting.");
+                return Action::Exit;
+	    }
         },
         Pollable::SignalFd(_fd) => {
             eprintln!("Fatal error: signal file descriptor broken.");
diff --git a/src/predevice.rs b/src/predevice.rs
index 2c103c0..a36710f 100644
--- a/src/predevice.rs
+++ b/src/predevice.rs
@@ -34,6 +34,8 @@ impl GrabMode {
 pub enum PersistMode {
     /// Remove the device from the processing stream at runtime, or throw an error at startup time.
     None,
+    /// Exit
+    Exit,
     /// Try to reattach the device at runtime, or throw an error at startup time.
     Reopen,
 }
