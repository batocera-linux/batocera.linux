#!/usr/bin/python

from __future__ import absolute_import, print_function, unicode_literals

try:
  from gi.repository import GObject
except ImportError:
  import gobject as GObject

import dbus
import dbus.mainloop.glib
from optparse import OptionParser, make_option
import bluezutils
import time
import glib
import getopt
import sys

adapters = {}
devices = {}

gadapter = None
gExit = 1

# default parameters
args_timeout = 60
args_first = False
#####

def stopDiscoveringAndEnd():
        global gadapter

        if gadapter is not None:
                try:
                        print("Stopping discovery")
                        gadapter.StopDiscovery()
                except:
                        pass
        mainloop.quit()

def doConnect(address, devName):
        global gExit

        device = bluezutils.find_device(address)
        ntry=15

        while ntry > 0:
                ntry = ntry -1
                try:
                  device.Connect()
                  gExit = 0
                  print("Connected successfully (" + devName + ")")
                  return
                except dbus.exceptions.DBusException as err:
                  print("dbus: " + err.get_dbus_message())
                  time.sleep(1)
                except Exception as err:
                  print("Connection failed (" + devName + ")")
                  time.sleep(1)
        print("Connection failed. Give up. (" + devName + ")")
        raise Exception("connexion failed")

def getDevName(properties):
  #devName = properties["Name"] + " (" + properties["Address"] + ", " + properties["Icon"] + ")"
  #devStatus = "Trusted=" + str(properties["Trusted"]) + ", paired=" + str(properties["Paired"]) + ", connected=" + str(properties["Connected"]), ", blocked=" + str(properties["Blocked"])
  #devTech = "legacyPairing: " + str(properties["LegacyPairing"]) # + ", RSSI: " + unicode(properties["RSSI"])

  if "Name" in properties and "Address" in properties and "Icon" in properties:
    return properties["Name"] + " (" + properties["Address"] + ", " + properties["Icon"] + ")"

  if "Name" in properties and "Address" in properties:
    return properties["Name"] + " (" + properties["Address"] + ")"

  if "Name" in properties and "Icon" in properties:
    return properties["Name"] + " (" + properties["Icon"] + ")"

  if "Name" in properties:
    return properties["Name"]

  if "Address" in properties and "Icon" in properties:
    return properties["Address"] + " (" + properties["Icon"] + ")"

  if "Address" in properties:
    return properties["Address"]

  if "Icon" in properties:
    return properties["Icon"]

  return "unknown"

def doAction(path, properties):
        bluezProps = dbus.Interface(bus.get_object("org.bluez", path), "org.freedesktop.DBus.Properties")
        devName   = getDevName(properties)

        # trust any device
        if "Trusted" in properties:
                if properties["Trusted"] == False:
                        print("Trusting (" + devName + ")")
                        bluezProps.Set("org.bluez.Device1", "Trusted", True)

        # exit after a device is connected, else,
        if args_first:
          stopDiscoveringAndEnd()

def interfaces_added(path, interfaces):
        if "org.bluez.Device1" not in interfaces:
                return

	properties = interfaces["org.bluez.Device1"]
	if not properties:
		return

	if path in devices:
		dev = devices[path]
		devices[path] = dict(devices[path].items() + properties.items())
	else:
		devices[path] = properties

	if "Address" in devices[path]:
		address = properties["Address"]
	else:
		address = "<unknown>"

	doAction(path, devices[path])

def properties_changed(interface, changed, invalidated, path):
	if interface != "org.bluez.Device1":
		return

	if path in devices:
		dev = devices[path]
		devices[path] = dict(devices[path].items() + changed.items())
	else:
		devices[path] = changed

	if "Address" in devices[path]:
		address = devices[path]["Address"]
	else:
		address = "<unknown>"

	doAction(path, devices[path])

def property_changed(name, value):
	if (name == "Discovering" and not value):
		mainloop.quit()

def usage(prog):
        print(prog + " [h, --help] [-t X, --timeout=X] [-f, --first]")

if __name__ == '__main__':
        ### parse arguments
        try:
          opts, args = getopt.getopt(sys.argv[1:], "ht:f", ["help", "timeout=", "first"])
        except getopt.GetoptError:
          usage(sys.argv[0])
          sys.exit(2)

        for opt, arg in opts:
          if opt in ("-h", "--help"):
            usage(sys.argv[0])
            sys.exit()
          elif opt in ("-f", "--first"):
            args_first = True
          elif opt in ("-t", "--timeout"):
            args_timeout = int(arg)
          else:
            assert False, "invalid option"
        #####

	dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

	bus = dbus.SystemBus()
	adapter = bluezutils.find_adapter()

	bus.add_signal_receiver(interfaces_added,
			dbus_interface = "org.freedesktop.DBus.ObjectManager",
			signal_name = "InterfacesAdded")

	bus.add_signal_receiver(properties_changed,
			dbus_interface = "org.freedesktop.DBus.Properties",
			signal_name = "PropertiesChanged",
			arg0 = "org.bluez.Device1",
			path_keyword = "path")

	bus.add_signal_receiver(property_changed,
					dbus_interface = "org.bluez.Adapter1",
					signal_name = "PropertyChanged")

	om = dbus.Interface(bus.get_object("org.bluez", "/"),
				"org.freedesktop.DBus.ObjectManager")
	objects = om.GetManagedObjects()
	for path, interfaces in objects.iteritems():
		if "org.bluez.Device1" in interfaces:
			devices[path] = interfaces["org.bluez.Device1"]
                        #print(devices[path]["Name"] + ", " + str(devices[path]["Paired"]) + ", " + str(devices[path]["Connected"]))
                if "org.bluez.Adapter1" in interfaces:
                        adapters[path] = interfaces["org.bluez.Adapter1"]

        adapter_props = adapters[adapter.object_path]
        print(adapter_props["Name"] + "(" + adapter_props["Address"] + "), powered=" + str(adapter_props["Powered"]))

        # power on adapter if needed
        if adapter_props["Powered"] == 0:
          print("powering on adapter ("+ adapter_props["Address"] +")")
          adapterSetter = dbus.Interface(bus.get_object("org.bluez", adapter.object_path), "org.freedesktop.DBus.Properties")
          adapterSetter.Set("org.bluez.Adapter1", "Powered", True)

        print("Starting discovery")
	adapter.StartDiscovery()
        gadapter = adapter
        glib.timeout_add_seconds(args_timeout, stopDiscoveringAndEnd)
	mainloop = GObject.MainLoop()
	mainloop.run()
        exit(gExit)
