#!/bin/bash 
#
# start/stop/list/enable/disable services
#

do_help() {
    echo "${0} list [all|system|user]"
    echo "${0} enable service1"
    echo "${0} disable service1"
    echo "${0} stop service1"
    echo "${0} start service1"
    echo "${0} restart service1"
}

is_valid_service_name() {
    local LC_ALL=C
    [[ "${1}" =~ ^[_[:alpha:]][_[:alpha:][:digit:]]*$ ]]
}

do_list() {
    enabled_services="$(/usr/bin/batocera-settings-get system.services)"
    if test -n "${enabled_services}"
    then
	for SERVICE in ${enabled_services}
	do
	    export __SERVICE__${SERVICE}=1
	done
    fi

    case "${1}" in
        system)
            service_folders="/usr/share/batocera/services"
            ;;
        user)
            service_folders="/userdata/system/services"
            ;;
        *)
            service_folders="/userdata/system/services /usr/share/batocera/services"
            ;;
    esac

    find -L $service_folders -type f 2>/dev/null | sort -u |
	while read SERVICE
	do
	    SNAME=$(basename "${SERVICE}")
	    if ! is_valid_service_name "${SNAME}"
	    then
		echo "WARNING: Invalid service script name: ${SNAME}" 1>&2
		continue
	    fi
	    SVAR=__SERVICE__${SNAME}
	    if test "${!SVAR}" = 1
	    then
		if test -t 1
		then
		    printf "%-10s %s\n" "${SNAME}" "*"
		else
		    printf "%s;%s\n" "${SNAME}" "*"
		fi
	    else
		if test -t 1
		then
		    printf "%-10s %s\n" "${SNAME}" "-"
		else
	    	    printf "%s;%s\n" "${SNAME}" "-"
		fi
	    fi
	done
}

do_status() {
    find -L /userdata/system/services /usr/share/batocera/services -type f -name "${1}" 2>/dev/null |
	while read SERVICE
	do
	    bash "${SERVICE}" status
	done
}

do_start() {
    find -L /userdata/system/services /usr/share/batocera/services -type f -name "${1}" 2>/dev/null |
	while read SERVICE
	do
	    bash "${SERVICE}" start
	done
}

do_stop() {
    find -L /userdata/system/services /usr/share/batocera/services -type f -name "${1}" 2>/dev/null |
	while read SERVICE
	do
	    bash "${SERVICE}" stop
	done
}

do_enable() {
    if ! is_valid_service_name "${1}"
    then
	echo "ERROR: Invalid service name: ${1}" 1>&2
	return
    fi

    enabled_services="$(/usr/bin/batocera-settings-get system.services)"

    # check if already set
    if test -n "${enabled_services}"
    then
	for SERVICE in ${enabled_services}
	do
	    if test "${SERVICE}" = "${1}"
	    then
		return
	    fi
	done
    fi

    #
    if test -n "${enabled_services}"
    then
	/usr/bin/batocera-settings-set system.services "${enabled_services} ${1}"
    else
	/usr/bin/batocera-settings-set system.services "${1}"
    fi
}

do_disable() {
    enabled_services="$(/usr/bin/batocera-settings-get system.services)"

    NEW_ENABLED_SERVICES=
    JDONE=0
    
    # build new services
    if test -n "${enabled_services}"
    then
	for SERVICE in ${enabled_services}
	do
	    if test "${SERVICE}" != "${1}"
	    then
		if test -n "${NEW_ENABLED_SERVICES}"
		then
		    NEW_ENABLED_SERVICES="${NEW_ENABLED_SERVICES} ${SERVICE}"
		else
		    NEW_ENABLED_SERVICES="${SERVICE}"
		fi
	    else
		JDONE=1
	    fi
	done
    fi

    #
    if test "${JDONE}" = 1
    then
	/usr/bin/batocera-settings-set system.services "${NEW_ENABLED_SERVICES}"
    fi
}

ACTION=$1
shift

case "${ACTION}" in
    list)
	do_list "${1}"
	;;
    status)
	do_status "${1}"
	;;
    start)
	do_start "${1}"
	;;
    stop)
	do_stop "${1}"
	;;
    restart)
	do_stop "${1}"
	sleep 2
	do_start "${1}"
	;;
    enable)
	do_enable "${1}"
	;;
    disable)
	do_disable "${1}"
	;;
    *)
	do_help "${0}"
	;;
esac
