#!/bin/bash

do_clean() {
    test -n "${GETPERPID}" && kill -9 "${GETPERPID}"
    rm -f "/userdata/system/upgrade/boot.tar.xz"
    rm -f "/userdata/system/upgrade/boot.tar.xz.md5"
}
trap do_clean EXIT

getPer() {
    TARVAL=$1

    while true
    do
	CURVAL=$(stat "/userdata/system/upgrade/boot.tar.xz" | grep -E '^[ ]*Size:' | sed -e s+'^[ ]*Size: \([0-9][0-9]*\) .*$'+'\1'+)
	CURVAL=$((CURVAL / 1024 / 1024))
	PER=$((CURVAL * 100 / TARVAL))
	echo "downloading >>> ${PER}%"
	sleep 5
    done
}

do_versioncheck() {
    echo "$1" | awk '{ $0=$(NF-1)$NF; gsub(/[^0-9]/,""); print }' 2>/dev/null
}

do_wannaupdate() {
    local text; local to
    CUR_VER=$(cat /usr/share/batocera/batocera.version)
    NET_VER=$(wget -q -O - "${DWD_HTTP_DIR}/batocera.version")
    [ $? -ne 0 ] && { echo "Something went wrong..."; return; } #Possible an update URL which is not valid
    NET_VER=$(echo "$NET_VER" | head -n1)
    echo "Current Version installed:    $CUR_VER"
    echo "Version you want to download: $NET_VER"
    CUR_VER=$(do_versioncheck "$CUR_VER")
    NET_VER=$(do_versioncheck "$NET_VER")
    [ -z $NET_VER ] && NET_VER=0
    [ $CUR_VER -lt $NET_VER ] && { text="UPGRADE found!"; to=1; }
    [ $CUR_VER -gt $NET_VER ] && { text="DOWNGRADE found!"; to=10; }
    [ $CUR_VER -eq $NET_VER ] && { text="No Update found!"; to=15; }
    [ $NET_VER -eq 0 ] && { text="Could not detect version!"; to=15; }
    read -p "${text} Press Y or wait ${to}s to proceed! Press N to break!" -N 1 -t ${to}
    [ $? -gt 128 ] && REPLY=y
    if [ "$REPLY" == n ] || [ "$REPLY" == N ] ; then
        echo; echo "Abort..."
        exit
    fi
}

# ---- MAIN ----

CUSTOM_URLDIR=
if test $# -eq 1
then
    CUSTOM_URLDIR=$1
fi

#Started from Terminal/SSH or from Emulationstation?
[ -t 1 ] && TERMINAL=1 || TERMINAL=0

echo "Starting the upgrade..."

# --- Prepare update URLs ---

updateurl="https://updates.batocera.org"

board=$(cat /boot/boot/batocera.board)
test "${board}" = "rpi4" && board=rpi464 # "temporarly" download on rpi464 for rpi4

updatetype="$(/usr/bin/batocera-settings-get updates.type)"
settingsupdateurl="$(/usr/bin/batocera-settings-get updates.url)"

# customizable upgrade url website
test -n "${settingsupdateurl}" && updateurl="${settingsupdateurl}"

# force a default value in case the value is removed or miswritten
test "${updatetype}" != "stable" -a "${updatetype}" != "unstable" -a "${updatetype}" != "beta" && updatetype="stable"

# custom the url directory
DWD_HTTP_DIR="${updateurl}/${board}/${updatetype}/last"

if test -n "${CUSTOM_URLDIR}"
then
    DWD_HTTP_DIR="${CUSTOM_URLDIR}"
fi

# give user more hints for update in terminal
[ $TERMINAL -eq 1 ] && { do_wannaupdate; echo; }

# --- Prepare file downloads ---

# download directory
mkdir -p /userdata/system/upgrade || exit 1

# get size to download
url="${DWD_HTTP_DIR}/boot.tar.xz"
echo "url: ${url}"
headers=$(curl -A "batocera-upgrade.header" -sfIL "${url}")
test $? -eq 0 || exit 1
size=$(echo "$headers" | grep "Content-Length: " | tail -1 | sed -e s+'^Content-Length: \([0-9]*\).*$'+'\1'+) # take the last one in case of redirection
size=$((size / 1024 / 1024))
test $? -eq 0 || exit 1
echo "need to download ${size}mb"

# check free space on fs
for fs in /userdata /boot
do
    freespace=$(df -m "${fs}" | tail -1 | awk '{print $4}')
    test $? -eq 0 || exit 1
    if test "${size}" -gt "${freespace}"
    then
        echo "Not enough space on ${fs} to download the update"
        exit 1
    fi
done

# download
url="${DWD_HTTP_DIR}/boot.tar.xz"

if [ $TERMINAL = 0 ]; then
    # Download by EMULATIONSTATION
    touch "/userdata/system/upgrade/boot.tar.xz"
    getPer "${size}" &
    GETPERPID=$!
    curl -A "batocera-upgrade" -sfL "${url}" -o "/userdata/system/upgrade/boot.tar.xz" || exit 1
    kill -9 "${GETPERPID}"
    GETPERPID=
else
    # Download inside SSH/TERMINAL
    wget -U "batocera-upgrade" -q --show-progress "${url}" -O "/userdata/system/upgrade/boot.tar.xz" || exit 1
fi

# try to download an md5 checksum
curl -A "batocera-upgrade.md5" -sfL "${url}.md5" -o "/userdata/system/upgrade/boot.tar.xz.md5"
if test -e "/userdata/system/upgrade/boot.tar.xz.md5"
then
    DISTMD5=$(cat "/userdata/system/upgrade/boot.tar.xz.md5")
    CURRMD5=$(md5sum "/userdata/system/upgrade/boot.tar.xz" | sed -e s+' .*$'++)
    if test "${DISTMD5}" = "${CURRMD5}"
    then
        echo "valid checksum."
    else
        echo "invalid checksum. Got +${DISTMD5}+. Attempted +${CURRMD5}+."
        exit 1
    fi
else
    echo "no checksum found. don't check the file."
fi

# remount /boot in rw
echo "remounting /boot in rw"
if ! mount -o remount,rw /boot
then
    exit 1
fi

# remove old /boot/post-batocera-upgrade if exists
if test -e "/boot/post-batocera-upgrade"
then
    if ! rm -rf /boot/post-batocera-upgrade
    then
        exit 1
    fi
fi

# backup boot files
# all these files doesn't exist on non rpi platform, so, we have to test them
# don't put the boot.ini file while it's not really to be customized
echo "backing up some boot files"
BOOTFILES="config.txt batocera-boot.conf"
for BOOTFILE in ${BOOTFILES}
do
    if test -e "/boot/${BOOTFILE}"
    then
        if ! cp "/boot/${BOOTFILE}" "/boot/${BOOTFILE}.upgrade"
        then
            exit 1
        fi
    fi
done

# extract file on /boot
echo "extracting files"
if ! (cd /boot && xz -dc < "/userdata/system/upgrade/boot.tar.xz" | tar xvf -)
then
    exit 1
fi

# restore boot files
for BOOTFILE in ${BOOTFILES}
do
    if test -e "/boot/${BOOTFILE}.upgrade"
    then
        if ! mv "/boot/${BOOTFILE}.upgrade" "/boot/${BOOTFILE}"
        then
            echo "Outch" >&2
        fi
    fi
done

# run post-batocera-upgrade.sh if folder exists
if test -e "/boot/post-batocera-upgrade"
then
    echo "running post-batocera-upgrade.sh"
    if ! /boot/post-batocera-upgrade/post-batocera-upgrade.sh
    then
        echo "post-batocera-upgrade.sh failed" >&2
    else
        rm -rf /boot/post-batocera-upgrade
    fi
fi

echo "synchronizing disk"

# remount /boot in ro
if ! mount -o remount,ro /boot
then
    exit 1
fi

# a sync
rm -f "/userdata/system/upgrade/boot.tar.xz"
rm -f "/userdata/system/upgrade/boot.tar.xz.md5"
sync

echo; echo "Done. Please reboot the system so that the changes take effect!"
exit 0
