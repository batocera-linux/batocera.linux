#!/bin/bash
#
# Script for BATOCERA to terminate every emulator instance
# or to give feedback about state of EmulationStation and active EMULATORS
# or to give some basic info about your build
# by cyperghost aka crcerror // 18.03.2019
# Batocera versions // 04.06.2019
# Added /bin/usr script // 22.09.2019
# Added sigterm level, added second parameter to activate sigterm during smart_wait function
# Added architecture and version information // 05.01.2020
# Added update information + beta branch // 10.02.2020
# Added --reboot // 26.02.2020
# Added --overlay and --remount // 13.04.2020
# Updated version detection only depended from build-date and build-time now
# Added --reset-ra to reset all settings from RetroArch cores // 27.06.2021

# Get all childpids from calling process
function getcpid() {
local cpids="$(pgrep -P $1)"
    for cpid in $cpids; do
        pidarray+=($cpid)
        getcpid $cpid
    done
}

# Get a sleep while process is active in background
# if PID is still active then use kill -9 switch
function smart_wait() {
    local PID=$2
    local disablekill9=$1
    local watchdog=0
    sleep 1
    while [[ -e /proc/$PID ]]; do
        sleep 0.25
        ((watchdog++))
        [[ $disablekill9 -eq 1 ]] && [[ watchdog -gt 12 ]] && kill -9 $PID
    done
}

# Emulator currently running?
function check_emurun() {
    local RC_PID="$(pgrep -f -n emulatorlauncher)"
    echo $RC_PID
}

# Emulationstation currently running?
function check_esrun() {
    local ES_PID="$(pgrep -f -n emulationstation)"
    echo $ES_PID
}


# Kill emulators running in a proper way! (SAVE SRM STATE!)
function emu_kill() {
    RC_PID=$(check_emurun)
    if [[ -n $RC_PID ]]; then
        getcpid $RC_PID
        for ((z=${#pidarray[*]}-1; z>-1; z--)); do
            kill ${pidarray[z]}
            smart_wait 1 ${pidarray[z]}
        done
        unset pidarray
    fi
}

# Future proof update check, depends just on build-date and build-time
function version_update() {
    echo "$1" | awk '{ $0=$(NF-1)$NF; gsub(/[^0-9]/,""); print }'
}

# ---- MAINS ----

case ${1,,} in
    --restart)
        /etc/init.d/S31emulationstation stop
        ES_PID=$(check_esrun)
        [[ -z $ES_PID ]] || smart_wait 0 $ES_PID
        /etc/init.d/S31emulationstation start
    ;;

    --espid)
        # Display ES PID to stdout
        ES_PID=$(check_esrun)
        [[ -n $ES_PID ]] && echo $ES_PID || echo 0
    ;;

    --emupid)
        # This helps to detect emulator is running or not
        RC_PID=$(check_emurun)
        [[ -n $RC_PID ]] && echo $RC_PID || echo 0
    ;;

    --emukill|--shutdown|--reboot)
        RC_PID=$(check_emurun)
        [[ -n $RC_PID ]] && emu_kill && sleep 2

        ES_PID=$(check_esrun)
        if [[ "${1,,}" == "--shutdown" && -n $ES_PID ]]; then
            kill $ES_PID
            smart_wait 0 $ES_PID
            shutdown -h now
        elif [[ "${1,,}" == "--reboot" && -n $ES_PID ]]; then
            kill $ES_PID
            smart_wait 0 $ES_PID
            reboot
        fi
    ;;

    --kodi)
        RC_PID=$(check_emurun)
        [[ -n $RC_PID ]] && emu_kill && sleep 2

        /etc/init.d/S31emulationstation stop
        batocera-kodilauncher &
        wait $!
        exitcode=$?
        [[ $exitcode -eq 0 ]] && /etc/init.d/S31emulationstation start
        [[ $exitcode -eq 10 ]] && shutdown -r now
        [[ $exitcode -eq 11 ]] && shutdown -h now
    ;;

    --version|--arch|--update)
        [[ ${2,,} == "beta" ]] && BRANCH=beta || BRANCH=stable
        if [[ -f /usr/share/batocera/batocera.version ]]; then
            VER=$(cat /usr/share/batocera/batocera.version)
            ret=$?
        else
            VER="UNKNOWN"
            ret=1
        fi

        if [[ -f /boot/boot/batocera.board ]]; then
            BOARD=$(cat /boot/boot/batocera.board)
            ret=$?
            test "${BOARD}" = "rpi4" && BOARD=rpi464 # "temporarily" download on rpi464 for rpi4
        else
            BOARD="UNKNOWN"
            ret=1
        fi

        if [[ "${1,,}" == "--update" && $ret -eq 0 ]]; then
            URL="https://updates.batocera.org/$BOARD/$BRANCH/last/batocera.version"
            NET_VERSION=$(wget -q -O - "$URL")
            [[ $? -eq 0 ]] || NET_VERSION="Connection failed!"
            NET_VER=$(echo "$NET_VER" | head -n1)
            echo "Installed:   $VER"
            echo "Webversion:  $NET_VERSION"
            echo "Update URL:  $(dirname $URL)"
            echo "Branch:      ${BRANCH^^}-branch searched"
            echo "Used arch:   $BOARD"
            if [[ $(version_update "$VER") -lt $(version_update "$NET_VERSION") ]]; then
                echo "Status:      Possible Update found!"
                ret=0
            else
                echo "Status:      No Update found!"
                ret=1
            fi
        else
            [[ ${1,,} == "--version" ]] && echo "$VER"
            [[ ${1,,} == "--arch" ]] && echo "$BOARD"
        fi
        exit $ret
    ;;

    --remount)
        mount_dir="$2"
        [[ -z "$mount_dir" ]] && mount_dir="/boot"
        ! [[ -d "$mount_dir" ]] && echo "Error: directory '$mount_dir' not found!" && exit 1
        if ! [[ -w "$mount_dir" ]]; then
            echo "Directory '$mount_dir' is locked... Set it as writeable now!"
            mount -o remount,rw "$mount_dir" || echo "Error! Directory state not changed!"
        else
            echo "Directory '$mount_dir' is writeable... Set it to lock!"
            mount -o remount,ro "$mount_dir" || echo "Error! Directory state not changed!"
        fi
    ;;
    --overlay)
        [[ -f /boot/boot/overlay ]] && echo "Overlay available in /boot/boot/overlay" || { echo "Overlay file not found!"; exit 1; }
        read -p "Do you want to backup overlay file (y/n)? " yn
        case ${yn:0:1} in
            y|Y)
                BA_OVERLAY="$HOME/$(date +%y%m%d-%s)-overlay.zip"
                zip -j "$BA_OVERLAY" /boot/boot/overlay || exit 1
                echo "Created backup to: $BA_OVERLAY"
                echo "To restore: 'unzip $BA_OVERLAY -d /boot/boot'"
           ;;
            *)
               echo "Nothing done!"
        esac
    ;;
    --reset-ra)
        if [[ -d "$HOME/configs/retroarch" ]]; then
            rm -rf $HOME/configs/retroarch
            echo "Deleted: dir $HOME/configs/retroarch"
        fi
        if [[ -d "$HOME/.config/retroarch" ]]; then
            rm -rf $HOME/.config/retroarch
            echo "Deleted: dir $HOME/.config/retroarch"
        fi
        read -p "Do you want to reset RetroArch parameters for 'batocera.conf' file (y/n)? " yn
        case ${yn:0:1} in
            y|Y)
                echo "Reseting RetroArch parameter in 'batocera.conf'"
                sed -i '/^global.retroarch.*/d' $HOME/batocera.conf
            ;;
        esac
        echo "All done! -- Please reboot"
    ;;
    *)
        cat <<-_EOF_
		BATOCERA SWISS KNIFE FOR EmulationStation
		  Please parse parameters to this script!
		  --restart  will RESTART EmulationStation only
		  --kodi     will startup KODI Media Center stopping ES
		  --reboot   will REBOOT whole system
		  --shutdown will SHUTDOWN whole system
		  --emukill  will exit any running EMULATORS
		  --espid    checks if EmulationStation is currently active
		      This number is the real PID of the binary!
		      If the ouput is 0, then ES isn't active
		  --emupid   to check if an Emulator is running
		      This number is just the PID of emulatorlauncher.py
		      If output is 0 then there is no emulator active!

		  --arch     Shows current architecture running
		  --version  Shows current version of BATOCERA running
		  --update   Shows possible update for your install
		      default: stable, you can type --update beta

		  --overlay  will try to backup your overlay file
		  --remount  toggle write access to <dir>, default /boot
		      This switch can have serious effects for your setup
		  --reset-ra will set all RA settings to default
		_EOF_
    ;;

esac
