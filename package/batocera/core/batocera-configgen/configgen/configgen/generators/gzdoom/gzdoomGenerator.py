from __future__ import annotations

import shlex
from typing import TYPE_CHECKING, Final

from ... import Command
from ...batoceraPaths import BATOCERA_SHARE_DIR, CONFIGS, LOGS, mkdir_if_not_exists
from ..Generator import Generator

if TYPE_CHECKING:
    from pathlib import Path

    from ...types import HotkeysContext

_CONFIG_DIR: Final = CONFIGS / "gzdoom"
_INI_FILE: Final = _CONFIG_DIR / "gzdoom.ini"
_FM_BANKS_DIR: Final = _CONFIG_DIR / "fm_banks"
_SOUND_FONTS_DIR: Final = _CONFIG_DIR / "soundfouts"

def set_joystick_setting(ini_file: Path, set_gz_joystick: str) -> None:
    with ini_file.open("r") as file:
        lines = file.readlines()

    joystick_line_found = False
    for i, line in enumerate(lines):
        if "use_joystick" in line:
            lines[i] = f"use_joystick={set_gz_joystick}\n"
            joystick_line_found = True
            break

    if not joystick_line_found:
        if "[GlobalSettings]\n" not in lines:
            lines.append("[GlobalSettings]\n")
            lines.append(f"use_joystick={set_gz_joystick}\n")
        else:
            for i, line in enumerate(lines):
                if line.strip() == "[GlobalSettings]":
                    lines.insert(i + 1, f"use_joystick={set_gz_joystick}\n")

    with ini_file.open("w") as file:
        file.writelines(lines)

class GZDoomGenerator(Generator):

    def getHotkeysContext(self) -> HotkeysContext:
        return {
            "name": "gzdoom",
            "keys": { "exit": ["KEY_LEFTALT", "KEY_F4"], "save_store": "KEY_F6", "restore_store": "KEY_F9" }
        }

    def generate(self, system, rom, playersControllers, metadata, guns, wheels, gameResolution):
        # check the path is added to the ini file
        fm_banks = f"Path={_FM_BANKS_DIR}\n"
        sound_fonts = f"Path={_SOUND_FONTS_DIR}\n"

        # check directories exist
        mkdir_if_not_exists(_CONFIG_DIR)
        mkdir_if_not_exists(_SOUND_FONTS_DIR)
        mkdir_if_not_exists(_FM_BANKS_DIR)

        gzdoom_api = system.config.get("gz_api", "0")

        # RPi4 workaround which has both ligl & libgles
        # For arm systems, we want to force OpenGL ES - 3
        arch_path = BATOCERA_SHARE_DIR / "batocera.arch"
        if gzdoom_api == "0":
            with arch_path.open("r") as file:
                content = file.read().strip()
                if content != "x86_64":
                    gzdoom_api = "3"

        # now set the config
        extra_config = ""
        if gzdoom_api == "3":
            extra_config = (
                "gl_es 1\n"
                "vid_preferbackend 3\n"
                # This setting greatly improves performance:
                "gles_use_mapped_buffer true\n"
            )
        else:
            extra_config = (f"vid_preferbackend {gzdoom_api}\n")

        # A script file with console commands that are always ran when a game starts
        script_file = _CONFIG_DIR / "gzdoom.cfg"
        with script_file.open("w") as script:
            script.write(
                "# This file is automatically generated by gzdoomGenerator.py\n"
                # In the code, logfile does not appear to be created unless done so explicitly
                f"logfile {LOGS / 'gzdoom.log'}\n"
                f"vid_fps {'true' if system.config.show_fps else 'false'}\n"
                f"{extra_config}"
                "echo BATOCERA\n"  # easy check that script ran in console
            )

        # check the directory name is in the ini file
        if not _INI_FILE.exists():
            with _INI_FILE.open("w") as file:
                file.write('[IWADSearch.Directories]\n')
                file.write(f'Path={rom.parent}\n')
                file.write('[FileSearch.Directories]\n')
                file.write(f'Path={rom.parent}\n')
                file.write('[SoundfontSearch.Directories]\n')
                file.write(f"Path={_SOUND_FONTS_DIR}\n")
                file.write(f"Path={_FM_BANKS_DIR}\n")
                file.write('[GlobalSettings]\n')
        else:
            # configparser wasn't working on the default ini file (non-compliant)
            # it's not a true ini file, use this crude method instead
            line_to_add = f"Path={rom.parent}\n"
            with _INI_FILE.open("r") as file:
                lines = file.readlines()
                if line_to_add not in lines:
                    for i in range(len(lines)):
                        if lines[i] == "[IWADSearch.Directories]\n":
                            lines.insert(i+1, line_to_add)
                        if lines[i] == "[FileSearch.Directories]\n":
                            lines.insert(i+1, line_to_add)

            with _INI_FILE.open("w") as file:
                file.writelines(lines)

        # also check the config directories are also set
        with _INI_FILE.open("r") as file:
            lines = file.readlines()
            if fm_banks not in lines:
                for i in range(len(lines)):
                    if lines[i] == "[SoundfontSearch.Directories]\n":
                        lines.insert(i+1, fm_banks)

            if sound_fonts not in lines:
                for i in range(len(lines)):
                    if lines[i] == "[SoundfontSearch.Directories]\n":
                        lines.insert(i+1, sound_fonts)

        with _INI_FILE.open("w") as file:
            file.writelines(lines)

        # Enable the joystick for configuration in GZDoom by the user currently
        set_gz_joystick = system.config.get("gz_joystick", "false")

        set_joystick_setting(_INI_FILE, set_gz_joystick)

        # define how wads are loaded
        # if we use a custom extension use that instead
        if rom.suffix == ".gzdoom":
            with rom.open() as f:
                iwad_command = f.read().strip()
            args = shlex.split(iwad_command)
            return Command.Command(
                array=[
                    "gzdoom",
                    *args,
                    "-exec", script_file,
                    "-width", str(gameResolution["width"]),
                    "-height", str(gameResolution["height"]),
                    "-nologo" if system.config.get_bool("nologo") else "",
                ]
            )

        return Command.Command(
            array=[
                "gzdoom",
                "-iwad", rom.name,
                "-exec", script_file,
                "-width", str(gameResolution["width"]),
                "-height", str(gameResolution["height"]),
                "-nologo" if system.config.get_bool("nologo") else "",
            ]
        )

    def getInGameRatio(self, config, gameResolution, rom):
        return 16/9
